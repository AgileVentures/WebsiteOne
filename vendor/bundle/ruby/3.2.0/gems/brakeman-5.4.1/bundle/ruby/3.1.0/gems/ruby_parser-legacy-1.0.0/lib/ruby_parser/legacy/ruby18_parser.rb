#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby18Parser < RubyParser::Legacy::RubyParser


require "ruby_parser/legacy/ruby_lexer"
require "ruby_parser/legacy/ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-281,494,198,199,683,198,199,-281,-281,-281,261,-83,218,-281,-281,648',
'-281,-89,-84,-85,-88,436,-64,-444,523,-79,728,-90,501,535,-444,261,494',
'494,-86,-281,-281,574,-281,-281,-281,-281,-281,494,215,-87,-76,593,217',
'216,-84,261,254,469,594,75,627,494,725,255,-72,98,710,76,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,627,627,-281',
'-281,-281,-501,554,525,524,536,-281,-79,294,-281,534,-366,260,294,-281',
'-500,-281,-89,-281,-281,-281,-281,-281,-281,-281,-79,-281,593,-281,190',
'102,-75,493,260,594,101,647,-81,-76,-77,-80,-281,-281,-504,-80,-79,-281',
'-82,-88,-79,-504,-504,-504,260,-78,102,-504,-504,-77,-504,101,102,102',
'493,493,-79,101,101,-504,218,564,102,102,626,493,294,101,101,-504,-504',
'191,-504,-504,-504,-504,-504,102,693,493,192,-448,101,694,102,102,626',
'626,-448,101,101,523,215,669,668,563,217,216,-504,-504,-504,-504,-504',
'-504,-504,-504,-504,-504,-504,-504,-504,-504,564,-77,-504,-504,-504',
'523,551,-451,523,193,-504,528,-85,-504,-498,-504,545,-87,-504,-77,-504',
'237,-504,-504,-504,-504,-504,-504,-504,523,-504,-504,-504,523,563,-447',
'198,199,399,-77,525,524,-447,-77,564,-504,-504,-275,-78,675,-504,546',
'-86,-83,-275,-275,-275,834,-77,-275,-275,-275,-85,-275,-442,-504,525',
'524,526,525,524,-442,-504,-275,-275,564,-498,-500,563,780,-442,-504',
'-275,-275,-90,-275,-275,-275,-275,-275,525,524,521,-79,525,524,530,-87',
'-498,-504,-445,-439,285,666,665,669,668,-445,-439,563,286,-275,-275',
'-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-84,-442',
'-275,-275,-275,-501,482,-275,-442,617,-275,-500,-449,-275,-275,294,-275',
'834,-275,-449,-275,321,-275,-275,-275,-275,-275,-275,-275,518,-275,-504',
'-275,-283,-446,639,519,-497,102,640,-283,-446,342,101,-520,-275,-275',
'-275,-275,-283,-275,-520,-520,-520,-504,-501,-520,-520,-520,197,-520',
'-500,-501,666,665,669,668,-501,-500,102,-520,-501,-451,-500,101,482',
'345,-500,481,-520,-520,-504,-520,-520,-520,-520,-520,-439,-504,-501',
'500,469,501,-500,-439,-500,365,-504,366,-497,398,-82,400,-439,-504,-90',
'-274,218,198,199,401,-504,102,-274,-75,-504,-500,101,-83,-520,-504,-497',
'-274,232,233,362,-520,198,199,364,363,263,-520,-81,430,102,433,-89,-504',
'215,101,221,102,217,216,213,214,101,436,219,441,220,463,662,-520,660',
'659,658,661,464,102,263,-501,-501,-501,101,-501,-520,462,-520,-501,-501',
'-520,482,-63,-501,484,-501,-501,-501,-501,-501,-501,-501,482,737,728',
'484,-501,-501,-501,-501,-501,-501,-501,198,199,737,728,666,665,669,668',
'457,-501,287,288,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501,458',
'-501,-501,459,-501,-501,-501,218,-521,-521,-521,-521,224,226,465,-282',
'-521,-521,-450,467,468,-450,-282,232,233,-450,-501,554,-450,-501,-501',
'-282,-501,-501,-450,266,-501,-450,-501,215,-501,221,-501,217,216,213',
'214,225,223,219,-501,220,294,263,-520,-501,-501,-501,-501,-501,-501',
'-520,-520,-520,-501,-501,-520,-520,-520,-281,-520,218,470,-88,471,844',
'-281,218,294,486,-520,-501,845,355,505,-281,506,232,233,-520,-520,843',
'-520,-520,-520,-520,-520,529,533,-274,540,600,383,215,472,601,-274,217',
'216,213,214,473,542,142,143,-274,140,124,125,126,397,129,131,-262,544',
'127,263,-282,395,-520,144,145,132,133,-282,396,-520,218,218,218,218',
'263,-520,-282,397,574,590,137,136,294,123,141,139,138,134,135,130,128',
'121,-281,122,595,-282,146,-520,237,-281,596,597,-282,-72,-501,-500,-500',
'-500,-281,-500,-520,-282,-520,-500,-500,-520,598,475,-500,611,-500,-500',
'-500,-500,-500,-500,-500,612,294,619,622,-500,-500,-500,-500,-500,-500',
'-500,501,630,772,773,218,774,96,97,677,-500,679,441,-500,-500,-500,-500',
'-500,-500,-500,-500,-500,-500,441,-500,-500,696,-500,-500,-500,218,-521',
'-521,-521,-521,224,226,215,-283,-521,-521,217,216,213,214,-283,232,233',
'707,-500,695,436,-500,-500,-283,-500,-500,436,246,-500,712,-500,215',
'-500,221,-500,217,216,213,214,225,223,219,-500,220,714,718,719,-500',
'-500,-500,-500,-500,-500,724,195,263,-500,-500,65,66,67,196,54,263,218',
'-86,59,60,218,728,194,63,733,61,62,64,26,27,68,69,728,741,742,746,25',
'31,30,91,90,92,93,760,762,20,765,766,767,768,541,-263,44,781,789,95',
'94,85,53,87,86,88,89,96,97,574,83,84,574,41,42,40,218,222,227,228,229',
'224,226,234,235,230,231,-281,211,212,644,574,232,233,-281,203,801,642',
'207,-501,263,55,56,-281,263,57,643,237,215,806,221,43,217,216,213,214',
'225,223,219,21,220,-262,810,503,81,75,77,78,79,80,504,813,815,76,82',
'102,236,818,-218,502,101,65,66,67,10,54,822,826,-328,59,60,827,294,838',
'63,-328,61,62,64,26,27,68,69,839,-328,846,847,25,31,30,91,90,92,93,848',
'849,20,853,218,856,858,859,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
'860,83,84,865,41,42,40,218,222,227,228,229,224,226,215,866,230,231,217',
'216,213,214,870,232,233,873,39,874,765,33,765,766,55,56,887,890,57,574',
'35,215,574,221,43,217,216,213,214,225,223,219,21,220,906,907,908,81',
'75,77,78,79,80,912,611,916,76,82,65,66,67,917,54,355,765,919,59,60,920',
'574,574,63,3,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,104',
'105,106,107,108,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,662',
'283,660,659,658,661,104,105,106,107,108,104,105,106,107,108,,,,,,784',
',,207,,,55,56,,,57,,,,,,662,652,660,659,658,661,,,,666,665,669,668,81',
'75,77,78,79,80,,,,76,82,65,66,67,787,54,,,,59,60,,,,63,652,61,62,64',
'249,250,68,69,666,665,669,668,248,278,282,91,90,92,93,,,,,,,,541,,279',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,218,222,227,228,229,224',
'226,234,235,230,231,,211,212,,,232,233,,784,,,207,,,55,56,,,57,,,215',
',221,,217,216,213,214,225,223,219,,220,,,,81,75,77,78,79,80,,,,76,82',
',236,,881,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,',
'25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43',
'662,,660,659,658,661,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10',
'54,,,,59,60,,,,63,,61,62,64,26,27,68,69,666,665,669,668,25,31,30,91',
'90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,218,222,227,228,229,224,226,234,235,230,231,,-521,-521,,,232',
'233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219',
'21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,,,232',
'233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,,219,21,220',
',,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,218,222,227,228,229,224,226,234',
'235,230,231,,-521,-521,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221',
'43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82',
'8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,218,-521,-521,-521,-521,224,226,,,-521,-521,,,,,,232,233,,39',
',,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219,21,220',
',,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,218,-521,-521,-521,-521,224,226',
',,-521,-521,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216',
'213,214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
'218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217',
'216,213,214,,,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10',
'54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20',
',,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,',
',,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216',
'213,214,,,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,-521',
'-521,-521,-521,224,226,,,-521,-521,,,,,,232,233,,39,,,33,,,55,56,,,57',
',35,215,,221,43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79',
'80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,',
',,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,218,-521,-521,-521,-521,224,226,,,-521,-521,',
',,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225',
'223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,222,227',
'228,229,224,226,234,,230,231,,,,,,232,233,,39,,,33,,,55,56,,,57,,35',
'215,,221,43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35',
'215,,221,43,217,216,213,214,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65',
'66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41',
'42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,268,,,55,56,,,57,,35,215,,221',
'43,217,216,213,214,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10',
'54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20',
',,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,',
',,,,,,,,,,,,,,39,,,268,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35',
',,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,268,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79',
'80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,',
',,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,',
',,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,',
',63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,',
',,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,',
',63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207,,,55,56,,,57,,,,,,',
',,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,792,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,797,',
'246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,799,,246,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163',
'162,183,184,178,161,160,155,181,185,186,165,154,168,172,174,166,159',
',,175,182,177,176,169,179,164,152,171,170,,,,,,151,158,149,150,147,148',
'112,114,111,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,,,146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244',
',246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,,246,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,',
'44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,',
',,,203,,,207,,,445,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,273',
',,55,56,,,57,,842,,841,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,455,55,56,,,57',
',244,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,-252,-252,-252,,-252,,,,-252,-252,,,,-252,,-252,-252',
'-252,-252,-252,-252,-252,,,,,-252,-252,-252,-252,-252,-252,-252,,,,',
',,,,,-252,,,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,,-252',
'-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,,-252,263,,-252,-252,',
',-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252,-252,-252,-252,-252',
',,,-252,-252,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,',
',248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,-252,-252,-252,,-252,,,,-252',
'-252,,,,-252,,-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252',
'-252,-252,-252,-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252',
'-252,-252,-252,,-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,',
'-252,266,,-252,-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252',
'-252,-252,-252,-252,,,,-252,-252,65,66,67,,54,,,,59,60,,,,63,,61,62',
'64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,',
',55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,',
',,,,,,,,,,,,,,,,276,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207,,,55,56,,,57,,,,,,,,,',
',,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,867,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91',
'90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,272,,,,,,,,,,,,,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,207,,,55,56,,,57,,,,,,',
',,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162',
'183,184,178,161,160,155,181,185,186,165,154,168,172,174,166,159,,,175',
'182,177,176,169,179,164,152,171,170,,,,,,151,158,149,150,147,148,112',
'114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
',,146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,249,250,68,69,,,',
',248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207,,,55,56,,,57,,,,,,,,,,,,',
',,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62',
'64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92',
'93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,',
',,,,,,,,,,,,,784,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,891,,246',
',43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,894,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,475,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207,,,55,56,,,57,,,',
',,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207',
',,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,',
'54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,923,',
'246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,',
',,,784,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,',
'59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,279,,,95,94,507,53,87,86,508,89,96,97,',
'83,84,,,,283,,,,,,,,,,,,,,,,,,,,509,,,207,,,55,56,,,57,,,,,,,,,,,,,',
',,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,507,53',
'87,86,508,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,509,,,207,,,55,56',
',,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162,183,184',
'178,161,160,155,181,185,186,165,154,168,172,174,166,159,,,175,182,177',
'176,169,179,164,152,171,170,,,,,,151,158,149,150,147,148,112,114,,,113',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,,146',
'81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41',
'42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,',
',,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,',
',,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,',
',,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,-252,-252,-252,,-252,,,,-252,-252,,,,-252,,-252,-252,-252,-252',
'-252,-252,-252,,,,,-252,-252,-252,-252,-252,-252,-252,,,,,,,,,,-252',
',,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,,-252,-252,,-252',
'-252,-252,,,,,,,,,,,,,,,,,,,,-252,,,-252,263,,-252,-252,,,-252,,-252',
',-252,,-252,,,,,,,,-252,,,,,-252,-252,-252,-252,-252,-252,,,,-252,-252',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,315,,,33,,,55,56,,,57,,35,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,-502,-502,-502,,-502,,,,-502,-502,,,,-502,,-502,-502',
'-502,-502,-502,-502,-502,,,,,-502,-502,-502,-502,-502,-502,-502,,,,',
',,,,,-502,,,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,,-502',
'-502,,-502,-502,-502,,,,,,,,,,,,,,,,,,,,-502,,,-502,-502,,-502,-502',
',,-502,,-502,,-502,,-502,,,,,,,,-502,,,,,-502,-502,-502,-502,-502,-502',
',,,-502,-502,-503,-503,-503,,-503,,,,-503,-503,,,,-503,,-503,-503,-503',
'-503,-503,-503,-503,,,,,-503,-503,-503,-503,-503,-503,-503,,,,,,,,,',
'-503,,,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,,-503,-503',
',-503,-503,-503,,,,,,,,,,,,,,,,,,,,-503,,,-503,-503,,-503,-503,,,-503',
',-503,,-503,,-503,,,,,,,,-503,,,,,-503,-503,-503,-503,-503,-503,,,,-503',
'-503,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31',
'30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41',
'42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,',
'54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,10,54,,,,59,60,,',
',63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,566,,246,,43,,,,,,,,210',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,570,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,584',
',246,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,-497,-497,-497,,-497',
',,,-497,-497,,,,-497,,-497,-497,-497,-497,-497,-497,-497,,-497,,,-497',
'-497,-497,-497,-497,-497,-497,,,,,,,,,,-497,,,-497,-497,-497,-497,-497',
'-497,-497,-497,-497,-497,,-497,-497,,-497,-497,-497,,,,,,,,,,,,,,,,',
',,,-497,,,-497,-497,,-497,-497,,,-497,,-497,,-497,,-497,,,,,,,,-497',
',-497,,,-497,-497,-497,-497,-497,-497,,,,-497,-497,-498,-498,-498,,-498',
',,,-498,-498,,,,-498,,-498,-498,-498,-498,-498,-498,-498,,-498,,,-498',
'-498,-498,-498,-498,-498,-498,,,,,,,,,,-498,,,-498,-498,-498,-498,-498',
'-498,-498,-498,-498,-498,,-498,-498,,-498,-498,-498,,,,,,,,,,,,,,,,',
',,,-498,,,-498,-498,,-498,-498,,,-498,,-498,,-498,,-498,,,,,,,,-498',
',-498,,,-498,-498,-498,-498,-498,-498,,,,-498,-498,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,10,54,,,,59,60,,,,63,,61,62,64',
'26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56',
',,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,614',
',,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,373,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',373,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,',
',,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,',
',25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,156,167,157,180,153,173,163,162,183,184,178,161,160,155',
'181,185,186,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164',
'152,171,170,,,,,,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,,,146,81,,,65,66,67,,54',
',,82,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,682,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,700,,701,,,,,,',
',,702,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,',
',,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,566,,246,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,',
'54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,373,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,745,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162,183,184,178',
'161,160,155,181,185,186,165,154,168,172,174,166,159,,,175,182,177,329',
'328,330,327,152,171,170,,,,,,151,158,149,150,325,326,323,114,87,86,324',
'89,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133',
',,,,,335,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,',
'146,156,167,157,180,153,173,163,162,183,184,178,161,160,155,181,185',
'186,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152,171',
'170,,,,,,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,,,146,156,167,157,180,153,173,163',
'162,183,184,178,161,160,155,181,185,186,165,154,168,172,174,166,159',
',,175,182,177,176,169,179,164,152,171,170,,,,,,151,158,149,150,147,148',
'112,114,352,351,113,353,,,,,,,142,143,,140,124,125,126,,129,131,,,127',
',,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130',
'128,121,,122,885,389,146,,886,,,,,,,,142,143,,140,124,125,126,,129,131',
',,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134',
'135,130,128,121,,122,883,383,146,,884,,,,,,,,142,143,,140,124,125,126',
',129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139',
'138,134,135,130,128,121,,122,385,389,146,,387,,,,,,,,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,555,383,146,,556,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,557,389,146,,558,,,,,',
',,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,',
',,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,636,389,146',
',637,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132',
'133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,634',
'383,146,,635,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144',
'145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121',
',122,748,389,146,,749,,,,,,,,142,143,,140,124,125,126,,129,131,,,127',
',,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130',
'128,121,,122,438,383,146,,439,,,,,,,,142,143,,140,124,125,126,,129,131',
',,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134',
'135,130,128,121,,122,,,146,218,222,227,228,229,224,226,234,235,230,231',
',211,212,,,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219',
',220,,,,,,,603,389,,,604,,,,,236,,574,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138',
'134,135,130,128,121,,122,438,383,146,,439,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,,,146,218,222,227,228,229,224,226,234',
'235,230,231,,211,212,,,232,233,,,,-218,,,,,,,,,,,215,,221,,217,216,213',
'214,225,223,219,,220,,,,,,,438,383,,,439,,,,,236,,-218,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136',
',123,141,139,138,134,135,130,128,121,,122,438,383,146,,439,,,,,,,,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,',
',137,136,,123,141,139,138,134,135,130,128,121,,122,555,383,146,,556',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,557,389',
'146,,558,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
'380,383,146,,381,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,438,383,146,,439,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,,,146,218,222,227,228,229,224,226,234,235,230,231,',
'211,212,,,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219',
',220,,218,222,227,228,229,224,226,234,235,230,231,,211,212,236,561,232',
'233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222',
'227,228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,',
',,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224',
'226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217',
'216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230',
'231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225',
'223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236',
'232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218',
'222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,',
',,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229',
'224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221',
',217,216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235',
'230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214',
'225,223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212',
'294,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219',
',220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233',
',,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227',
'228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,',
'215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224,226',
'234,235,230,231,,211,212,294,236,232,233,,,,,,,,,,,,,,,215,,221,,217',
'216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230',
'231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225',
'223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236',
'232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218',
'222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,',
',,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,,,,,,,,,,,,,,,,236' ]
        racc_action_table = arr = ::Array.new(25062, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'387,809,672,672,544,609,609,387,387,387,280,313,405,387,387,513,387',
'505,746,634,637,582,597,328,348,601,868,316,868,346,328,29,306,814,636',
'387,387,926,387,387,387,387,387,307,405,635,544,451,405,405,544,58,28',
'398,451,73,496,744,609,28,597,3,582,73,387,387,387,387,387,387,387,387',
'387,387,387,387,387,387,497,747,387,387,387,637,387,348,348,348,387',
'601,672,387,346,29,280,451,387,636,387,398,387,387,387,387,387,387,387',
'601,387,722,387,12,809,313,809,29,722,809,513,505,746,634,637,387,387',
'385,387,601,387,316,387,601,385,385,385,58,636,513,385,385,600,385,513',
'306,814,306,814,635,306,814,385,404,447,496,307,496,307,722,496,307',
'385,385,13,385,385,385,385,385,744,555,744,14,326,744,556,497,747,497',
'747,326,497,747,531,404,765,765,447,404,404,385,385,385,385,385,385',
'385,385,385,385,385,385,385,385,448,600,385,385,385,339,385,202,341',
'15,385,341,555,385,508,603,380,556,385,600,385,23,385,385,385,385,385',
'385,385,337,385,385,385,343,448,327,649,649,204,600,531,531,327,600',
'580,385,385,53,385,531,385,381,385,202,53,53,53,874,380,53,53,53,380',
'53,508,603,339,339,339,341,341,508,603,53,53,428,508,603,580,696,508',
'603,53,53,204,53,53,53,53,53,337,337,337,381,343,343,343,381,508,603',
'329,323,37,874,874,874,874,329,323,428,39,53,53,53,53,53,53,53,53,53',
'53,53,53,53,53,696,324,53,53,53,884,487,53,324,487,53,883,325,53,53',
'44,53,762,53,325,53,65,53,53,53,53,53,53,53,332,53,748,53,908,330,509',
'332,507,653,509,908,330,79,653,437,53,53,53,53,908,53,437,437,437,885',
'884,437,437,437,17,437,883,884,762,762,762,762,884,883,310,437,884,38',
'883,310,299,80,883,299,437,437,748,437,437,437,437,437,507,748,884,311',
'286,311,748,507,883,187,748,189,507,203,17,205,507,885,17,277,417,18',
'18,206,885,5,277,38,748,885,5,38,437,885,507,277,417,417,111,437,305',
'305,111,111,437,437,286,242,755,243,286,885,417,755,417,824,417,417',
'417,417,824,247,417,256,417,275,652,437,652,652,652,652,275,648,259',
'558,558,558,648,558,437,275,437,558,558,437,300,267,558,300,558,558',
'558,558,558,558,558,490,897,897,490,558,558,558,558,558,558,558,296',
'296,621,621,652,652,652,652,269,558,40,40,558,558,558,558,558,558,558',
'558,558,558,270,558,558,271,558,558,558,421,421,421,421,421,421,421',
'276,846,421,421,274,283,283,782,846,421,421,274,558,558,782,558,558',
'846,558,558,274,278,558,782,558,421,558,421,558,421,421,421,421,421',
'421,421,558,421,279,282,440,558,558,558,558,558,558,440,440,440,558',
'558,440,440,440,604,440,412,287,558,288,783,604,291,298,302,440,604',
'783,312,315,604,317,412,412,440,440,783,440,440,440,440,440,342,345',
'785,367,463,463,412,289,463,785,412,412,412,412,289,372,463,463,785',
'463,463,463,463,289,463,463,375,379,463,386,465,201,440,463,463,463',
'463,465,201,440,406,407,408,409,440,440,465,201,434,449,463,463,450',
'463,463,463,463,463,463,463,463,463,886,463,452,640,463,440,453,886',
'454,456,640,457,886,557,557,557,886,557,440,640,440,557,557,440,461',
'466,557,476,557,557,557,557,557,557,557,477,478,488,492,557,557,557',
'557,557,557,557,498,499,673,673,423,673,673,673,535,557,539,547,557',
'557,557,557,557,557,557,557,557,557,552,557,557,559,557,557,557,419',
'419,419,419,419,419,419,423,724,419,419,423,423,423,423,724,419,419',
'567,557,557,569,557,557,724,557,557,572,574,557,583,557,419,557,419',
'557,419,419,419,419,419,419,419,557,419,586,591,592,557,557,557,557',
'557,557,599,16,602,557,557,63,63,63,16,63,605,607,557,63,63,608,610',
'16,63,613,63,63,63,63,63,63,63,623,629,631,633,63,63,63,63,63,63,63',
'654,655,63,656,662,667,670,370,681,63,699,703,63,63,63,63,63,63,63,63',
'63,63,705,63,63,708,63,63,63,370,370,370,370,370,370,370,370,370,370',
'370,749,370,370,511,713,370,370,749,63,715,511,63,749,720,63,63,749',
'721,63,511,723,370,726,370,63,370,370,370,370,370,370,370,63,370,729',
'730,314,63,63,63,63,63,63,314,735,738,63,63,63,370,743,370,314,63,100',
'100,100,100,100,751,756,45,100,100,757,758,770,100,45,100,100,100,100',
'100,100,100,776,45,784,786,100,100,100,100,100,100,100,787,790,100,795',
'424,798,802,803,100,100,100,100,100,100,100,100,100,100,100,100,100',
'100,804,100,100,816,100,100,100,425,425,425,425,425,425,425,424,817',
'425,425,424,424,424,424,823,425,425,828,100,829,830,100,833,834,100',
'100,847,851,100,854,100,425,857,425,100,425,425,425,425,425,425,425',
'100,425,880,881,882,100,100,100,100,100,100,892,896,902,100,100,700',
'700,700,903,700,100,904,905,700,700,906,910,913,700,1,700,700,700,700',
'700,700,700,,,,,700,700,700,700,700,700,700,109,109,109,109,109,,,,',
'700,,,700,700,700,700,700,700,700,700,700,700,,700,700,,,516,700,516',
'516,516,516,354,354,354,354,354,7,7,7,7,7,,,,,,700,,,700,,,700,700,',
',700,,,,,,837,516,837,837,837,837,,,,516,516,516,516,700,700,700,700',
'700,700,,,,700,700,842,842,842,700,842,,,,842,842,,,,842,837,842,842',
'842,842,842,842,842,837,837,837,837,842,842,842,842,842,842,842,,,,',
',,,560,,842,,,842,842,842,842,842,842,842,842,842,842,,842,842,,,,842',
'560,560,560,560,560,560,560,560,560,560,560,,560,560,,,560,560,,842',
',,842,,,842,842,,,842,,,560,,560,,560,560,560,560,560,560,560,,560,',
',,842,842,842,842,842,842,,,,842,842,,560,,842,872,872,872,872,872,872',
',,,872,872,,,,872,,872,872,872,872,872,872,872,,,,,872,872,872,872,872',
'872,872,,,872,,,,,,872,872,872,872,872,872,872,872,872,872,872,872,872',
'872,,872,872,,872,872,872,,,,,,,,,,,,,,,,,,,,872,,,872,,,872,872,,,872',
',872,,,,872,760,,760,760,760,760,,872,,,,,872,872,872,872,872,872,,',
',872,872,869,869,869,869,869,869,,,,869,869,,,,869,,869,869,869,869',
'869,869,869,760,760,760,760,869,869,869,869,869,869,869,,,869,,,,,,869',
'869,869,869,869,869,869,869,869,869,869,869,869,869,,869,869,,869,869',
'869,402,402,402,402,402,402,402,402,402,402,402,,402,402,,,402,402,',
'869,,,869,,,869,869,,,869,,869,402,,402,869,402,402,402,402,402,402',
'402,869,402,,,,869,869,869,869,869,869,,,,869,869,190,190,190,190,190',
'190,,,,190,190,,,,190,,190,190,190,190,190,190,190,,,,,190,190,190,190',
'190,190,190,,,190,,,,,,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,,190,190,,190,190,190,416,,,,,,,,,,,,,,,,416,416,,190,,,190',
',,190,190,,,190,,190,416,,416,190,416,416,416,416,,,416,190,416,,,,190',
'190,190,190,190,190,,,,190,190,864,864,864,864,864,864,,,,864,864,,',
',864,,864,864,864,864,864,864,864,,,,,864,864,864,864,864,864,864,,',
'864,,,,,,864,864,864,864,864,864,864,864,864,864,864,864,864,864,,864',
'864,,864,864,864,403,403,403,403,403,403,403,403,403,403,403,,403,403',
',,403,403,,864,,,864,,,864,864,,,864,,864,403,,403,864,403,403,403,403',
'403,403,403,864,403,,,,864,864,864,864,864,864,,,,864,864,862,862,862',
'862,862,862,,,,862,862,,,,862,,862,862,862,862,862,862,862,,,,,862,862',
'862,862,862,862,862,,,862,,,,,,862,862,862,862,862,862,862,862,862,862',
'862,862,862,862,,862,862,,862,862,862,413,413,413,413,413,413,413,,',
'413,413,,,,,,413,413,,862,,,862,,,862,862,,,862,,862,413,,413,862,413',
'413,413,413,413,413,413,862,413,,,,862,862,862,862,862,862,,,,862,862',
'2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2',
'2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2,2,418,418,418,418,418,418,418,,',
'418,418,,,,,,418,418,,2,,,2,,,2,2,,,2,,2,418,,418,2,418,418,418,418',
'418,418,418,2,418,,,,2,2,2,2,2,2,,,,2,2,716,716,716,716,716,716,,,,716',
'716,,,,716,,716,716,716,716,716,716,716,,,,,716,716,716,716,716,716',
'716,,,716,,,,,,716,716,716,716,716,716,716,716,716,716,716,716,716,716',
',716,716,,716,716,716,414,,,,,,,,,,,,,,,,414,414,,716,,,716,,,716,716',
',,716,,716,414,,414,716,414,414,414,414,,,414,716,414,,,,716,716,716',
'716,716,716,,,,716,716,717,717,717,717,717,717,,,,717,717,,,,717,,717',
'717,717,717,717,717,717,,,,,717,717,717,717,717,717,717,,,717,,,,,,717',
'717,717,717,717,717,717,717,717,717,717,717,717,717,,717,717,,717,717',
'717,415,,,,,,,,,,,,,,,,415,415,,717,,,717,,,717,717,,,717,,717,415,',
'415,717,415,415,415,415,,,415,717,415,,,,717,717,717,717,717,717,,,',
'717,717,819,819,819,819,819,819,,,,819,819,,,,819,,819,819,819,819,819',
'819,819,,,,,819,819,819,819,819,819,819,,,819,,,,,,819,819,819,819,819',
'819,819,819,819,819,819,819,819,819,,819,819,,819,819,819,420,420,420',
'420,420,420,420,,,420,420,,,,,,420,420,,819,,,819,,,819,819,,,819,,819',
'420,,420,819,420,420,420,420,420,420,420,819,420,,,,819,819,819,819',
'819,819,,,,819,819,491,491,491,491,491,491,,,,491,491,,,,491,,491,491',
'491,491,491,491,491,,,,,491,491,491,491,491,491,491,,,491,,,,,,491,491',
'491,491,491,491,491,491,491,491,491,491,491,491,,491,491,,491,491,491',
'422,422,422,422,422,422,422,,,422,422,,,,,,422,422,,491,,,491,,,491',
'491,,,491,,491,422,,422,491,422,422,422,422,422,422,422,491,422,,,,491',
'491,491,491,491,491,,,,491,491,650,650,650,650,650,650,,,,650,650,,',
',650,,650,650,650,650,650,650,650,,,,,650,650,650,650,650,650,650,,',
'650,,,,,,650,650,650,650,650,650,650,650,650,650,650,650,650,650,,650',
'650,,650,650,650,426,426,426,426,426,426,426,426,,426,426,,,,,,426,426',
',650,,,650,,,650,650,,,650,,650,426,,426,650,426,426,426,426,426,426',
'426,650,426,,,,650,650,650,650,650,650,,,,650,650,806,806,806,806,806',
'806,,,,806,806,,,,806,,806,806,806,806,806,806,806,,,,,806,806,806,806',
'806,806,806,,,806,,,,,,806,806,806,806,806,806,806,806,806,806,806,806',
'806,806,,806,806,,806,806,806,411,,,,,,,,,,,,,,,,411,411,,806,,,806',
',,806,806,,,806,,806,411,,411,806,411,411,411,411,,,,806,,,,,806,806',
'806,806,806,806,,,,806,806,273,273,273,273,273,273,,,,273,273,,,,273',
',273,273,273,273,273,273,273,,,,,273,273,273,273,273,273,273,,,273,',
',,,,273,273,273,273,273,273,273,273,273,273,273,273,273,273,,273,273',
',273,273,273,410,,,,,,,,,,,,,,,,410,410,,273,,,273,,,273,273,,,273,',
'273,410,,410,273,410,410,410,410,,,,273,,,,,273,273,273,273,273,273',
',,,273,273,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,',
',,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33,33',
'33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,',
',,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,794,794,794,794,794,794',
',,,794,794,,,,794,,794,794,794,794,794,794,794,,,,,794,794,794,794,794',
'794,794,,,794,,,,,,794,794,794,794,794,794,794,794,794,794,794,794,794',
'794,,794,794,,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,,794',
',794,,,,794,,,,,,,,794,,,,,794,794,794,794,794,794,,,,794,794,268,268',
'268,268,268,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,268,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268,',
',,268,268,728,728,728,728,728,728,,,,728,728,,,,728,,728,728,728,728',
'728,728,728,,,,,728,728,728,728,728,728,728,,,728,,,,,,728,728,728,728',
'728,728,728,728,728,728,728,728,728,728,,728,728,,728,728,728,,,,,,',
',,,,,,,,,,,,,728,,,728,,,728,728,,,728,,728,,,,728,,,,,,,,728,,,,,728',
'728,728,728,728,728,,,,728,728,207,207,207,207,207,207,,,,207,207,,',
',207,,207,207,207,207,207,207,207,,,,,207,207,207,207,207,207,207,,',
'207,,,,,,207,207,207,207,207,207,207,207,207,207,207,207,207,207,,207',
'207,,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,207,',
',,207,,,,,,,,207,,,,,207,207,207,207,207,207,,,,207,207,704,704,704',
'704,704,704,,,,704,704,,,,704,,704,704,704,704,704,704,704,,,,,704,704',
'704,704,704,704,704,,,704,,,,,,704,704,704,704,704,704,704,704,704,704',
'704,704,704,704,,704,704,,704,704,704,,,,,,,,,,,,,,,,,,,,704,,,704,',
',704,704,,,704,,704,,,,704,,,,,,,,704,,,,,704,704,704,704,704,704,,',
',704,704,500,500,500,500,500,500,,,,500,500,,,,500,,500,500,500,500',
'500,500,500,,,,,500,500,500,500,500,500,500,,,500,,,,,,500,500,500,500',
'500,500,500,500,500,500,500,500,500,500,,500,500,,500,500,500,,,,,,',
',,,,,,,,,,,,,500,,,500,,,500,500,,,500,,500,,,,500,,,,,,,,500,,,,,500',
'500,500,500,500,500,,,,500,500,739,739,739,739,739,739,,,,739,739,,',
',739,,739,739,739,739,739,739,739,,,,,739,739,739,739,739,739,739,,',
'739,,,,,,739,739,739,739,739,739,739,739,739,739,739,739,739,739,,739',
'739,,739,739,739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739,739,,,739,,739,',
',,739,,,,,,,,739,,,,,739,739,739,739,739,739,,,,739,739,740,740,740',
'740,740,740,,,,740,740,,,,740,,740,740,740,740,740,740,740,,,,,740,740',
'740,740,740,740,740,,,740,,,,,,740,740,740,740,740,740,740,740,740,740',
'740,740,740,740,,740,740,,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,',
',740,740,,,740,,740,,,,740,,,,,,,,740,,,,,740,740,740,740,740,740,,',
',740,740,495,495,495,495,495,495,,,,495,495,,,,495,,495,495,495,495',
'495,495,495,,,,,495,495,495,495,495,495,495,,,495,,,,,,495,495,495,495',
'495,495,495,495,495,495,495,495,495,495,,495,495,,495,495,495,,,,,,',
',,,,,,,,,,,,,495,,,495,,,495,495,,,495,,495,,,,495,,,,,,,,495,,,,,495',
'495,495,495,495,495,,,,495,495,674,674,674,674,674,674,,,,674,674,,',
',674,,674,674,674,674,674,674,674,,,,,674,674,674,674,674,674,674,,',
'674,,,,,,674,674,674,674,674,674,674,674,674,674,674,674,674,674,,674',
'674,,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,674,',
',,674,,,,,,,,674,,,,,674,674,674,674,674,674,,,,674,674,366,366,366',
'366,366,366,,,,366,366,,,,366,,366,366,366,366,366,366,366,,,,,366,366',
'366,366,366,366,366,,,366,,,,,,366,366,366,366,366,366,366,366,366,366',
'366,366,366,366,,366,366,,366,366,366,,,,,,,,,,,,,,,,,,,,366,,,366,',
',366,366,,,366,,366,,,,366,,,,,,,,366,,,,,366,366,366,366,366,366,,',
',366,366,295,295,295,295,295,295,,,,295,295,,,,295,,295,295,295,295',
'295,295,295,,,,,295,295,295,295,295,295,295,,,295,,,,,,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,,295,295,,295,295,295,,,,,,',
',,,,,,,,,,,,,295,,,295,,,295,295,,,295,,295,,,,295,,,,,,,,295,,,,,295',
'295,295,295,295,295,,,,295,295,752,752,752,752,752,752,,,,752,752,,',
',752,,752,752,752,752,752,752,752,,,,,752,752,752,752,752,752,752,,',
'752,,,,,,752,752,752,752,752,752,752,752,752,752,752,752,752,752,,752',
'752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,,752,',
',,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752,651,651,651',
'651,651,651,,,,651,651,,,,651,,651,651,651,651,651,651,651,,,,,651,651',
'651,651,651,651,651,,,651,,,,,,651,651,651,651,651,651,651,651,651,651',
'651,651,651,651,,651,651,,651,651,651,,,,,,,,,,,,,,,,,,,,651,,,651,',
',651,651,,,651,,651,,,,651,,,,,,,,651,,,,,651,651,651,651,651,651,,',
',651,651,878,878,878,878,878,878,,,,878,878,,,,878,,878,878,878,878',
'878,878,878,,,,,878,878,878,878,878,878,878,,,878,,,,,,878,878,878,878',
'878,878,878,878,878,878,878,878,878,878,,878,878,,878,878,878,,,,,,',
',,,,,,,,,,,,,878,,,878,,,878,878,,,878,,878,,,,878,,,,,,,,878,,,,,878',
'878,878,878,878,878,,,,878,878,222,222,222,,222,,,,222,222,,,,222,,222',
'222,222,222,222,222,222,,,,,222,222,222,222,222,222,222,,,,,,,,,,222',
',,222,222,222,222,222,222,222,222,222,222,,222,222,,222,222,222,,,,',
',,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222',
'222,222,222,222,222,,,,222,222,223,223,223,,223,,,,223,223,,,,223,,223',
'223,223,223,223,223,223,,,,,223,223,223,223,223,223,223,,,,,,,,,,223',
',,223,223,223,223,223,223,223,223,223,223,,223,223,,223,223,223,,,,',
',,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,223,,,,,223',
'223,223,223,223,223,,,,223,223,224,224,224,,224,,,,224,224,,,,224,,224',
'224,224,224,224,224,224,,,,,224,224,224,224,224,224,224,,,,,,,,,,224',
',,224,224,224,224,224,224,224,224,224,224,,224,224,,224,224,224,,,,',
',,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224',
'224,224,224,224,224,,,,224,224,225,225,225,,225,,,,225,225,,,,225,,225',
'225,225,225,225,225,225,,,,,225,225,225,225,225,225,225,,,,,,,,,,225',
',,225,225,225,225,225,225,225,225,225,225,,225,225,,225,225,225,,,,',
',,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225',
'225,225,225,225,225,,,,225,225,226,226,226,,226,,,,226,226,,,,226,,226',
'226,226,226,226,226,226,,,,,226,226,226,226,226,226,226,,,,,,,,,,226',
',,226,226,226,226,226,226,226,226,226,226,,226,226,,226,226,226,,,,',
',,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226',
'226,226,226,226,226,,,,226,226,682,682,682,,682,,,,682,682,,,,682,,682',
'682,682,682,682,682,682,,,,,682,682,682,682,682,682,682,,,,,,,,,,682',
',,682,682,682,682,682,682,682,682,682,682,,682,682,,682,682,682,,,,',
',,,,,,,,,,,,,,,682,,,682,,,682,682,,,682,,,,,,682,,,,,,,,682,,,,,682',
'682,682,682,682,682,,,,682,682,683,683,683,,683,,,,683,683,,,,683,,683',
'683,683,683,683,683,683,,,,,683,683,683,683,683,683,683,,,,,,,,,,683',
',,683,683,683,683,683,683,683,683,683,683,,683,683,,683,683,683,,,,',
',,,,,,,,,,,,,,,683,,,683,,,683,683,,,683,,,,,,683,,,,,,,,683,,,,,683',
'683,683,683,683,683,,,,683,683,693,693,693,,693,,,,693,693,,,,693,,693',
'693,693,693,693,693,693,,,,,693,693,693,693,693,693,693,,,,,,,,,,693',
',,693,693,693,693,693,693,693,693,693,693,,693,693,,693,693,693,,,,',
',,,,,,,,,,,,,,,693,,,693,,,693,693,,,693,,,,,,693,,,,,,,,693,,,,,693',
'693,693,693,693,693,,,,693,693,694,694,694,,694,,,,694,694,,,,694,,694',
'694,694,694,694,694,694,,,,,694,694,694,694,694,694,694,,,,,,,,,,694',
',,694,694,694,694,694,694,694,694,694,694,,694,694,,694,694,694,,,,',
',,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,,,,,694,,,,,,,,694,,,,,694',
'694,694,694,694,694,,,,694,694,695,695,695,,695,,,,695,695,,,,695,,695',
'695,695,695,695,695,695,,,,,695,695,695,695,695,695,695,,,,,,,,,,695',
',,695,695,695,695,695,695,695,695,695,695,,695,695,,695,695,695,,,,',
',,,,,,,,,,,,,,,695,,,695,,,695,695,,,695,,,,,,695,,,,,,,,695,,,,,695',
'695,695,695,695,695,,,,695,695,227,227,227,,227,,,,227,227,,,,227,,227',
'227,227,227,227,227,227,,,,,227,227,227,227,227,227,227,,,,,,,,,,227',
',,227,227,227,227,227,227,227,227,227,227,,227,227,,227,227,227,,,,',
',,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227',
'227,227,227,227,227,,,,227,227,701,701,701,,701,,,,701,701,,,,701,,701',
'701,701,701,701,701,701,,,,,701,701,701,701,701,701,701,,,,,,,,,,701',
',,701,701,701,701,701,701,701,701,701,701,,701,701,,,,701,,,,,,,,,,',
',,,,,,,,,701,,,701,,,701,701,,,701,,,,,,,,,,,,,,,,,,,701,701,701,701',
'701,701,,,,701,701,228,228,228,,228,,,,228,228,,,,228,,228,228,228,228',
'228,228,228,,,,,228,228,228,228,228,228,228,,,,,,,,,,228,,,228,228,228',
'228,228,228,228,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,',
',228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228',
'228,,,,228,228,229,229,229,,229,,,,229,229,,,,229,,229,229,229,229,229',
'229,229,,,,,229,229,229,229,229,229,229,,,,,,,,,,229,,,229,229,229,229',
'229,229,229,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229',
',,,229,229,707,707,707,,707,,,,707,707,,,,707,,707,707,707,707,707,707',
'707,,,,,707,707,707,707,707,707,707,,,,,,,,,,707,,,707,707,707,707,707',
'707,707,707,707,707,,707,707,,707,707,707,,,,,,,,,,,,,,,,,,,,707,,,707',
',,707,707,,,707,,707,,707,,707,,,,,,,,707,,,,,707,707,707,707,707,707',
',,,707,707,230,230,230,,230,,,,230,230,,,,230,,230,230,230,230,230,230',
'230,,,,,230,230,230,230,230,230,230,,,,,,,,,,230,,,230,230,230,230,230',
'230,230,230,230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230',
',,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230',
'230,710,710,710,,710,,,,710,710,,,,710,,710,710,710,710,710,710,710',
',,,,710,710,710,710,710,710,710,,,,,,,,,,710,,,710,710,710,710,710,710',
'710,710,710,710,,710,710,,710,710,710,,,,,,,,,,,,,,,,,,,,710,,,710,',
',710,710,,,710,,710,,710,,710,,,,,,,,710,,,,,710,710,710,710,710,710',
',,,710,710,712,712,712,,712,,,,712,712,,,,712,,712,712,712,712,712,712',
'712,,,,,712,712,712,712,712,712,712,,,,,,,,,,712,,,712,712,712,712,712',
'712,712,712,712,712,,712,712,,712,712,712,,,,,,,,,,,,,,,,,,,,712,,,712',
',,712,712,,,712,,712,,712,,712,,,,,,,,712,,,,,712,712,712,712,712,712',
',,,712,712,231,231,231,,231,,,,231,231,,,,231,,231,231,231,231,231,231',
'231,,,,,231,231,231,231,231,231,231,,,,,,,,,,231,,,231,231,231,231,231',
'231,231,231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231',
',,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231',
'231,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,232,232,232,232,232,232,232,,,,,,,,,,232,,,232,232,232,232,232,232',
'232,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,',
',232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232',
'232,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233',
',,,,233,233,233,233,233,233,233,,,,,,,,,,233,,,233,233,233,233,233,233',
'233,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,',
',233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233',
'233,234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,234,234,234,234,234,234,234,,,,,,,,,,234,,,234,234,234,234,234,234',
'234,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,',
',234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234',
'234,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,235,235,235,235,235,235,235,,,,,,,,,,235,,,235,235,235,235,235,235',
'235,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,',
',235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235',
'235,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236',
',,,,236,236,236,236,236,236,236,,,,,,,,,,236,,,236,236,236,236,236,236',
'236,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,',
',236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236',
'236,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,9,9,9,9,9',
'9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,9,,,,,,,,9,9,,9,9,9,9,,9,9,,,9,,,,,9,9',
'9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,,9,,,9,9,,,25,25,25,,25,,,9',
'25,25,,,,25,,25,25,25,25,25,25,25,,,,,25,25,25,25,25,25,25,,,,,,,,,',
'25,,,25,25,25,25,25,25,25,25,25,25,,25,25,,25,25,25,,,,,,,,,,,,,,,,',
',,,25,,,25,,,25,25,,,25,,25,,25,,25,,,,,,,,25,,,,,25,25,25,25,25,25',
',,,25,25,737,737,737,,737,,,,737,737,,,,737,,737,737,737,737,737,737',
'737,,,,,737,737,737,737,737,737,737,,,737,,,,,,,737,,,737,737,737,737',
'737,737,737,737,737,737,,737,737,,737,737,737,,,,,,,,,,,,,,,,,,,,737',
',,737,,,737,737,,,737,,,,,,737,,,,,,,,737,,,,,737,737,737,737,737,737',
',,,737,737,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244',
'244,,,,,244,244,244,244,244,244,244,,,,,,,,,,244,,,244,244,244,244,244',
'244,244,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244',
',,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244',
'244,246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246,246',
',,,,246,246,246,246,246,246,246,,,,,,,,,,246,,,246,246,246,246,246,246',
'246,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,',
',246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246',
'246,745,745,745,,745,,,,745,745,,,,745,,745,745,745,745,745,745,745',
',,,,745,745,745,745,745,745,745,,,,,,,,,,745,,,745,745,745,745,745,745',
'745,745,745,745,,745,745,,745,745,745,,,,,,,,,,,,,,,,,,,,745,,,745,',
',745,745,,,745,,,,,,745,,,,,,,,745,,,,,745,745,745,745,745,745,,,,745',
'745,26,26,26,,26,,,,26,26,,,,26,,26,26,26,26,26,26,26,,,,,26,26,26,26',
'26,26,26,,,,,,,,,,26,,,26,26,26,26,26,26,26,26,26,26,,26,26,,26,26,26',
',,,,,,,,,,,,,,,,,,,26,,,26,,,26,26,,,26,,26,,26,,26,,,,,,,,26,,,,,26',
'26,26,26,26,26,,,,26,26,753,753,753,,753,,,,753,753,,,,753,,753,753',
'753,753,753,753,753,,,,,753,753,753,753,753,753,753,,,753,,,,,,,753',
',,753,753,753,753,753,753,753,753,753,753,,753,753,,753,753,753,,,,',
',,,,,,,,,,,,,,,753,,,753,,,753,753,,,753,,,,,,753,,,,,,,,753,,,,,753',
'753,753,753,753,753,,,,753,753,27,27,27,,27,,,,27,27,,,,27,,27,27,27',
'27,27,27,27,,,,,27,27,27,27,27,27,27,,,,,,,,,,27,,,27,27,27,27,27,27',
'27,27,27,27,,27,27,,27,27,27,,,,,,,,,,,,,,,,,,,,27,,,27,,,27,27,,,27',
',27,,27,,27,,,,,,,,27,,,,,27,27,27,27,27,27,,,,27,27,766,766,766,,766',
',,,766,766,,,,766,,766,766,766,766,766,766,766,,,,,766,766,766,766,766',
'766,766,,,,,,,,,,766,,,766,766,766,766,766,766,766,766,766,766,,766',
'766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766,,,766,766,,,766,,,,,,766',
',,,,,,,766,,,,,766,766,766,766,766,766,,,,766,766,257,257,257,,257,',
',,257,257,,,,257,,257,257,257,257,257,257,257,,,,,257,257,257,257,257',
'257,257,,,,,,,,,,257,,,257,257,257,257,257,257,257,257,257,257,,257',
'257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,257,',
'257,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,780,780,780',
',780,,,,780,780,,,,780,,780,780,780,780,780,780,780,,,,,780,780,780',
'780,780,780,780,,,,,,,,,,780,,,780,780,780,780,780,780,780,780,780,780',
',780,780,,780,780,780,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,780,,,780,',
',,,,780,,,,,,,,780,,,,,780,780,780,780,780,780,,,,780,780,781,781,781',
',781,,,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,781,781,781',
'781,781,781,781,,,,,,,,,,781,,,781,781,781,781,781,781,781,781,781,781',
',781,781,,,,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781,,,781,,781,,781',
',,,,,,,,,,,,,,781,781,781,781,781,781,,,,781,781,263,263,263,,263,,',
',263,263,,,,263,,263,263,263,263,263,263,263,,,,,263,263,263,263,263',
'263,263,,,,,,,,,,263,,,263,263,263,263,263,263,263,263,263,263,,263',
'263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,263,',
'263,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,266,266,266',
',266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,266,266,266',
'266,266,266,266,,,,,,,,,,266,,,266,266,266,266,266,266,266,266,266,266',
',266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,266,266,266,,,266',
',266,,266,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,792',
'792,792,,792,,,,792,792,,,,792,,792,792,792,792,792,792,792,,,,,792',
'792,792,792,792,792,792,,,,,,,,,,792,,,792,792,792,792,792,792,792,792',
'792,792,,792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792',
',,792,,,,,,792,,,,,,,,792,,,,,792,792,792,792,792,792,,,,792,792,30',
'30,30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,30,30,30,30,30,30',
'30,,,,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,,,,',
',,,,,,,,,,,,,,,30,,,30,30,,30,30,,,30,,30,,30,,30,,,,,,,,30,,,,,30,30',
'30,30,30,30,,,,30,30,797,797,797,,797,,,,797,797,,,,797,,797,797,797',
'797,797,797,797,,,,,797,797,797,797,797,797,797,,,,,,,,,,797,,,797,797',
'797,797,797,797,797,797,797,797,,797,797,,797,797,797,,,,,,,,,,,,,,',
',,,,,797,,,797,,,797,797,,,797,,,,,,797,,,,,,,,797,,,,,797,797,797,797',
'797,797,,,,797,797,31,31,31,,31,,,,31,31,,,,31,,31,31,31,31,31,31,31',
',,,,31,31,31,31,31,31,31,,,,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31',
',31,31,,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,31,,31,31,,,31,,31,,31,',
'31,,,,,,,,31,,,,,31,31,31,31,31,31,,,,31,31,799,799,799,,799,,,,799',
'799,,,,799,,799,799,799,799,799,799,799,,,,,799,799,799,799,799,799',
'799,,,,,,,,,,799,,,799,799,799,799,799,799,799,799,799,799,,799,799',
',799,799,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,,,799,,,,,,799,',
',,,,,,799,,,,,799,799,799,799,799,799,,,,799,799,272,272,272,,272,,',
',272,272,,,,272,,272,272,272,272,272,272,272,,,,,272,272,272,272,272',
'272,272,,,,,,,,,,272,,,272,272,272,272,272,272,272,272,272,272,,272',
'272,,,,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272,,,,,,,,,,,,',
',,,,,,272,272,272,272,272,272,,,,272,272,810,810,810,,810,,,,810,810',
',,,810,,810,810,810,810,810,810,810,,,,,810,810,810,810,810,810,810',
',,,,,,,,,810,,,810,810,810,810,810,810,810,810,810,810,,810,810,,,,810',
',,,,,,,,,,,,,,,,,,,810,,,810,,,810,810,,,810,,,,,,,,,,,,,,,,,,,810,810',
'810,810,810,810,,,,810,810,818,818,818,,818,,,,818,818,,,,818,,818,818',
'818,818,818,818,818,,,,,818,818,818,818,818,818,818,,,,,,,,,,818,,,818',
'818,818,818,818,818,818,818,818,818,,818,818,,818,818,818,,,,,,,,,,',
',,,,,,,,,818,,,818,,,818,818,,,818,,818,,,,818,,,,,,,,818,,,,,818,818',
'818,818,818,818,,,,818,818,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34',
'34,34,34,,,,,34,34,34,34,34,34,34,,,,,,,,,,34,,,34,34,34,34,34,34,34',
'34,34,34,,34,34,,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,',
',,,,,,,,,,,,,,34,34,34,34,34,34,,,,34,34,35,35,35,,35,,,,35,35,,,,35',
',35,35,35,35,35,35,35,,,,,35,35,35,35,35,35,35,,,,,,,,,,35,,,35,35,35',
'35,35,35,35,35,35,35,,35,35,,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35',
',,35,,,,,,,,,,,,,,,,,,,35,35,35,35,35,35,,,,35,35,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,,,10,10,10,10',
'10,10,10,10,10,10,,,,,,10,10,10,10,10,10,10,10,,,10,,,,,,,,10,10,,10',
'10,10,10,,10,10,,,10,,,,,10,10,10,10,,,,,,,,,,,,,,10,10,,10,10,10,10',
'10,10,10,10,10,,10,,,10,10,,,841,841,841,,841,,,10,841,841,,,,841,,841',
'841,841,841,841,841,841,,,,,841,841,841,841,841,841,841,,,,,,,,,,841',
',,841,841,841,841,841,841,841,841,841,841,,841,841,,,,841,,,,,,,,,,',
',,,,,,,,,841,,,841,,,841,841,,,841,,,,,,,,,,,,,,,,,,,841,841,841,841',
'841,841,,,,841,841,843,843,843,,843,,,,843,843,,,,843,,843,843,843,843',
'843,843,843,,,,,843,843,843,843,843,843,843,,,,,,,,,,843,,,843,843,843',
'843,843,843,843,843,843,843,,843,843,,843,843,843,,,,,,,,,,,,,,,,,,',
',843,,,843,,,843,843,,,843,,843,,,,843,,,,,,,,843,,,,,843,843,843,843',
'843,843,,,,843,843,848,848,848,,848,,,,848,848,,,,848,,848,848,848,848',
'848,848,848,,,,,848,848,848,848,848,848,848,,,,,,,,,,848,,,848,848,848',
'848,848,848,848,848,848,848,,848,848,,,,848,,,,,,,,,,,,,,,,,,,,848,',
',848,,,848,848,,,848,,,,,,,,,,,,,,,,,,,848,848,848,848,848,848,,,,848',
'848,853,853,853,,853,,,,853,853,,,,853,,853,853,853,853,853,853,853',
',,,,853,853,853,853,853,853,853,,,,,,,,,,853,,,853,853,853,853,853,853',
'853,853,853,853,,853,853,,853,853,853,,,,,,,,,,,,,,,,,,,,853,,,853,',
',853,853,,,853,,853,,853,,853,,,,,,,,853,,,,,853,853,853,853,853,853',
',,,853,853,856,856,856,,856,,,,856,856,,,,856,,856,856,856,856,856,856',
'856,,,,,856,856,856,856,856,856,856,,,,,,,,,,856,,,856,856,856,856,856',
'856,856,856,856,856,,856,856,,856,856,856,,,,,,,,,,,,,,,,,,,,856,,,856',
',,856,856,,,856,,856,,856,,856,,,,,,,,856,,,,,856,856,856,856,856,856',
',,,856,856,867,867,867,,867,,,,867,867,,,,867,,867,867,867,867,867,867',
'867,,,,,867,867,867,867,867,867,867,,,,,,,,,,867,,,867,867,867,867,867',
'867,867,867,867,867,,867,867,,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867',
',,867,867,,,867,,,,,,867,,,,,,,,867,,,,,867,867,867,867,867,867,,,,867',
'867,41,41,41,,41,,,,41,41,,,,41,,41,41,41,41,41,41,41,,,,,41,41,41,41',
'41,41,41,,,,,,,,,,41,,,41,41,41,41,41,41,41,41,41,41,,41,41,,41,41,41',
',,,,,,,,,,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,41,,,,,41,41',
'41,41,41,41,,,,41,41,293,293,293,,293,,,,293,293,,,,293,,293,293,293',
'293,293,293,293,,,,,293,293,293,293,293,293,293,,,,,,,,,,293,,,293,293',
'293,293,293,293,293,293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,',
',,,,,293,,,293,293,,293,293,,,293,,,,,,293,,,,,,,,293,,,,,293,293,293',
'293,293,293,,,,293,293,887,887,887,,887,,,,887,887,,,,887,,887,887,887',
'887,887,887,887,,,,,887,887,887,887,887,887,887,,,,,,,,,,887,,,887,887',
'887,887,887,887,887,887,887,887,,887,887,,,,887,,,,,,,,,,,,,,,,,,,,887',
',,887,,,887,887,,,887,,,,,,,,,,,,,,,,,,,887,887,887,887,887,887,,,,887',
'887,891,891,891,,891,,,,891,891,,,,891,,891,891,891,891,891,891,891',
',,,,891,891,891,891,891,891,891,,,,,,,,,,891,,,891,891,891,891,891,891',
'891,891,891,891,,891,891,,891,891,891,,,,,,,,,,,,,,,,,,,,891,,,891,',
',891,891,,,891,,,,,,891,,,,,,,,891,,,,,891,891,891,891,891,891,,,,891',
'891,894,894,894,,894,,,,894,894,,,,894,,894,894,894,894,894,894,894',
',,,,894,894,894,894,894,894,894,,,,,,,,,,894,,,894,894,894,894,894,894',
'894,894,894,894,,894,894,,894,894,894,,,,,,,,,,,,,,,,,,,,894,,,894,',
',894,894,,,894,,,,,,894,,,,,,,,894,,,,,894,894,894,894,894,894,,,,894',
'894,42,42,42,,42,,,,42,42,,,,42,,42,42,42,42,42,42,42,,,,,42,42,42,42',
'42,42,42,,,,,,,,,,42,,,42,42,42,42,42,42,42,42,42,42,,42,42,,42,42,42',
',,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,42,,,,,42,42',
'42,42,42,42,,,,42,42,301,301,301,,301,,,,301,301,,,,301,,301,301,301',
'301,301,301,301,,,,,301,301,301,301,301,301,301,,,,,,,,,,301,,,301,301',
'301,301,301,301,301,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,',
',,,,,301,,,301,,,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301',
'301,301,,,,301,301,43,43,43,,43,,,,43,43,,,,43,,43,43,43,43,43,43,43',
',,,,43,43,43,43,43,43,43,,,,,,,,,,43,,,43,43,43,43,43,43,43,43,43,43',
',43,43,,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,',
',,,,43,,,,,43,43,43,43,43,43,,,,43,43,907,907,907,,907,,,,907,907,,',
',907,,907,907,907,907,907,907,907,,,,,907,907,907,907,907,907,907,,',
',,,,,,,907,,,907,907,907,907,907,907,907,907,907,907,,907,907,,,,907',
',,,,,,,,,,,,,,,,,,,907,,,907,,,907,907,,,907,,,,,,,,,,,,,,,,,,,907,907',
'907,907,907,907,,,,907,907,303,303,303,,303,,,,303,303,,,,303,,303,303',
'303,303,303,303,303,,,,,303,303,303,303,303,303,303,,,,,,,,,,303,,,303',
'303,303,303,303,303,303,303,303,303,,303,303,,303,303,303,,,,,,,,,,',
',,,,,,,,,303,,,303,,,303,303,,,303,,,,,,303,,,,,,,,303,,,,,303,303,303',
'303,303,303,,,,303,303,912,912,912,,912,,,,912,912,,,,912,,912,912,912',
'912,912,912,912,,,,,912,912,912,912,912,912,912,,,,,,,,,,912,,,912,912',
'912,912,912,912,912,912,912,912,,912,912,,912,912,912,,,,,,,,,,,,,,',
',,,,,912,,,912,,,912,912,,,912,,912,,912,,912,,,,,,,,912,,,,,912,912',
'912,912,912,912,,,,912,912,920,920,920,,920,,,,920,920,,,,920,,920,920',
'920,920,920,920,920,,,,,920,920,920,920,920,920,920,,,,,,,,,,920,,,920',
'920,920,920,920,920,920,920,920,920,,920,920,,,,920,,,,,,,,,,,,,,,,',
',,,920,,,920,,,920,920,,,920,,,,,,,,,,,,,,,,,,,920,920,920,920,920,920',
',,,920,920,923,923,923,,923,,,,923,923,,,,923,,923,923,923,923,923,923',
'923,,,,,923,923,923,923,923,923,923,,,,,,,,,,923,,,923,923,923,923,923',
'923,923,923,923,923,,923,923,,923,923,923,,,,,,,,,,,,,,,,,,,,923,,,923',
',,923,923,,,923,,,,,,923,,,,,,,,923,,,,,923,923,923,923,923,923,,,,923',
'923,308,308,308,,308,,,,308,308,,,,308,,308,308,308,308,308,308,308',
',,,,308,308,308,308,308,308,308,,,308,,,,,,,308,,,308,308,308,308,308',
'308,308,308,308,308,,308,308,,308,308,308,,,,,,,,,,,,,,,,,,,,308,,,308',
',,308,308,,,308,,,,,,308,,,,,,,,308,,,,,308,308,308,308,308,308,,,,308',
'308,309,309,309,,309,,,,309,309,,,,309,,309,309,309,309,309,309,309',
',,,,309,309,309,309,309,309,309,,,309,,,,,,,309,,,309,309,309,309,309',
'309,309,309,309,309,,309,309,,309,309,309,,,,,,,,,,,,,,,,,,,,309,,,309',
',,309,309,,,309,,,,,,309,,,,,,,,309,,,,,309,309,309,309,309,309,,,,309',
'309,320,320,320,,320,,,,320,320,,,,320,,320,320,320,320,320,320,320',
',,,,320,320,320,320,320,320,320,,,,,,,,,,320,,,320,320,320,320,320,320',
'320,320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320',
',,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320,320,322,322,322',
',322,,,,322,322,,,,322,,322,322,322,322,322,322,322,,,,,322,322,322',
'322,322,322,322,,,,,,,,,,322,,,322,322,322,322,322,322,322,322,322,322',
',322,322,,,,322,,,,,,,,,,,,,,,,,,,,322,,,322,,,322,322,,,322,,,,,,,',
',,,,,,,,,,,322,322,322,322,322,322,,,,322,322,55,55,55,,55,,,,55,55',
',,,55,,55,55,55,55,55,55,55,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,',
',55,55,55,55,55,55,55,55,55,55,,55,55,,55,55,55,,,,,,,,,,,,,,,,,,,,55',
',,55,,,55,55,,,55,,,,,,55,,,,,,,,55,,,,,55,55,55,55,55,55,,,,55,55,56',
'56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,56,56,56,56,56,56',
'56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56,,,,',
',,,,,,,,,,,,,,,56,,,56,,,56,56,,,56,,56,,,,56,,,,,,,,56,,,,,56,56,56',
'56,56,56,,,,56,56,361,361,361,361,361,361,361,361,361,361,361,361,361',
'361,361,361,361,361,361,361,361,361,361,361,,,361,361,361,361,361,361',
'361,361,361,361,,,,,,361,361,361,361,361,361,361,361,,,361,,,,,,,,361',
'361,,361,361,361,361,,361,361,,,361,,,,,361,361,361,361,,,,,,,,,,,,',
',361,361,,361,361,361,361,361,361,361,361,361,,361,,,361,361,,,59,59',
'59,,59,,,361,59,59,,,,59,,59,59,59,59,59,59,59,,,,,59,59,59,59,59,59',
'59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,,',
',,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,,,,,59,,,,,,,,59,,,,,59,59,59',
'59,59,59,,,,59,59,373,373,373,,373,,,,373,373,,,,373,,373,373,373,373',
'373,373,373,,,,,373,373,373,373,373,373,373,,,,,,,,,,373,,,373,373,373',
'373,373,373,373,373,373,373,,373,373,,373,373,373,,,,,,,,,,,,,,,,,,',
',373,,,373,,,373,373,,,373,,,,,,373,,,,,,,,373,,,,,373,373,373,373,373',
'373,,,,373,373,60,60,60,,60,,,,60,60,,,,60,,60,60,60,60,60,60,60,,,',
',60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60',
',60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,',
',,,,60,,,,,60,60,60,60,60,60,,,,60,60,382,382,382,,382,,,,382,382,,',
',382,,382,382,382,382,382,382,382,,,,,382,382,382,382,382,382,382,,',
',,,,,,,382,,,382,382,382,382,382,382,382,382,382,382,,382,382,,382,382',
'382,,,,,,,,,,,,,,,,,,,,382,,,382,382,,382,382,,,382,,382,,382,,382,',
',,,,,,382,,,,,382,382,382,382,382,382,,,,382,382,64,64,64,,64,,,,64',
'64,,,,64,,64,64,64,64,64,64,64,,,,,64,64,64,64,64,64,64,,,,,,,,,,64',
',,64,64,64,64,64,64,64,64,64,64,,64,64,,,,64,,,,,,,,,,,,,,,,,,,,64,',
',64,,,64,64,,,64,,64,,,,,,,,,,,,,,,,,64,64,64,64,64,64,,,,64,64,389',
'389,389,,389,,,,389,389,,,,389,,389,389,389,389,389,389,389,,,,,389',
'389,389,389,389,389,389,,,,,,,,,,389,,,389,389,389,389,389,389,389,389',
'389,389,,389,389,,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,389,,389',
'389,,,389,,389,,389,,389,,,,,,,,389,,,,,389,389,389,389,389,389,,,,389',
'389,390,390,390,,390,,,,390,390,,,,390,,390,390,390,390,390,390,390',
',,,,390,390,390,390,390,390,390,,,,,,,,,,390,,,390,390,390,390,390,390',
'390,390,390,390,,390,390,,390,390,390,,,,,,,,,,,,,,,,,,,,390,,,390,390',
',390,390,,,390,,390,,390,,390,,,,,,,,390,,,,,390,390,390,390,390,390',
',,,390,390,397,397,397,,397,,,,397,397,,,,397,,397,397,397,397,397,397',
'397,,,,,397,397,397,397,397,397,397,,,,,,,,,,397,,,397,397,397,397,397',
'397,397,397,397,397,,397,397,,397,397,397,,,,,,,,,,,,,,,,,,,,397,,,397',
',,397,397,,,397,,397,,,,397,,,,,,,,397,,,,,397,397,397,397,397,397,',
',,397,397,399,399,399,,399,,,,399,399,,,,399,,399,399,399,399,399,399',
'399,,,,,399,399,399,399,399,399,399,,,,,,,,,,399,,,399,399,399,399,399',
'399,399,399,399,399,,399,399,,399,399,399,,,,,,,,,,,,,,,,,,,,399,,,399',
',,399,399,,,399,,,,,,399,,,,,,,,399,,,,,399,399,399,399,399,399,,,,399',
'399,400,400,400,,400,,,,400,400,,,,400,,400,400,400,400,400,400,400',
',,,,400,400,400,400,400,400,400,,,,,,,,,,400,,,400,400,400,400,400,400',
'400,400,400,400,,400,400,,400,400,400,,,,,,,,,,,,,,,,,,,,400,,,400,',
',400,400,,,400,,,,,,400,,,,,,,,400,,,,,400,400,400,400,400,400,,,,400',
'400,401,401,401,,401,,,,401,401,,,,401,,401,401,401,401,401,401,401',
',,,,401,401,401,401,401,401,401,,,,,,,,,,401,,,401,401,401,401,401,401',
'401,401,401,401,,401,401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,',
',401,401,,,401,,,,,,401,,,,,,,,401,,,,,401,401,401,401,401,401,,,,401',
'401,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,8,8,8,8,8,8,8,,,8,,,,,',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8',
'8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,430,430,430,,430,,,,430',
'430,,,,430,,430,430,430,430,430,430,430,,,,,430,430,430,430,430,430',
'430,,,,,,,,,,430,,,430,430,430,430,430,430,430,430,430,430,,430,430',
',430,430,430,,,,,,,,,,,,,,,,,,,,430,,,430,,,430,430,,,430,,430,,430',
',430,,,,,,,,430,,,,,430,430,430,430,430,430,,,,430,430,433,433,433,',
'433,,,,433,433,,,,433,,433,433,433,433,433,433,433,,,,,433,433,433,433',
'433,433,433,,,,,,,,,,433,,,433,433,433,433,433,433,433,433,433,433,',
'433,433,,433,433,433,,,,,,,,,,,,,,,,,,,,433,,,433,,,433,433,,,433,,433',
',433,,433,,,,,,,,433,,,,,433,433,433,433,433,433,,,,433,433,436,436',
'436,,436,,,,436,436,,,,436,,436,436,436,436,436,436,436,,,,,436,436',
'436,436,436,436,436,,,,,,,,,,436,,,436,436,436,436,436,436,436,436,436',
'436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,,436',
',,,,,436,,,,,,,,436,,,,,436,436,436,436,436,436,,,,436,436,445,445,445',
',445,,,,445,445,,,,445,,445,445,445,445,445,445,445,,,,,445,445,445',
'445,445,445,445,,,445,,,,,,,445,,,445,445,445,445,445,445,445,445,445',
'445,,445,445,,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445',
',445,,445,,445,,,,,,,,445,,,,,445,445,445,445,445,445,,,,445,445,85',
'85,85,,85,,,,85,85,,,,85,,85,85,85,85,85,85,85,,85,,,85,85,85,85,85',
'85,85,,,,,,,,,,85,,,85,85,85,85,85,85,85,85,85,85,,85,85,,85,85,85,',
',,,,,,,,,,,,,,,,,,85,,,85,85,,85,85,,,85,,85,,85,,85,,,,,,,,85,,85,',
',85,85,85,85,85,85,,,,85,85,88,88,88,,88,,,,88,88,,,,88,,88,88,88,88',
'88,88,88,,88,,,88,88,88,88,88,88,88,,,,,,,,,,88,,,88,88,88,88,88,88',
'88,88,88,88,,88,88,,88,88,88,,,,,,,,,,,,,,,,,,,,88,,,88,88,,88,88,,',
'88,,88,,88,,88,,,,,,,,88,,88,,,88,88,88,88,88,88,,,,88,88,104,104,104',
',104,,,,104,104,,,,104,,104,104,104,104,104,104,104,,,,,104,104,104',
'104,104,104,104,,,104,,,,,,,104,,,104,104,104,104,104,104,104,104,104',
'104,,104,104,,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,,,104,104,,,104',
',,,,,104,,,,,,,,104,,,,,104,104,104,104,104,104,,,,104,104,105,105,105',
',105,,,,105,105,,,,105,,105,105,105,105,105,105,105,,,,,105,105,105',
'105,105,105,105,,,105,,,,,,,105,,,105,105,105,105,105,105,105,105,105',
'105,,105,105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,,105',
',,,,,105,,,,,,,,105,,,,,105,105,105,105,105,105,,,,105,105,106,106,106',
',106,,,,106,106,,,,106,,106,106,106,106,106,106,106,,,,,106,106,106',
'106,106,106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,106,106',
'106,,106,106,,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106,,,106',
',,,,,106,,,,,,,,106,,,,,106,106,106,106,106,106,,,,106,106,107,107,107',
',107,,,,107,107,,,,107,,107,107,107,107,107,107,107,,,,,107,107,107',
'107,107,107,107,,,107,,,,,,,107,,,107,107,107,107,107,107,107,107,107',
'107,,107,107,,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107,,,107,107,,,107',
',,,,,107,,,,,,,,107,,,,,107,107,107,107,107,107,,,,107,107,462,462,462',
',462,,,,462,462,,,,462,,462,462,462,462,462,462,462,,,,,462,462,462',
'462,462,462,462,,,,,,,,,,462,,,462,462,462,462,462,462,462,462,462,462',
',462,462,,462,462,462,,,,,,,,,,,,,,,,,,,,462,,,462,,,462,462,,,462,',
'462,,,,462,,,,,,,,462,,,,,462,462,462,462,462,462,,,,462,462,108,108',
'108,108,108,,,,108,108,,,,108,,108,108,108,108,108,108,108,,,,,108,108',
'108,108,108,108,108,,,108,,,,,,108,108,108,108,108,108,108,108,108,108',
'108,108,108,108,,108,108,,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,',
',108,108,,,108,,108,,,,108,,,,,,,,108,,,,,108,108,108,108,108,108,,',
',108,108,469,469,469,,469,,,,469,469,,,,469,,469,469,469,469,469,469',
'469,,,,,469,469,469,469,469,469,469,,,,,,,,,,469,,,469,469,469,469,469',
'469,469,469,469,469,,469,469,,469,469,469,,,,,,,,,,,,,,,,,,,,469,,,469',
',,469,469,,,469,,,,,,469,,,,,,,,469,,,,,469,469,469,469,469,469,,,,469',
'469,470,470,470,,470,,,,470,470,,,,470,,470,470,470,470,470,470,470',
',,,,470,470,470,470,470,470,470,,,,,,,,,,470,,,470,470,470,470,470,470',
'470,470,470,470,,470,470,,470,470,470,,,,,,,,,,,,,,,,,,,,470,,,470,',
',470,470,,,470,,,,,,470,,,,,,,,470,,,,,470,470,470,470,470,470,,,,470',
'470,471,471,471,,471,,,,471,471,,,,471,,471,471,471,471,471,471,471',
',,,,471,471,471,471,471,471,471,,,,,,,,,,471,,,471,471,471,471,471,471',
'471,471,471,471,,471,471,,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471,',
',471,471,,,471,,,,,,471,,,,,,,,471,,,,,471,471,471,471,471,471,,,,471',
'471,475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475,475',
',,,,475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475,475',
'475,475,475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475',
',,475,475,,,475,,,,,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475',
'475,481,481,481,,481,,,,481,481,,,,481,,481,481,481,481,481,481,481',
',,,,481,481,481,481,481,481,481,,,,,,,,,,481,,,481,481,481,481,481,481',
'481,481,481,481,,481,481,,481,481,481,,,,,,,,,,,,,,,,,,,,481,,,481,',
',481,481,,,481,,481,,,,481,,,,,,,,481,,,,,481,481,481,481,481,481,,',
',481,481,484,484,484,,484,,,,484,484,,,,484,,484,484,484,484,484,484',
'484,,,,,484,484,484,484,484,484,484,,,,,,,,,,484,,,484,484,484,484,484',
'484,484,484,484,484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484',
',,484,484,,,484,,,,,,484,,,,,,,,484,,,,,484,484,484,484,484,484,,,,484',
'484,191,191,191,,191,,,,191,191,,,,191,,191,191,191,191,191,191,191',
',,,,191,191,191,191,191,191,191,,,,,,,,,,191,,,191,191,191,191,191,191',
'191,191,191,191,,191,191,,191,191,191,,,,,,,,,,,,,,,,,,,,191,,,191,',
',191,191,,,191,,191,,,,191,,,,,,,,191,,,,,191,191,191,191,191,191,,',
',191,191,192,192,192,,192,,,,192,192,,,,192,,192,192,192,192,192,192',
'192,,,,,192,192,192,192,192,192,192,,,,,,,,,,192,,,192,192,192,192,192',
'192,192,192,192,192,,192,192,,192,192,192,,,,,,,,,,,,,,,,,,,,192,,,192',
',,192,192,,,192,,192,,,,192,,,,,,,,192,,,,,192,192,192,192,192,192,',
',,192,192,502,502,502,,502,,,,502,502,,,,502,,502,502,502,502,502,502',
'502,,,,,502,502,502,502,502,502,502,,,,,,,,,,502,,,502,502,502,502,502',
'502,502,502,502,502,,502,502,,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502',
',,502,502,,,502,,502,,,,502,,,,,,,,502,,,,,502,502,502,502,502,502,',
',,502,502,514,514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514',
'514,,,,,514,514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514',
'514,514,514,514,514,514,,514,514,,514,514,514,,,,,,,,,,,,,,,,,,,,514',
',,514,,,514,514,,,514,,,,,,514,,,,,,,,514,,,,,514,514,514,514,514,514',
',,,514,514,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520,520,520',
'520,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520',
'520,520,520,520,520,520,,520,520,,520,520,520,,,,,,,,,,,,,,,,,,,,520',
',,520,,,520,520,,,520,,,,,,520,,,,,,,,520,,,,,520,520,520,520,520,520',
',,,520,520,193,193,193,,193,,,,193,193,,,,193,,193,193,193,193,193,193',
'193,,,,,193,193,193,193,193,193,193,,,,,,,,,,193,,,193,193,193,193,193',
'193,193,193,193,193,,193,193,,193,193,193,,,,,,,,,,,,,,,,,,,,193,,,193',
',,193,193,,,193,,,,,,193,,,,,,,,193,,,,,193,193,193,193,193,193,,,,193',
'193,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538',
'538,538,538,538,538,538,538,538,,,538,538,538,538,538,538,538,538,538',
'538,,,,,,538,538,538,538,538,538,538,538,,,538,,,,,,,,538,538,,538,538',
'538,538,,538,538,,,538,,,,,538,538,538,538,,,,,,,,,,,,,,538,538,,538',
'538,538,538,538,538,538,538,538,,538,,,538,538,,,194,194,194,,194,,',
'538,194,194,,,,194,,194,194,194,194,194,194,194,,,,,194,194,194,194',
'194,194,194,,,,,,,,,,194,,,194,194,194,194,194,194,194,194,194,194,',
'194,194,,194,194,194,,,,,,,,,,,,,,,,,,,,194,,,194,,,194,194,,,194,,194',
',,,194,,,,,,,,194,,,,,194,194,194,194,194,194,,,,194,194,541,541,541',
',541,,,,541,541,,,,541,,541,541,541,541,541,541,541,,,,,541,541,541',
'541,541,541,541,,,,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541',
',541,541,,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,',
',,,,541,,,,,,,,541,,,,,541,541,541,541,541,541,,,,541,541,542,542,542',
',542,,,,542,542,,,,542,,542,542,542,542,542,542,542,,,,,542,542,542',
'542,542,542,542,,,,,,,,,,542,,,542,542,542,542,542,542,542,542,542,542',
',542,542,,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542,,,542,',
'542,,,,542,,,,,,,,542,,,,,542,542,542,542,542,542,,,,542,542,545,545',
'545,,545,,,,545,545,,,,545,,545,545,545,545,545,545,545,,,,,545,545',
'545,545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545,545,545,545,545',
'545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545',
',,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545,546,546,546',
',546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,546,546,546',
'546,546,546,546,,,,,,,,,,546,,,546,546,546,546,546,546,546,546,546,546',
',546,546,,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,546,,,546,',
',,,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546,546,551,551,551',
',551,,,,551,551,,,,551,,551,551,551,551,551,551,551,,,,,551,551,551',
'551,551,551,551,,,,,,,,,,551,,,551,551,551,551,551,551,551,551,551,551',
',551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551,,,551,',
',,,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551,554,554,554',
',554,,,,554,554,,,,554,,554,554,554,554,554,554,554,,,,,554,554,554',
'554,554,554,554,,,,,,,,,,554,,,554,554,554,554,554,554,554,554,554,554',
',554,554,,554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554,',
',,,,554,,,,,,,,554,,,,,554,554,554,554,554,554,,,,554,554,197,197,197',
',197,,,,197,197,,,,197,,197,197,197,197,197,197,197,,,,,197,197,197',
'197,197,197,197,,,,,,,,,,197,,,197,197,197,197,197,197,197,197,197,197',
',197,197,,197,197,197,,,,,,,,,,,,,,,,,,,,197,,,197,,,197,197,,,197,',
',,,,197,,,,,,,,197,,,,,197,197,197,197,197,197,,,,197,197,561,561,561',
',561,,,,561,561,,,,561,,561,561,561,561,561,561,561,,,,,561,561,561',
'561,561,561,561,,,,,,,,,,561,,,561,561,561,561,561,561,561,561,561,561',
',561,561,,561,561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,,561,',
',,,,561,,,,,,,,561,,,,,561,561,561,561,561,561,,,,561,561,563,563,563',
',563,,,,563,563,,,,563,,563,563,563,563,563,563,563,,,,,563,563,563',
'563,563,563,563,,,,,,,,,,563,,,563,563,563,563,563,563,563,563,563,563',
',563,563,,,,563,,,,,,,,,,,,,,,,,,,,563,,,563,,,563,563,,,563,,563,,563',
',,,,,,,,563,,,,,,563,563,563,563,563,563,,,,563,563,566,566,566,,566',
',,,566,566,,,,566,,566,566,566,566,566,566,566,,,,,566,566,566,566,566',
'566,566,,,,,,,,,,566,,,566,566,566,566,566,566,566,566,566,566,,566',
'566,,566,566,566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566,,,,,,566',
',,,,,,,566,,,,,566,566,566,566,566,566,,,,566,566,198,198,198,,198,',
',,198,198,,,,198,,198,198,198,198,198,198,198,,,,,198,198,198,198,198',
'198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198,198,198,,198',
'198,,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,198,,,198,,,,,,198',
',,,,,,,198,,,,,198,198,198,198,198,198,,,,198,198,199,199,199,,199,',
',,199,199,,,,199,,199,199,199,199,199,199,199,,,,,199,199,199,199,199',
'199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199,199,199,199,,199',
'199,,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,,199,,,,,,199',
',,,,,,,199,,,,,199,199,199,199,199,199,,,,199,199,570,570,570,,570,',
',,570,570,,,,570,,570,570,570,570,570,570,570,,,,,570,570,570,570,570',
'570,570,,,,,,,,,,570,,,570,570,570,570,570,570,570,570,570,570,,570',
'570,,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,,,570',
',,,,,,,570,,,,,570,570,570,570,570,570,,,,570,570,20,20,20,,20,,,,20',
'20,,,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20',
',,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,,,,,,,,,,,,,,,,,,',
'20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,20,,,,,20,20,20,20,20,20,,,,20,20',
'584,584,584,,584,,,,584,584,,,,584,,584,584,584,584,584,584,584,,,,',
'584,584,584,584,584,584,584,,,,,,,,,,584,,,584,584,584,584,584,584,584',
'584,584,584,,584,584,,584,584,584,,,,,,,,,,,,,,,,,,,,584,,,584,,,584',
'584,,,584,,,,,,584,,,,,,,,584,,,,,584,584,584,584,584,584,,,,584,584',
'21,21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,21,21,21,21,21',
'21,21,,,,,,,,,,21,,,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,',
',,,,,,,,,,,,,,,,,,21,,,21,,,21,21,,,21,,,,,,21,,,,,,,,21,,,,,21,21,21',
'21,21,21,,,,21,21,595,595,595,,595,,,,595,595,,,,595,,595,595,595,595',
'595,595,595,,,,,595,595,595,595,595,595,595,,,,,,,,,,595,,,595,595,595',
'595,595,595,595,595,595,595,,595,595,,595,595,595,,,,,,,,,,,,,,,,,,',
',595,,,595,,,595,595,,,595,,595,,595,,595,,,,,,,,595,,,,,595,595,595',
'595,595,595,,,,595,595,210,210,210,,210,,,,210,210,,,,210,,210,210,210',
'210,210,210,210,,,,,210,210,210,210,210,210,210,,,,,,,,,,210,,,210,210',
'210,210,210,210,210,210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,',
',,,,,210,,,210,,,210,210,,,210,,,,,,210,,,,,,,,210,,,,,210,210,210,210',
'210,210,,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211',
'211,211,211,,,,,211,211,211,211,211,211,211,,,,,,,,,,211,,,211,211,211',
'211,211,211,211,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,',
',211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211,211',
'211,,,,211,211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212',
'212,212,,,,,212,212,212,212,212,212,212,,,,,,,,,,212,,,212,212,212,212',
'212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212',
',,212,,,212,212,,,212,,,,,,212,,,,,,,,212,,,,,212,212,212,212,212,212',
',,,212,212,213,213,213,,213,,,,213,213,,,,213,,213,213,213,213,213,213',
'213,,,,,213,213,213,213,213,213,213,,,,,,,,,,213,,,213,213,213,213,213',
'213,213,213,213,213,,213,213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213',
',,213,213,,,213,,,,,,213,,,,,,,,213,,,,,213,213,213,213,213,213,,,,213',
'213,214,214,214,,214,,,,214,214,,,,214,,214,214,214,214,214,214,214',
',,,,214,214,214,214,214,214,214,,,,,,,,,,214,,,214,214,214,214,214,214',
'214,214,214,214,,214,214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,',
',214,214,,,214,,,,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214',
'214,611,611,611,,611,,,,611,611,,,,611,,611,611,611,611,611,611,611',
',,,,611,611,611,611,611,611,611,,,,,,,,,,611,,,611,611,611,611,611,611',
'611,611,611,611,,611,611,,611,611,611,,,,,,,,,,,,,,,,,,,,611,,,611,',
',611,611,,,611,,611,,,,611,,,,,,,,611,,,,,611,611,611,611,611,611,,',
',611,611,215,215,215,,215,,,,215,215,,,,215,,215,215,215,215,215,215',
'215,,,,,215,215,215,215,215,215,215,,,,,,,,,,215,,,215,215,215,215,215',
'215,215,215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215',
',,215,215,,,215,,,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215',
'215,614,614,614,,614,,,,614,614,,,,614,,614,614,614,614,614,614,614',
',,,,614,614,614,614,614,614,614,,,,,,,,,,614,,,614,614,614,614,614,614',
'614,614,614,614,,614,614,,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,',
',614,614,,,614,,,,,,614,,,,,,,,614,,,,,614,614,614,614,614,614,,,,614',
'614,617,617,617,,617,,,,617,617,,,,617,,617,617,617,617,617,617,617',
',,,,617,617,617,617,617,617,617,,,,,,,,,,617,,,617,617,617,617,617,617',
'617,617,617,617,,617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,',
',617,617,,,617,,,,,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617',
'617,216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216',
',,,,216,216,216,216,216,216,216,,,,,,,,,,216,,,216,216,216,216,216,216',
'216,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,',
',216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216',
'216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217',
',,,,217,217,217,217,217,217,217,,,,,,,,,,217,,,217,217,217,217,217,217',
'217,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,',
',217,217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217',
'217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218',
',,,,218,218,218,218,218,218,218,,,,,,,,,,218,,,218,218,218,218,218,218',
'218,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,',
',218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218',
'218,632,632,632,,632,,,,632,632,,,,632,,632,632,632,632,632,632,632',
',,,,632,632,632,632,632,632,632,,,,,,,,,,632,,,632,632,632,632,632,632',
'632,632,632,632,,632,632,,632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632,',
',632,632,,,632,,632,,,,632,,,,,,,,632,,,,,632,632,632,632,632,632,,',
',632,632,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219',
'219,,,,,219,219,219,219,219,219,219,,,,,,,,,,219,,,219,219,219,219,219',
'219,219,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219',
',,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219',
'219,638,638,638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638',
',,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638',
'638,638,638,638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638',
',,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638',
'638,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643',
',,,,643,643,643,643,643,643,643,,,,,,,,,,643,,,643,643,643,643,643,643',
'643,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,',
',643,643,,,643,,643,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,',
',643,643,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220',
'220,,,,,220,220,220,220,220,220,220,,,,,,,,,,220,,,220,220,220,220,220',
'220,220,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220',
',,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220',
'220,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221',
',,,,221,221,221,221,221,221,221,,,,,,,,,,221,,,221,221,221,221,221,221',
'221,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,',
',221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221',
'221,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,,,67,67,67,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,67,67',
'67,67,67,,,,,,,67,67,,67,67,67,67,,67,67,,,67,,,,,67,67,67,67,,,,,,67',
',,,,,,,67,67,,67,67,67,67,67,67,67,67,67,,67,,,67,671,671,671,671,671',
'671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671',
'671,671,,,671,671,671,671,671,671,671,671,671,671,,,,,,671,671,671,671',
'671,671,671,671,,,671,,,,,,,,671,671,,671,671,671,671,,671,671,,,671',
',,,,671,671,671,671,,,,,,,,,,,,,,671,671,,671,671,671,671,671,671,671',
'671,671,,671,,,671,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81',
'81,81,81,81,81,81,81,,,81,81,81,81,81,81,81,81,81,81,,,,,,81,81,81,81',
'81,81,81,81,81,81,81,81,,,,,,,81,81,,81,81,81,81,,81,81,,,81,,,,,81',
'81,81,81,,,,,,,,,,,,,,81,81,,81,81,81,81,81,81,81,81,81,,81,845,845',
'81,,845,,,,,,,,845,845,,845,845,845,845,,845,845,,,845,,,,,845,845,845',
'845,,,,,,,,,,,,,,845,845,,845,845,845,845,845,845,845,845,845,,845,844',
'844,845,,844,,,,,,,,844,844,,844,844,844,844,,844,844,,,844,,,,,844',
'844,844,844,,,,,,,,,,,,,,844,844,,844,844,844,844,844,844,844,844,844',
',844,196,196,844,,196,,,,,,,,196,196,,196,196,196,196,,196,196,,,196',
',,,,196,196,196,196,,,,,,,,,,,,,,196,196,,196,196,196,196,196,196,196',
'196,196,,196,395,395,196,,395,,,,,,,,395,395,,395,395,395,395,,395,395',
',,395,,,,,395,395,395,395,,,,,,,,,,,,,,395,395,,395,395,395,395,395',
'395,395,395,395,,395,396,396,395,,396,,,,,,,,396,396,,396,396,396,396',
',396,396,,,396,,,,,396,396,396,396,,,,,,,,,,,,,,396,396,,396,396,396',
'396,396,396,396,396,396,,396,504,504,396,,504,,,,,,,,504,504,,504,504',
'504,504,,504,504,,,504,,,,,504,504,504,504,,,,,,,,,,,,,,504,504,,504',
'504,504,504,504,504,504,504,504,,504,503,503,504,,503,,,,,,,,503,503',
',503,503,503,503,,503,503,,,503,,,,,503,503,503,503,,,,,,,,,,,,,,503',
'503,,503,503,503,503,503,503,503,503,503,,503,642,642,503,,642,,,,,',
',,642,642,,642,642,642,642,,642,642,,,642,,,,,642,642,642,642,,,,,,',
',,,,,,,642,642,,642,642,642,642,642,642,642,642,642,,642,594,594,642',
',594,,,,,,,,594,594,,594,594,594,594,,594,594,,,594,,,,,594,594,594',
'594,,,,,,,,,,,,,,594,594,,594,594,594,594,594,594,594,594,594,,594,',
',594,850,850,850,850,850,850,850,850,850,850,850,,850,850,,,850,850',
',,,,,,,,,,,,,,850,,850,,850,850,850,850,850,850,850,,850,,,,,,,464,464',
',,464,,,,,850,,850,464,464,,464,464,464,464,,464,464,,,464,,,,,464,464',
'464,464,,,,,,,,,,,,,,464,464,,464,464,464,464,464,464,464,464,464,,464',
'593,593,464,,593,,,,,,,,593,593,,593,593,593,593,,593,593,,,593,,,,',
'593,593,593,593,,,,,,,,,,,,,,593,593,,593,593,593,593,593,593,593,593',
'593,,593,,,593,581,581,581,581,581,581,581,581,581,581,581,,581,581',
',,581,581,,,,581,,,,,,,,,,,581,,581,,581,581,581,581,581,581,581,,581',
',,,,,,644,644,,,644,,,,,581,,581,644,644,,644,644,644,644,,644,644,',
',644,,,,,644,644,644,644,,,,,,,,,,,,,,644,644,,644,644,644,644,644,644',
'644,644,644,,644,254,254,644,,254,,,,,,,,254,254,,254,254,254,254,,254',
'254,,,254,,,,,254,254,254,254,,,,,,,,,,,,,,254,254,,254,254,254,254',
'254,254,254,254,254,,254,472,472,254,,472,,,,,,,,472,472,,472,472,472',
'472,,472,472,,,472,,,,,472,472,472,472,,,,,,,,,,,,,,472,472,,472,472',
'472,472,472,472,472,472,472,,472,473,473,472,,473,,,,,,,,473,473,,473',
'473,473,473,,473,473,,,473,,,,,473,473,473,473,,,,,,,,,,,,,,473,473',
',473,473,473,473,473,473,473,473,473,,473,195,195,473,,195,,,,,,,,195',
'195,,195,195,195,195,,195,195,,,195,,,,,195,195,195,195,,,,,,,,,,,,',
',195,195,,195,195,195,195,195,195,195,195,195,,195,255,255,195,,255',
',,,,,,,255,255,,255,255,255,255,,255,255,,,255,,,,,255,255,255,255,',
',,,,,,,,,,,,255,255,,255,255,255,255,255,255,255,255,255,,255,,,255',
'427,427,427,427,427,427,427,427,427,427,427,,427,427,,,427,427,,,,,',
',,,,,,,,,427,,427,,427,427,427,427,427,427,427,,427,,378,378,378,378',
'378,378,378,378,378,378,378,,378,378,427,427,378,378,,,,,,,,,,,,,,,378',
',378,,378,378,378,378,378,378,378,,378,392,392,392,392,392,392,392,392',
'392,392,392,,392,392,,378,392,392,,,,,,,,,,,,,,,392,,392,,392,392,392',
'392,392,392,392,,392,474,474,474,474,474,474,474,474,474,474,474,,474',
'474,,392,474,474,,,,,,,,,,,,,,,474,,474,,474,474,474,474,474,474,474',
',474,692,692,692,692,692,692,692,692,692,692,692,,692,692,,474,692,692',
',,,,,,,,,,,,,,692,,692,,692,692,692,692,692,692,692,,692,22,22,22,22',
'22,22,22,22,22,22,22,,22,22,,692,22,22,,,,,,,,,,,,,,,22,,22,,22,22,22',
'22,22,22,22,,22,697,697,697,697,697,697,697,697,697,697,697,,697,697',
',22,697,697,,,,,,,,,,,,,,,697,,697,,697,697,697,697,697,697,697,,697',
'685,685,685,685,685,685,685,685,685,685,685,,685,685,,697,685,685,,',
',,,,,,,,,,,,685,,685,,685,685,685,685,685,685,685,,685,734,734,734,734',
'734,734,734,734,734,734,734,,734,734,,685,734,734,,,,,,,,,,,,,,,734',
',734,,734,734,734,734,734,734,734,,734,687,687,687,687,687,687,687,687',
'687,687,687,,687,687,734,734,687,687,,,,,,,,,,,,,,,687,,687,,687,687',
'687,687,687,687,687,,687,240,240,240,240,240,240,240,240,240,240,240',
',240,240,,687,240,240,,,,,,,,,,,,,,,240,,240,,240,240,240,240,240,240',
'240,,240,485,485,485,485,485,485,485,485,485,485,485,,485,485,,240,485',
'485,,,,,,,,,,,,,,,485,,485,,485,485,485,485,485,485,485,,485,779,779',
'779,779,779,779,779,779,779,779,779,,779,779,485,485,779,779,,,,,,,',
',,,,,,,779,,779,,779,779,779,779,779,779,779,,779,680,680,680,680,680',
'680,680,680,680,680,680,,680,680,,779,680,680,,,,,,,,,,,,,,,680,,680',
',680,680,680,680,680,680,680,,680,690,690,690,690,690,690,690,690,690',
'690,690,,690,690,,680,690,690,,,,,,,,,,,,,,,690,,690,,690,690,690,690',
'690,690,690,,690,606,606,606,606,606,606,606,606,606,606,606,,606,606',
',690,606,606,,,,,,,,,,,,,,,606,,606,,606,606,606,606,606,606,606,,606',
',,,,,,,,,,,,,,,606' ]
        racc_action_check = arr = ::Array.new(25062, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1100,  1941,    61,   nil,   317,   nil,  1119, 15371,  7772,
 10789,   nil,     2,    32,    41,   128,   759,   303,   401,   nil,
 20203, 20445, 24487,   197,   nil,  7885,  8490,  8732,   -23,     6,
  9700,  9942,   nil,  2917, 10547, 10668,   nil,   179,   316,   260,
   475, 11628, 12233, 12475,   220,   897,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   250,   nil, 13685, 13806,   nil,    26, 14040,
 14282,   nil,   nil,   836, 14524,   269,   nil, 22865,   nil,   nil,
   nil,   nil,   nil,   -58,   nil,   nil,   nil,   nil,   nil,   243,
   277, 23085,   nil,   nil,   nil, 15976,   nil,   nil, 16097,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   963,   nil,   nil,   nil, 16218, 16339, 16460, 16581, 16823,  1081,
   nil,   402,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   298,   nil,   317,
  1575, 17670, 17791, 18275, 18509, 24153, 23265, 19356, 19840, 19961,
   nil,   598,   126,   375,   157,   300,   354,  3405,   nil,   nil,
 20687, 20808, 20929, 21050, 21171, 21413, 21776, 21897, 22018, 22260,
 22623, 22744,  4868,  4989,  5110,  5231,  5352,  6078,  6320,  6441,
  6683,  7046,  7167,  7288,  7409,  7530,  7651,   nil,   nil,   nil,
 24712,   nil,   336,   338,  8127,   nil,  8248,   391,   nil,   nil,
   nil,   nil,   nil,   nil, 23973, 24213,   384,  8974,   nil,   402,
   nil,   nil,   nil,  9337,   nil,   nil,  9458,   414,  3161,   443,
   457,   422, 10184,  2795,   488,   405,   506,   359,   493,   474,
   -15,   nil,   511,   506,   nil,   nil,   335,   553,   555,   574,
   nil,   558,   nil, 11749,   nil,  4381,   488,   nil,   500,   280,
   378, 12354,   532, 12717,   nil,   420,    20,    31, 13201, 13322,
   274,   404,   500,   -13,   872,   576,     3,   607,   nil,   nil,
 13443,   nil, 13564,   229,   254,   265,    97,   163,   -52,   228,
   287,   nil,   282,   nil,   nil,   nil,   nil,   175,   nil,   151,
   nil,   154,   522,   179,   nil,   523,   -28,   nil,   -33,   nil,
   nil,   nil,   nil,   nil,  1114,   nil,   nil,   nil,   nil,   nil,
   nil, 13927,   nil,   nil,   nil,   nil,  4259,   535,   nil,   nil,
   836,   nil,   531, 14161,   nil,   542,   nil,   nil, 24307,   577,
   135,   170, 14403,   nil,   nil,   125,   584,     0,   nil, 14645,
 14766,   nil, 24352,   nil,   nil, 23325, 23385, 14887,   -31, 15008,
 15129, 15250,  1453,  1697,    87,   -52,   618,   619,   620,   621,
  2795,  2673,   552,  1819,  2063,  2185,  1575,   371,  1941,   715,
  2307,   488,  2429,   690,   938,   963,  2551, 24261,   206,   nil,
 15492,   nil,   nil, 15613,   564,   nil, 15734,   372,   nil,   nil,
   599,   nil,   nil,   nil,   nil, 15855,   nil,    80,   131,   603,
   571,   -28,   580,   683,   624,   nil,   625,   589,   nil,   nil,
   nil,   640, 16702,   597, 23739,   597,   642,   nil,   nil, 16944,
 17065, 17186, 24033, 24093, 24397, 17307,   724,   730,   617,   nil,
   nil, 17428,   nil,   nil, 17549, 24757,   nil,   211,   631,   nil,
   389,  2429,   730,   nil,   nil,  4015,    30,    52,   734,   742,
  3649,   nil, 17912, 23505, 23445,    -7,   nil,   340,   192,   314,
   nil,   839,   nil,    14, 18033,   nil,  1097,   nil,   nil,   nil,
 18154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   125,   nil,   nil,   nil,   631,   nil,   nil, 18396,   650,
   nil, 18630, 18751,   nil,   -80, 18872, 18993,   667,   nil,   nil,
   nil, 19114,   678,   nil, 19235,    85,    90,   715,   488,   683,
  1205, 19477,   nil, 19598,   nil,   nil, 19719,   671,   nil,   715,
 20082,   nil,   721,   nil,   710,   nil,   nil,   nil,   nil,   nil,
   175, 23847,   -64,   683, 20324,   nil,   736,   nil,   nil,   nil,
   nil,   737,   738, 23799, 23625, 20566,   nil,   -66,   nil,   741,
   116,     1,   748,   193,   539,   756, 24937,   780,   784,   -30,
   835, 21292,   nil,   764, 21534,   nil,   nil, 21655,   nil,   nil,
   nil,   512,   nil,   846,   nil,   nil,   nil,   nil,   nil,   852,
   nil,   853, 22139,   771,    -5,    21,    10,    -4, 22381,   nil,
   632,   nil, 23565, 22502, 23913,   nil,   nil,   nil,   365,   204,
  2551,  4625,   432,   243,   745,   746,   748,   nil,   nil,   nil,
   nil,   nil,   745,   nil,   nil,   nil,   nil,   827,   nil,   nil,
   828, 22975,   -33,   701,  4137,   nil,   nil,   nil,   nil,   nil,
 24847,   753,  5473,  5594,   nil, 24577,   nil, 24667,   nil,   nil,
 24892,   nil, 24442,  5715,  5836,  5957,   198, 24532,   nil,   755,
  1084,  6199,   nil,   776,  3527,   767,   nil,  6562,   770,   nil,
  6804,   nil,  6925,   789,   nil,   832,  2063,  2185,   nil,   nil,
   837,   841,    34,   904,   712,   nil,   925,   nil,  3283,   819,
   861,   nil,   nil,   nil, 24622,   946,   nil,  8006,   947,  3771,
  3893,   nil,   nil,   835,    45,  8369,    -6,    53,   334,   836,
   nil,   878,  4503,  8611,   nil,   340,   962,   966,   853,   nil,
  1382,   nil,   296,   nil,   nil,    87,  8853,   nil,   nil,   nil,
   889,   nil,   nil,   nil,   nil,   nil,   877,   nil,   nil, 24802,
  9095,  9216,   491,   545,   936,   569,   864,   901,   nil,   nil,
   990,   nil,  9579,   nil,  3039,   875,   nil,  9821,   877, 10063,
   nil,   nil,   894,   996,   932,   nil,  2673,   nil,   nil,   -11,
 10305,   nil,   nil,   nil,    21,   nil,  1014,  1026, 10426,  2307,
   nil,   nil,   nil,  1033,   347,   nil,   nil,   nil,   957,   921,
   922,   nil,   nil,   924,   921,   nil,   nil,  1134,   nil,   nil,
   nil, 10902,  1205, 11023, 23205, 23145,   485,   957, 11144,   nil,
 23673,   945,   nil, 11265,   931,   nil, 11386,   934,   nil,   nil,
   nil,   nil,  1819,   nil,  1697,   nil,   nil, 11507,    12,  1453,
   nil,   nil,  1331,   nil,   211,   nil,   nil,   nil,  4747,   nil,
   946,   976,   982,   314,   308,   357,   629, 11870,   nil,   nil,
   nil, 11991,   955,   nil, 12112,   nil,  1075,   500,   nil,   nil,
   nil,   nil,  1074,  1080,   966,  1084,   999, 12596,   286,   nil,
   971,   nil, 12838,   972,   nil,   nil,   nil,   nil,   nil,   nil,
 12959,   nil,   nil, 13080,   nil,   nil,   -89,   nil ]

racc_action_default = [
    -1,  -521,  -520,  -521,    -2,  -509,    -5,    -6,  -521,  -521,
  -521,   -20,  -521,  -521,  -521,  -521,  -521,  -274,   -34,   -35,
  -521,  -521,   -40,   -42,   -43,  -287,  -324,  -325,   -47,  -252,
  -372,  -290,   -61,  -520,   -65,   -70,   -71,  -521,  -450,  -521,
  -521,  -521,  -521,  -521,  -511,  -217,  -267,  -268,  -269,  -270,
  -271,  -272,  -273,  -499,  -276,  -521,  -520,  -285,  -293,  -521,
  -521,  -297,  -300,  -509,  -521,  -309,  -316,  -521,  -326,  -327,
  -395,  -396,  -397,  -398,  -399,  -520,  -402,  -520,  -520,  -520,
  -520,  -520,  -429,  -435,  -436,  -439,  -440,  -441,  -442,  -443,
  -444,  -445,  -446,  -447,  -448,  -449,  -452,  -453,   928,    -4,
  -510,  -516,  -517,  -518,  -521,  -521,  -521,  -521,  -521,    -8,
    -9,  -521,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,   -14,  -105,  -521,
  -520,  -521,  -521,  -521,  -520,  -521,  -521,  -521,  -521,  -521,
   -38,  -521,  -450,  -521,  -274,  -521,  -521,  -520,   -39,  -209,
  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,
  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,
  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -360,  -363,   -44,
  -218,  -231,  -520,  -520,  -521,  -239,  -521,  -262,  -287,  -324,
  -325,  -494,   -45,   -46,  -521,  -521,   -53,  -521,  -292,  -521,
  -373,  -376,   -59,  -520,  -371,   -60,  -521,   -61,  -520,  -521,
  -521,   -66,   -68,  -520,   -75,  -521,  -521,   -82,  -290,  -511,
  -366,  -328,  -372,  -521,   -69,   -73,  -282,  -437,  -438,  -521,
  -194,  -195,  -210,  -521,  -512,  -520,  -278,  -219,  -511,  -513,
  -513,  -521,  -521,  -520,  -294,   -41,  -521,  -521,  -521,  -521,
  -509,  -521,  -510,  -450,  -521,  -521,  -274,  -521,  -340,  -341,
  -521,  -312,  -521,   -96,   -97,  -134,  -135,  -151,  -156,  -163,
  -166,  -319,  -521,  -450,  -488,  -489,  -400,  -521,  -415,  -521,
  -417,  -521,  -521,  -521,  -407,  -521,  -521,  -413,  -521,  -428,
  -430,  -431,  -432,  -433,    -7,  -519,   -15,   -16,   -17,   -18,
   -19,  -521,   -11,   -12,   -13,  -106,  -520,  -521,   -23,   -31,
  -174,  -262,  -521,  -521,   -24,   -32,   -33,   -25,  -176,  -521,
  -500,  -501,  -520,  -502,  -503,  -500,  -252,  -501,  -370,  -505,
  -506,   -30,  -183,   -36,   -37,  -521,  -521,  -520,  -282,  -521,
  -521,  -521,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
  -206,  -207,  -208,  -211,  -212,  -213,  -214,  -521,  -520,  -232,
  -521,  -261,  -234,  -521,  -520,  -259,  -521,  -252,  -500,  -501,
  -252,   -50,   -54,  -253,  -254,  -255,  -367,  -520,  -520,  -521,
  -511,  -511,  -520,  -231,  -521,  -289,  -521,   -62,  -280,   -74,
   -67,  -521,  -520,  -521,  -521,   -81,  -521,  -437,  -438,  -521,
  -521,  -521,  -521,  -521,  -215,  -521,  -387,  -521,  -511,  -220,
  -221,  -515,  -514,  -223,  -515,  -511,  -284,  -513,  -521,  -491,
  -513,  -520,  -329,  -330,  -331,  -520,  -521,  -521,  -521,  -521,
  -520,  -379,  -520,  -521,  -521,  -282,  -306,   -91,   -92,  -521,
   -94,  -521,  -274,  -521,  -521,  -317,  -468,  -321,  -507,  -508,
  -521,  -401,  -416,  -419,  -420,  -422,  -403,  -418,  -404,  -405,
  -406,  -521,  -409,  -411,  -412,  -521,  -434,   -10,  -521,  -521,
   -22,  -521,  -521,  -266,  -283,  -521,  -521,   -55,  -229,  -230,
  -368,  -521,   -57,  -369,  -521,  -500,  -501,  -504,  -281,  -521,
  -174,  -521,  -356,  -521,  -358,  -361,  -521,  -520,  -260,  -263,
  -521,  -495,  -521,  -238,  -521,  -496,   -48,  -364,   -49,  -365,
  -520,   -40,  -521,  -520,  -521,  -251,  -521,  -257,  -374,  -377,
  -225,  -521,  -521,  -521,  -521,  -521,  -288,   -62,   -72,  -521,
  -500,  -501,  -520,   -78,   -80,  -521,  -182,  -192,  -193,  -521,
  -520,  -520,  -277,  -521,  -521,  -263,  -224,  -515,  -493,  -286,
  -492,  -520,  -332,  -520,  -298,  -333,  -334,  -335,  -301,  -521,
  -304,  -521,  -521,  -521,  -500,  -501,  -504,  -281,  -521,   -91,
   -92,   -93,  -521,  -520,  -521,  -310,  -454,  -455,  -521,  -313,
  -520,  -520,  -468,  -521,  -487,  -487,  -487,  -467,  -469,  -470,
  -471,  -472,  -473,  -474,  -477,  -479,  -480,  -482,  -483,  -484,
  -521,  -521,  -511,  -521,  -520,  -408,  -410,  -414,  -107,   -21,
  -175,  -264,  -521,  -521,   -27,  -178,   -28,  -179,   -56,   -29,
  -180,   -58,  -181,  -521,  -521,  -521,  -283,  -216,  -342,  -344,
  -354,  -521,  -357,  -521,  -520,  -520,  -236,  -521,  -520,   -51,
  -521,  -244,  -521,  -520,  -256,  -521,  -520,  -520,  -226,  -227,
  -520,  -520,  -511,  -521,   -76,  -291,  -520,  -338,  -520,  -388,
  -520,  -389,  -390,  -279,  -511,  -521,  -336,  -521,  -521,  -520,
  -520,  -303,  -305,  -381,  -521,  -521,  -283,  -521,   -91,   -92,
   -95,  -521,  -520,  -521,  -457,  -521,  -521,  -521,  -511,  -459,
  -521,  -463,  -521,  -465,  -466,  -521,  -521,  -481,  -485,  -322,
  -521,  -421,  -424,  -425,  -426,  -427,  -521,  -265,   -26,  -177,
  -521,  -345,   -83,  -521,  -521,   -90,  -353,  -521,  -355,  -359,
  -521,  -233,  -521,  -235,  -520,  -520,  -241,  -521,  -520,  -521,
  -250,  -258,  -521,  -521,  -521,    -3,  -520,  -394,  -339,  -521,
  -521,  -392,  -222,  -295,  -521,  -296,  -521,  -521,  -521,  -520,
  -383,  -307,  -283,  -521,  -521,  -314,  -318,  -320,  -521,  -487,
  -487,  -475,  -486,  -487,  -521,  -478,  -476,  -468,  -490,  -423,
  -343,  -521,  -350,  -520,  -521,  -521,   -89,  -521,  -521,  -362,
  -520,  -521,  -240,  -521,  -520,  -246,  -521,  -520,  -375,  -378,
  -228,  -393,  -520,  -391,  -520,  -299,  -302,  -521,  -520,  -520,
  -311,  -456,  -520,  -458,  -521,  -461,  -462,  -464,  -520,  -346,
  -349,  -521,  -521,   -85,   -87,   -86,   -88,  -521,  -352,  -237,
   -52,  -521,  -520,  -242,  -521,  -245,  -387,  -520,  -382,  -380,
  -384,  -385,  -521,  -521,  -487,  -521,  -521,  -521,   -84,  -351,
  -520,  -247,  -521,  -520,  -386,  -337,  -308,  -315,  -460,  -323,
  -521,  -348,  -243,  -521,  -248,  -347,  -520,  -249 ]

clist = [
'38,271,115,115,610,331,38,302,200,499,118,118,477,110,188,281,281,451',
'103,350,491,495,657,241,241,241,651,243,243,243,99,38,274,274,735,242',
'242,242,571,269,264,120,120,296,284,281,442,305,305,208,577,305,835',
'579,298,522,109,369,376,673,115,532,313,624,628,333,726,267,245,245',
'245,565,674,293,115,349,103,382,386,738,306,307,641,830,310,833,753',
'758,311,571,588,589,305,305,305,305,829,513,38,515,239,252,253,339,341',
'831,38,348,520,531,2,256,262,265,805,100,187,319,361,761,763,764,189',
'580,794,356,357,358,359,538,587,480,483,443,586,715,437,440,334,488',
'304,317,645,332,517,379,295,478,354,303,308,739,309,740,638,869,360',
'320,657,752,514,755,872,322,835,650,516,671,837,699,703,428,704,447',
'716,448,717,744,899,632,730,809,336,337,343,16,393,394,38,390,1,16,298',
'346,771,,629,904,,,,372,372,201,201,38,,,201,201,201,,,,,750,16,275',
'275,368,374,377,,709,,391,,,,,,,,,,,,,201,201,,,201,201,,,201,314,,676',
',,,281,13,241,,,,243,13,453,,,241,243,38,242,243,446,274,38,,452,456',
',242,382,386,461,,460,,16,,13,,201,201,201,201,16,264,38,875,876,305',
'305,877,,245,281,267,281,,490,245,267,466,245,915,,571,487,821,,318',
'571,333,618,333,,620,103,900,,,479,,496,497,,444,577,579,498,,688,450',
',,454,691,657,,,605,878,559,722,,,13,,115,605,,,,,13,,118,,38,537,,756',
'757,918,,,,16,201,201,201,201,,,201,201,201,,,,605,,,390,16,,,120,,298',
'553,,,432,,,,,,,,,,,,,,599,,,,,,,,,,,914,,,,,,,,567,296,,,,,,17,201',
',13,,,17,201,583,,201,,16,,633,,275,16,390,819,13,298,571,,609,547,',
'390,,552,823,17,277,277,,,720,721,731,16,591,592,,,,,,,,585,38,,201',
'201,38,,,,390,38,,298,316,649,511,,511,,613,672,625,625,,,,616,,,571',
',576,13,,578,862,605,13,646,,864,,698,115,,,,,,17,,118,,,678,,281,17',
',13,,16,,,,,,,,,,,,274,,,,,901,,,,120,,,684,686,,,,,689,201,,,,,,,,',
'903,573,,,723,751,905,,567,,,,,,,,,,,,769,,,,,,553,,,13,,,372,,,,,305',
'17,201,,,,,,,390,,,,,,298,743,,17,201,,,38,38,,,,,,,,,201,747,,754,',
',115,,759,,,,,,38,,16,,,,16,,,281,281,16,,201,,,,,,,,,,,,201,782,782',
',770,38,201,,17,,,,277,17,778,798,,38,38,,,,,795,,,706,,305,38,605,201',
'201,,,17,,201,,,38,38,711,,305,,13,,,275,13,840,,38,804,13,796,,,,512',
'814,512,625,,281,812,,,,,825,,,,,,824,,,,201,274,,,,,,,,828,,,,281,38',
'4,882,,,,,,,,,17,38,,,,782,,,,,,,,,38,,,,201,281,281,270,,201,,,281',
',,,16,16,,,871,390,782,782,298,,,,,782,,,,,,,,,892,,16,,,38,791,38,',
'793,,201,38,281,800,38,,,,,,38,,,,,,,783,783,782,,16,281,,,,,,,,,,,16',
'16,281,13,13,,782,,,,,,16,,,,,,,782,,201,,16,16,,,13,,17,,,,17,,,16',
'201,17,,,,,,15,,,,,,15,,852,786,788,855,,13,,,,,,,,275,,,,13,13,,,,',
'15,,,16,,,13,367,,,,,,,,16,,13,13,783,,,,,270,,277,,16,,13,,889,,,,893',
',,895,,,,,,,,,,,783,783,201,,,,,783,,,,,,,,,,15,,,,16,13,16,911,15,',
',16,,,16,,,13,270,,16,863,,270,,922,,,924,783,13,,,,,,,,,,,927,,,,,17',
'17,,783,,,879,880,,,,,,888,,,783,,,,,,,775,17,,,13,,13,,,,,13,,,13,',
',,,,13,15,,,,,,785,785,909,,17,,,,,,,15,,,,,17,17,,,539,,921,,,,,,17',
',,,,,,925,,,209,17,17,,240,240,240,,,,,,,,17,,,,,,290,291,292,,,,,,',
',,,,,15,240,,,,15,,,,277,,,,,,,,,,,,,17,,,,,15,,,,,,,17,,,,785,,,,,',
',,,17,,,,,,,,,,,,,,,,,,,,,,785,785,,,621,,,785,623,,,,,631,,,,,,,,17',
',17,,,,,17,15,,17,,,,,,17,,,,,,,,,785,,,,,,,,,,,,,,,,,,,,785,370,240',
'378,240,,,392,,,,,,785,,,,,,,209,402,403,404,405,406,407,408,409,410',
'411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427',
',,,,,,,240,,240,,,,,,,,,,,240,,,,,,240,,,240,,,,,,,,,,,,15,,,,15,,,',
',15,,,,,,474,,,,,,,,485,,240,,,,,,,,776,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',790,,,,,,,,,,,,802,803,,,,,,,,,,,808,,,,,,,,240,,,816,817,,,,,,,,,',
',,,,,,,,,,240,,392,560,378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,240,851,,240',
',,240,15,15,,,,,861,,581,,,,,,,,,,,868,,,,,15,240,,,,,,,606,607,608',
',,,,,,,,,240,,,240,,,,,,,15,,,,,,,,896,,897,240,15,15,,902,,,,,,,,,15',
',,,,,,,,,,15,15,,,,,,,,,,,,15,,680,240,,,685,687,,,,,690,,,692,,,,,',
',697,,,,,240,,,,240,,,29,,,,,,29,,15,,,240,,,,,,,29,29,15,,240,29,29',
'29,,,,,,29,,15,,,371,375,240,,,734,,,240,,,,,,,,,29,29,,,29,29,240,',
'29,,,,,,,,,240,,,,,,15,,15,,,,,15,,,15,,,434,,435,15,,,,,,29,,,,29,29',
'29,29,29,,,240,779,,,,,,,,,,685,687,690,,,,,,,297,,,,,240,,,240,,240',
',,,,,,,,338,,340,340,344,347,340,,,,,,,,,,,,,,,,,,240,,,,,,,,,,,,,,',
',29,29,29,29,29,240,,29,29,29,,,,,,,,29,,779,,,,,,,,,,,543,850,,,,,240',
',240,,,,,,,,,,,,,,,,,,,240,,,,,,,,,,29,,,,,,29,,,29,,29,297,,,240,29',
',,,569,,,572,,240,575,,240,,,,,,,582,,,29,240,,,,,,,,,,,,29,29,,,,,',
',,431,431,,240,,,240,,,,,615,,,572,,,,,,,449,,,240,,,,,,,,,,,240,,,',
',,,,,,,,,,29,,,,,,,,,,,,489,,,,,,,,,,,681,,,,,,,,29,,,,,,,,,,,,,,,,705',
',,,708,,,,,,,,,,,,,,713,,,,,,,,,,,569,,,29,,,,,,,,,,,,548,729,,,,29',
',615,,,,,,,,297,,,29,,,,371,,,,,,,,,,,,29,,,,29,,,,,29,,29,562,,,,,',
'431,,,548,,29,548,,,,,29,,562,562,,,,431,,777,,,,,,,,297,,,,,,,,29,29',
',,,,29,,,572,,,,,572,,,,,,,,,,,,,,,,,,297,,,,,,,,,,,,,,,820,,,29,,,',
',,,,,,,,,,,,,,836,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,431,29,854,,857,,,,29',
'29,,,,562,,,431,,,,,,,615,,,,,,,,,29,,,548,,,,,,29,,727,732,,,,,,,,',
',727,,727,,569,,,572,29,,,,,,,,,,898,,29,29,297,,,,,,,,,,29,,,,,,,,',
'29,910,29,29,913,,,,,,,,,,,29,29,,,,,,572,,,,,,,,,,,926,,,,,,,,,,431',
',,431,,,,,431,,,,,,29,548,548,,,,,807,,,,811,29,,,,,,,,,,,,,29,,,,,',
',,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,29,,29,,,,,29,431,,29,431,,,',
',29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,297,,,,,,,431,,,,431,,,431',
',,,,,,,,,,727,,,,,,,,,,,,,,,,,,,,,,,,431,,,,,727,,,,,,,,,,,,,431,,,431',
',,,,,,,,,,,,431' ]
        racc_goto_table = arr = ::Array.new(2727, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'45,43,49,49,5,48,45,21,25,82,52,52,3,13,13,56,56,32,85,48,79,79,143',
'29,29,29,86,59,59,59,9,45,45,45,80,57,57,57,149,41,60,53,53,25,44,56',
'35,25,25,17,61,25,145,61,29,131,11,23,23,134,49,131,45,81,81,45,6,40',
'63,63,63,36,135,55,49,136,85,33,33,6,15,15,46,141,15,141,137,138,9,149',
'36,36,25,25,25,25,140,47,45,47,31,31,31,128,128,144,45,128,148,130,4',
'34,34,34,7,12,14,18,26,142,142,142,27,37,38,15,15,15,15,54,64,58,58',
'65,67,68,33,33,75,76,77,83,84,87,88,21,89,90,11,91,92,93,94,95,96,97',
'11,98,143,99,100,101,102,103,145,104,105,106,107,108,109,111,112,115',
'116,117,118,119,120,121,122,123,126,127,129,20,25,25,45,49,1,20,29,132',
'133,,82,141,,,,57,57,20,20,45,,,20,20,20,,,,,46,20,20,20,17,17,17,,36',
',17,,,,,,,,,,,,,20,20,,,20,20,,,20,20,,131,,,,56,16,29,,,,59,16,29,',
',29,59,45,57,59,60,45,45,,57,41,,57,33,33,41,,44,,20,,16,,20,20,20,20',
'20,60,45,142,142,25,25,142,,63,56,40,56,,59,63,40,55,63,80,,149,57,81',
',16,149,45,58,45,,58,85,6,,,55,,15,15,,31,61,61,9,,35,31,,,31,35,143',
',,33,86,21,32,,,16,,49,33,,,,,16,,52,,45,13,,3,3,142,,,,20,20,20,20',
'20,,,20,20,20,,,,33,,,49,20,,,53,,29,60,,,62,,,,,,,,,,,,,,21,,,,,,,',
',,,5,,,,,,,,59,25,,,,,,22,20,,16,,,22,20,59,,20,,20,,21,,20,20,49,79',
'16,29,149,,25,34,,49,,34,3,22,22,22,,,33,33,23,20,55,55,,,,,,,,63,45',
',20,20,45,,,,49,45,,29,22,25,20,,20,,55,25,85,85,,,,55,,,149,,34,16',
',34,79,33,16,85,,79,,43,49,,,,,,22,,52,,,13,,56,22,,16,,20,,,,,,,,,',
',,45,,,,,82,,,,53,,,17,17,,,,,17,20,,,,,,,,,3,62,,,29,21,3,,59,,,,,',
',,,,,,48,,,,,,60,,,16,,,57,,,,,25,22,20,,,,,,,49,,,,,,29,57,,22,20,',
',45,45,,,,,,,,,20,15,,85,,,49,,85,,,,,,45,,20,,,,20,,,56,56,20,,20,',
',,,,,,,,,,20,45,45,,55,45,20,,22,,,,22,22,17,59,,45,45,,,,,57,,,62,',
'25,45,33,20,20,,,22,,20,,,45,45,62,,25,,16,,,20,16,43,,45,55,16,63,',
',,22,15,22,85,,56,55,,,,,85,,,,,,15,,,,20,45,,,,,,,,55,,,,56,45,2,21',
',,,,,,,,22,45,,,,45,,,,,,,,,45,,,,20,56,56,2,,20,,,56,,,,20,20,,,85',
'49,45,45,29,,,,,45,,,,,,,,,59,,20,,,45,62,45,,62,,20,45,56,62,45,,,',
',,45,,,,,,,20,20,45,,20,56,,,,,,,,,,,20,20,56,16,16,,45,,,,,,20,,,,',
',,45,,20,,20,20,,,16,,22,,,,22,,,20,20,22,,,,,,19,,,,,,19,,62,16,16',
'62,,16,,,,,,,,20,,,,16,16,,,,,19,,,20,,,16,2,,,,,,,,20,,16,16,20,,,',
',2,,22,,20,,16,,62,,,,62,,,62,,,,,,,,,,,20,20,20,,,,,20,,,,,,,,,,19',
',,,20,16,20,62,19,,,20,,,20,,,16,2,,20,16,,2,,62,,,62,20,16,,,,,,,,',
',,62,,,,,22,22,,20,,,16,16,,,,,,16,,,20,,,,,,,22,22,,,16,,16,,,,,16',
',,16,,,,,,16,19,,,,,,22,22,16,,22,,,,,,,19,,,,,22,22,,,2,,16,,,,,,22',
',,,,,,16,,,28,22,22,,28,28,28,,,,,,,,22,,,,,,28,28,28,,,,,,,,,,,,19',
'28,,,,19,,,,22,,,,,,,,,,,,,22,,,,,19,,,,,,,22,,,,22,,,,,,,,,22,,,,,',
',,,,,,,,,,,,,,,,22,22,,,2,,,22,2,,,,,2,,,,,,,,22,,22,,,,,22,19,,22,',
',,,,22,,,,,,,,,22,,,,,,,,,,,,,,,,,,,,22,28,28,28,28,,,28,,,,,,22,,,',
',,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,,,,,,,,28,,28,,,,,,,,,,,28,,,,,,28,,,28,,,,,,,,,,,,19',
',,,19,,,,,19,,,,,,28,,,,,,,,28,,28,,,,,,,,2,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,2,,,,,,,,,,,,2,2,,,,,,,,,,,2,,,,,,,,28,,,2,2,,,,,,,,,,,,,,,,,,',
',28,,28,28,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,2,,28,,,28,19,19,,,,,2',
',28,,,,,,,,,,,2,,,,,19,28,,,,,,,28,28,28,,,,,,,,,,28,,,28,,,,,,,19,',
',,,,,,2,,2,28,19,19,,2,,,,,,,,,19,,,,,,,,,,,19,19,,,,,,,,,,,,19,,28',
'28,,,28,28,,,,,28,,,28,,,,,,,28,,,,,28,,,,28,,,39,,,,,,39,,19,,,28,',
',,,,,39,39,19,,28,39,39,39,,,,,,39,,19,,,24,24,28,,,28,,,28,,,,,,,,',
'39,39,,,39,39,28,,39,,,,,,,,,28,,,,,,19,,19,,,,,19,,,19,,,24,,24,19',
',,,,,39,,,,39,39,39,39,39,,,28,28,,,,,,,,,,28,28,28,,,,,,,10,,,,,28',
',,28,,28,,,,,,,,,10,,10,10,10,10,10,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,',
',,,39,39,39,39,39,28,,39,39,39,,,,,,,,39,,28,,,,,,,,,,,24,28,,,,,28',
',28,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,39,,,,,,39,,,39,,39,10,,,28,39,,,',
'24,,,24,,28,24,,28,,,,,,,24,,,39,28,,,,,,,,,,,,39,39,,,,,,,,10,10,,28',
',,28,,,,,24,,,24,,,,,,,10,,,28,,,,,,,,,,,28,,,,,,,,,,,,,,39,,,,,,,,',
',,,10,,,,,,,,,,,24,,,,,,,,39,,,,,,,,,,,,,,,,24,,,,24,,,,,,,,,,,,,,24',
',,,,,,,,,,24,,,39,,,,,,,,,,,,10,24,,,,39,,24,,,,,,,,10,,,39,,,,24,,',
',,,,,,,,,39,,,,39,,,,,39,,39,10,,,,,,10,,,10,,39,10,,,,,39,,10,10,,',
',10,,24,,,,,,,,10,,,,,,,,39,39,,,,,39,,,24,,,,,24,,,,,,,,,,,,,,,,,,10',
',,,,,,,,,,,,,,24,,,39,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,39',
',,,10,39,24,,24,,,,39,39,,,,10,,,10,,,,,,,24,,,,,,,,,39,,,10,,,,,,39',
',10,10,,,,,,,,,,10,,10,,24,,,24,39,,,,,,,,,,24,,39,39,10,,,,,,,,,,39',
',,,,,,,,39,24,39,39,24,,,,,,,,,,,39,39,,,,,,24,,,,,,,,,,,24,,,,,,,,',
',10,,,10,,,,,10,,,,,,39,10,10,,,,,10,,,,10,39,,,,,,,,,,,,,39,,,,,,,',
',,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,39,,39,,,,,39,10,,39,10,,,,,39',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,10,,,,10,,,10,,,,,,',
',,,,10,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,10,,,,,,,,,,,,,10,,,10,,,,,,,,',
',,,,10' ]
        racc_goto_check = arr = ::Array.new(2727, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   190,   791,  -283,   110,  -472,  -544,  -612,   nil,    25,
  1800,    48,   110,     4,   106,    21,   252,    28,    53,   941,
   183,   -49,   437,  -134,  1572,   -12,     8,   111,  1154,    -2,
   nil,    75,  -246,  -118,    82,  -210,  -357,  -318,  -585,  1725,
    34,     6,   nil,   -33,     9,    -2,  -427,  -223,   -62,    -7,
   nil,   nil,     1,    32,  -236,    29,   -19,    10,  -168,     2,
    10,  -387,   156,    43,  -315,  -124,   nil,  -311,  -452,   nil,
   nil,   nil,   nil,   nil,   nil,    71,  -164,    82,   nil,  -286,
  -587,  -433,  -302,    77,  -371,    13,  -490,    76,  -188,    92,
  -149,    92,    89,  -473,    90,  -475,  -352,  -666,    92,  -486,
  -161,  -488,  -663,    97,  -350,  -165,  -350,  -601,  -394,  -393,
   nil,   -66,  -393,   nil,   nil,   -87,  -414,   -86,  -413,  -455,
  -690,  -322,  -431,  -549,   nil,   nil,   109,   108,    26,   105,
  -234,  -282,   113,  -479,  -465,  -453,    -6,  -561,  -565,   nil,
  -664,  -677,  -535,  -494,  -655,  -710,   nil,   nil,  -227,  -395 ]

racc_goto_default = [
   nil,   nil,   476,   nil,   nil,   nil,   736,   nil,     5,   nil,
     6,     7,   312,   nil,   nil,   nil,   205,    19,    14,   206,
   289,   nil,   204,   nil,   247,    18,   nil,   nil,    22,    23,
    24,   nil,    28,   602,   nil,   nil,   nil,   nil,   nil,   280,
    32,   nil,    34,    37,    36,   202,   510,   nil,   117,   384,
   116,   119,    71,    72,   nil,   nil,    45,   299,   nil,   300,
   549,   550,   429,   568,   nil,   nil,   257,   nil,   nil,    46,
    47,    48,    49,    50,    51,    52,   nil,   258,    58,   nil,
   nil,   nil,   nil,   nil,   nil,   492,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   238,   nil,   nil,   388,   259,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    70,    73,    74,   nil,   nil,   nil,
   nil,   527,   nil,   nil,   nil,   nil,   nil,   nil,   653,   654,
   655,   656,   nil,   832,   663,   664,   667,   670,   nil,   251 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 145, :_reduce_103,
  1, 145, :_reduce_none,
  1, 146, :_reduce_105,
  0, 186, :_reduce_106,
  4, 146, :_reduce_107,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_174,
  5, 160, :_reduce_175,
  3, 160, :_reduce_176,
  6, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  5, 160, :_reduce_181,
  4, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  3, 160, :_reduce_191,
  4, 160, :_reduce_192,
  4, 160, :_reduce_193,
  2, 160, :_reduce_194,
  2, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  3, 160, :_reduce_208,
  2, 160, :_reduce_209,
  2, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  3, 160, :_reduce_215,
  5, 160, :_reduce_216,
  1, 160, :_reduce_none,
  1, 156, :_reduce_218,
  1, 153, :_reduce_none,
  2, 153, :_reduce_220,
  2, 153, :_reduce_221,
  5, 153, :_reduce_222,
  2, 153, :_reduce_223,
  3, 153, :_reduce_224,
  3, 192, :_reduce_225,
  4, 192, :_reduce_226,
  4, 192, :_reduce_227,
  6, 192, :_reduce_228,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 163, :_reduce_231,
  2, 163, :_reduce_232,
  5, 163, :_reduce_233,
  2, 163, :_reduce_234,
  5, 163, :_reduce_235,
  4, 163, :_reduce_236,
  7, 163, :_reduce_237,
  3, 163, :_reduce_238,
  1, 163, :_reduce_none,
  4, 196, :_reduce_240,
  3, 196, :_reduce_241,
  5, 196, :_reduce_242,
  7, 196, :_reduce_243,
  2, 196, :_reduce_244,
  5, 196, :_reduce_245,
  4, 196, :_reduce_246,
  6, 196, :_reduce_247,
  7, 196, :_reduce_248,
  9, 196, :_reduce_249,
  3, 196, :_reduce_250,
  1, 196, :_reduce_none,
  0, 198, :_reduce_252,
  2, 166, :_reduce_253,
  1, 197, :_reduce_none,
  0, 199, :_reduce_255,
  3, 197, :_reduce_256,
  0, 200, :_reduce_257,
  4, 197, :_reduce_258,
  2, 195, :_reduce_259,
  2, 194, :_reduce_260,
  1, 194, :_reduce_none,
  1, 189, :_reduce_262,
  3, 189, :_reduce_263,
  3, 155, :_reduce_264,
  4, 155, :_reduce_265,
  2, 155, :_reduce_266,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_275,
  0, 221, :_reduce_276,
  4, 188, :_reduce_277,
  0, 222, :_reduce_278,
  5, 188, :_reduce_279,
  3, 188, :_reduce_280,
  3, 188, :_reduce_281,
  2, 188, :_reduce_282,
  4, 188, :_reduce_283,
  3, 188, :_reduce_284,
  0, 223, :_reduce_285,
  4, 188, :_reduce_286,
  1, 188, :_reduce_287,
  4, 188, :_reduce_288,
  3, 188, :_reduce_289,
  1, 188, :_reduce_290,
  5, 188, :_reduce_291,
  2, 188, :_reduce_292,
  1, 188, :_reduce_none,
  2, 188, :_reduce_294,
  6, 188, :_reduce_295,
  6, 188, :_reduce_296,
  0, 224, :_reduce_297,
  0, 225, :_reduce_298,
  7, 188, :_reduce_299,
  0, 226, :_reduce_300,
  0, 227, :_reduce_301,
  7, 188, :_reduce_302,
  5, 188, :_reduce_303,
  4, 188, :_reduce_304,
  5, 188, :_reduce_305,
  0, 228, :_reduce_306,
  0, 229, :_reduce_307,
  9, 188, :_reduce_308,
  0, 230, :_reduce_309,
  0, 231, :_reduce_310,
  7, 188, :_reduce_311,
  0, 232, :_reduce_312,
  0, 233, :_reduce_313,
  0, 234, :_reduce_314,
  9, 188, :_reduce_315,
  0, 235, :_reduce_316,
  0, 236, :_reduce_317,
  6, 188, :_reduce_318,
  0, 237, :_reduce_319,
  6, 188, :_reduce_320,
  0, 238, :_reduce_321,
  0, 239, :_reduce_322,
  9, 188, :_reduce_323,
  1, 188, :_reduce_324,
  1, 188, :_reduce_325,
  1, 188, :_reduce_326,
  1, 188, :_reduce_327,
  1, 152, :_reduce_328,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  2, 211, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 212, :_reduce_none,
  5, 212, :_reduce_337,
  1, 138, :_reduce_none,
  2, 138, :_reduce_339,
  1, 215, :_reduce_none,
  1, 215, :_reduce_341,
  1, 240, :_reduce_342,
  3, 240, :_reduce_343,
  1, 241, :_reduce_344,
  2, 241, :_reduce_345,
  4, 241, :_reduce_346,
  7, 241, :_reduce_347,
  6, 241, :_reduce_348,
  4, 241, :_reduce_349,
  3, 241, :_reduce_350,
  5, 241, :_reduce_351,
  4, 241, :_reduce_352,
  2, 241, :_reduce_353,
  1, 241, :_reduce_354,
  2, 241, :_reduce_355,
  1, 168, :_reduce_356,
  2, 168, :_reduce_357,
  1, 168, :_reduce_358,
  3, 168, :_reduce_359,
  0, 243, :_reduce_360,
  0, 244, :_reduce_361,
  6, 242, :_reduce_362,
  2, 164, :_reduce_363,
  4, 164, :_reduce_364,
  4, 164, :_reduce_365,
  0, 246, :_reduce_366,
  3, 210, :_reduce_367,
  4, 210, :_reduce_368,
  4, 210, :_reduce_369,
  3, 210, :_reduce_370,
  2, 210, :_reduce_371,
  1, 210, :_reduce_372,
  0, 247, :_reduce_373,
  0, 248, :_reduce_374,
  6, 209, :_reduce_375,
  0, 249, :_reduce_376,
  0, 250, :_reduce_377,
  6, 209, :_reduce_378,
  0, 253, :_reduce_379,
  6, 214, :_reduce_380,
  1, 251, :_reduce_none,
  4, 251, :_reduce_382,
  2, 251, :_reduce_383,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  6, 137, :_reduce_386,
  0, 137, :_reduce_387,
  1, 254, :_reduce_388,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 255, :_reduce_391,
  1, 255, :_reduce_none,
  2, 139, :_reduce_393,
  1, 139, :_reduce_none,
  1, 201, :_reduce_395,
  1, 201, :_reduce_396,
  1, 201, :_reduce_none,
  1, 202, :_reduce_398,
  1, 257, :_reduce_none,
  2, 257, :_reduce_400,
  3, 258, :_reduce_401,
  1, 258, :_reduce_402,
  3, 203, :_reduce_403,
  3, 204, :_reduce_404,
  3, 205, :_reduce_405,
  3, 205, :_reduce_406,
  1, 261, :_reduce_407,
  3, 261, :_reduce_408,
  1, 262, :_reduce_none,
  2, 262, :_reduce_410,
  3, 206, :_reduce_411,
  3, 206, :_reduce_412,
  1, 264, :_reduce_413,
  3, 264, :_reduce_414,
  1, 259, :_reduce_415,
  2, 259, :_reduce_416,
  1, 260, :_reduce_417,
  2, 260, :_reduce_418,
  1, 263, :_reduce_419,
  0, 266, :_reduce_420,
  3, 263, :_reduce_421,
  0, 267, :_reduce_422,
  4, 263, :_reduce_423,
  1, 265, :_reduce_424,
  1, 265, :_reduce_425,
  1, 265, :_reduce_426,
  1, 265, :_reduce_none,
  2, 184, :_reduce_428,
  1, 184, :_reduce_429,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  3, 185, :_reduce_434,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  2, 256, :_reduce_437,
  2, 256, :_reduce_438,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_444,
  1, 177, :_reduce_445,
  1, 177, :_reduce_446,
  1, 177, :_reduce_447,
  1, 177, :_reduce_448,
  1, 177, :_reduce_449,
  1, 207, :_reduce_450,
  1, 151, :_reduce_451,
  1, 154, :_reduce_452,
  1, 154, :_reduce_453,
  1, 216, :_reduce_454,
  0, 269, :_reduce_455,
  4, 216, :_reduce_456,
  2, 216, :_reduce_457,
  4, 218, :_reduce_458,
  2, 218, :_reduce_459,
  6, 270, :_reduce_460,
  4, 270, :_reduce_461,
  4, 270, :_reduce_462,
  2, 270, :_reduce_463,
  4, 270, :_reduce_464,
  2, 270, :_reduce_465,
  2, 270, :_reduce_466,
  1, 270, :_reduce_467,
  0, 270, :_reduce_468,
  1, 276, :_reduce_469,
  1, 276, :_reduce_470,
  1, 276, :_reduce_471,
  1, 276, :_reduce_472,
  1, 276, :_reduce_473,
  1, 271, :_reduce_474,
  3, 271, :_reduce_475,
  3, 277, :_reduce_476,
  1, 272, :_reduce_477,
  3, 272, :_reduce_478,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  2, 273, :_reduce_481,
  1, 273, :_reduce_482,
  1, 279, :_reduce_none,
  1, 279, :_reduce_none,
  2, 275, :_reduce_485,
  2, 274, :_reduce_486,
  0, 274, :_reduce_487,
  1, 219, :_reduce_none,
  0, 280, :_reduce_489,
  5, 219, :_reduce_490,
  1, 208, :_reduce_491,
  2, 208, :_reduce_492,
  2, 208, :_reduce_493,
  1, 191, :_reduce_none,
  3, 191, :_reduce_495,
  3, 281, :_reduce_496,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 245, :_reduce_none,
  1, 245, :_reduce_none,
  1, 245, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  0, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 217, :_reduce_516,
  1, 217, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_519,
  0, 142, :_reduce_520 ]

racc_reduce_n = 521

racc_shift_n = 928

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tLBRACK2 => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tQWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAST_TOKEN => 129,
  :tEQL => 130,
  :tLOWEST => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "@28",
  "block_par",
  "block_var",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "when_args",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), 0, val[3]
                    
    result
end

def _reduce_22(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_45(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_46(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]

                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no2"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no3"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_80(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = :expr_end
                      result = sym
                    
    result
end

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_106(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

def _reduce_174(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_175(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_176(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2].sexp_type = :arglist if val[2]
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_180(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_183(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_194(val, _values, result)
                      if val[1].sexp_type == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@"
                      end
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", argl(val[2])))
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_209(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_210(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_214(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 217 omitted

def _reduce_218(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 219 omitted

def _reduce_220(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_226(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_227(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 229 omitted

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = arg_concat val[0], val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_237(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = arg_concat val[0], val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      args = list_prepend val[0], val[2]
                      result = arg_blk_pass args, val[3]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = arg_concat s(:array, val[0]), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_247(val, _values, result)
                      arg_value, _, args, _, assocs, opt_block = val
                      result = s(:array, arg_value).add_all(args)
                      result.add(s(:hash, *assocs.sexp_body))
                      result = arg_blk_pass result, opt_block
                    
    result
end

def _reduce_248(val, _values, result)
                      result = arg_concat s(:array, val[0]).add(s(:hash, *val[2].sexp_body)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = arg_blk_pass result, val[8]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_253(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_256(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_257(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_258(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_276(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_277(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_278(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_279(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_280(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_284(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter

                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_297(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_298(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_303(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_304(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_305(val, _values, result)
                      (_, line), _, _, elsebody, _ = val
                      result = new_case nil, elsebody, line
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_309(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_310(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (in_def || in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_313(val, _values, result)
                      result = in_def
                      self.in_def = false
                    
    result
end

def _reduce_314(val, _values, result)
                      result = in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        in_def or in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.in_def

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_322(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_323(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:array, clean_mlhs(val[0]))
                    
    result
end

def _reduce_343(val, _values, result)
                      result = list_append val[0], clean_mlhs(val[2])
                    
    result
end

def _reduce_344(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_345(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_346(val, _values, result)
                      result = block_var18 val[0], nil, val[3]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = block_var18 val[0], val[3], val[6]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = block_var18 val[0], s(:splat), val[5]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = block_var18 val[0], val[3], nil
                    
    result
end

def _reduce_350(val, _values, result)
                      result = block_var18 val[0], s(:splat), nil
                    
    result
end

def _reduce_351(val, _values, result)
                      result = block_var18 nil, val[1], val[4]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = block_var18 nil, s(:splat), val[3]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = block_var18 nil, val[1], nil
                    
    result
end

def _reduce_354(val, _values, result)
                      result = block_var18 nil, s(:splat), nil
                    
    result
end

def _reduce_355(val, _values, result)
                      result = block_var18 nil, nil, val[1]
                    
    result
end

def _reduce_356(val, _values, result)
 result = 0 
    result
end

def _reduce_357(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_358(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[1]
                      self.lexer.command_start = true
                    
    result
end

def _reduce_360(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_361(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_362(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_363(val, _values, result)
                      block_dup_check val[0], val[1]

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_366(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_367(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_368(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_371(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_373(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_374(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_375(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_376(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_377(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_378(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_379(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_380(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

# reduce 384 omitted

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_387(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_388(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 389 omitted

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_396(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_401(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0] << new_word_list_entry(val)
                    
    result
end

# reduce 409 omitted

def _reduce_410(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_412(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_414(val, _values, result)
                      result = val[0] << new_qword_list_entry(val)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_416(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_417(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_418(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_420(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_421(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_423(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_424(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_425(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_426(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 427 omitted

def _reduce_428(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_429(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

def _reduce_434(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 435 omitted

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_438(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

# reduce 441 omitted

# reduce 442 omitted

# reduce 443 omitted

def _reduce_444(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_445(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_446(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_447(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_448(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_449(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_450(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_451(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_452(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_453(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_454(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_455(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_457(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_461(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_462(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_463(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_464(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_465(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_466(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_467(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_468(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_469(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_470(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_471(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_472(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_473(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_475(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

# reduce 479 omitted

# reduce 480 omitted

def _reduce_481(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_482(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 483 omitted

# reduce 484 omitted

def _reduce_485(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_487(val, _values, result)
                      result = nil
                    
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_491(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_493(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_496(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
 yyerrok 
    result
end

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
 yyerrok 
    result
end

def _reduce_520(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby18Parser
