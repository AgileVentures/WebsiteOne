#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby19Parser < RubyParser::Legacy::RubyParser


require "ruby_parser/legacy/ruby_lexer"
require "ruby_parser/legacy/ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-561,281,69,70,71,12,57,-561,-561,-561,63,64,-561,-561,-561,67,-561',
'65,66,68,32,33,72,73,231,-561,-561,-561,-561,31,30,29,95,94,96,97,-561',
'-561,22,-561,-561,-561,-561,-561,11,47,551,13,99,98,100,89,56,91,90',
'92,717,93,101,102,-101,87,88,551,44,45,43,-561,-561,-561,-561,-561,-561',
'-561,-561,-561,-561,-561,-561,-561,-561,259,618,-561,-561,-561,42,751',
'-561,35,674,-561,58,59,-561,-561,60,-561,37,-561,592,-561,46,-561,-561',
'-561,-561,-561,-561,-561,23,-561,-561,-561,-100,85,79,81,82,83,84,-101',
'697,-106,80,86,-561,-561,-561,-561,-561,-561,551,62,-561,-103,259,-561',
'-561,-561,697,750,-104,-561,-561,-105,-561,-107,697,-102,777,79,557',
'-99,-492,-561,551,210,-104,80,107,-492,716,591,834,106,-561,-561,258',
'-561,-561,-561,-561,-561,-101,107,615,107,261,-101,106,107,106,-103',
'749,551,106,-102,-103,-104,207,208,604,211,207,208,673,-561,-561,-561',
'-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,-558,-101,-561',
'-561,-561,708,612,-490,-91,709,-561,107,258,-561,-490,-92,106,-97,-561',
'-495,-561,-102,-561,-561,-561,-561,-561,-561,-561,107,-561,-561,-561',
'603,106,107,-95,107,-557,-96,106,-98,106,-93,-484,-561,-561,-90,-94',
'-265,-561,-484,-484,-484,-103,-557,-484,-484,-484,107,-484,-104,882',
'211,106,629,-104,-99,-484,211,-484,-484,-484,211,629,-93,629,-94,207',
'208,-484,-484,-496,-484,-484,-484,-484,-484,107,-95,-102,-103,-496,106',
'599,-102,-103,259,688,628,535,534,533,-85,536,-263,434,833,628,-71,628',
'-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484',
'629,-484,-484,-484,-484,-100,-484,-484,-484,-91,-484,-561,579,-484,-484',
'-100,-484,-93,-484,506,-484,597,-484,-484,-484,-484,-484,-484,-484,-107',
'-484,-95,-484,579,628,590,688,-406,535,534,533,586,536,211,-415,-484',
'-484,-484,-484,-284,-484,921,-93,-484,-484,-93,-284,-284,-284,258,836',
'-93,-284,-284,-561,-284,-95,-106,838,-95,231,-561,-481,581,580,-95,-557',
'-561,386,-481,-561,841,727,388,387,-284,-284,842,-284,-284,-284,-284',
'-284,205,581,580,593,-415,-561,207,208,762,228,506,-415,-489,230,229',
'-555,579,107,848,-489,-415,798,106,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,-284,-284,-561,-415,-284,-284,-284,-98,611',
'-561,-554,562,-284,-107,-557,-284,579,-97,-561,584,-284,660,-284,-106',
'-284,-284,-284,-284,-284,-284,-284,579,-284,-484,-284,518,-561,579,517',
'561,-484,854,581,580,587,-555,-284,-284,-284,-484,-96,378,-284,-284',
'-284,-284,-105,-263,-284,-284,-284,735,-284,-481,-495,518,107,-555,520',
'-488,-481,106,-284,-284,-284,-554,-488,581,580,-481,207,208,-284,-284',
'-487,-284,-284,-284,-284,-284,606,-487,581,580,582,-277,858,-554,581',
'580,577,-486,-277,-92,518,107,-90,520,-486,-101,106,-277,-99,-284,-284',
'-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284,860,203',
'-284,-284,-284,-95,752,-284,204,861,-284,-104,252,-284,-284,211,-284',
'202,-284,253,-284,863,-284,-284,-284,-284,-284,-284,-284,866,-284,763',
'-284,535,534,533,688,536,535,534,533,518,536,868,520,-284,-284,-284',
'-284,-481,-284,605,-491,-284,-105,107,-481,-481,-481,-491,106,-481,-481',
'-481,688,-481,535,534,533,540,536,802,777,-481,684,-481,-481,-481,544',
'543,547,546,870,687,870,-481,-481,-332,-481,-481,-481,-481,-481,-93',
'-332,107,107,211,574,-102,106,106,540,-332,688,575,535,534,533,557,536',
'762,875,547,546,877,-481,-481,-481,-481,-481,-481,-481,-481,-481,-481',
'-481,-481,-481,-481,879,430,-481,-481,-481,521,-481,-481,431,231,-481',
'508,684,-481,-481,199,-481,432,-481,211,-481,874,-481,-481,-481,-481',
'-481,-481,-481,507,-481,538,-481,535,534,533,-493,536,110,111,112,113',
'114,-493,-494,-481,-481,-481,-481,-563,-481,-494,-493,-481,-481,503',
'-563,-563,-563,889,-494,-563,-563,-563,688,-563,535,534,533,540,536',
'207,208,890,-563,-563,-563,-563,544,543,547,546,207,208,211,-563,-563',
'497,-563,-563,-563,-563,-563,688,498,535,534,533,893,536,501,502,540',
'496,688,-266,535,534,533,261,536,802,777,547,546,211,-563,-563,-563',
'-563,-563,-563,-563,-563,-563,-563,-563,-563,-563,-563,264,684,-563',
'-563,-563,3,231,-563,307,308,-563,499,684,-563,-563,492,-563,900,-563',
'901,-563,687,-563,-563,-563,-563,-563,-563,-563,491,-563,-563,-563,688',
'904,535,534,533,228,536,211,906,230,229,509,-563,-563,-563,-563,-562',
'-563,510,907,-563,-70,211,-562,-562,-562,483,432,-562,-562,-562,763',
'-562,535,534,533,231,536,540,481,478,-562,-562,-562,-562,261,468,923',
'210,547,546,925,-562,-562,559,-562,-562,-562,-562,-562,688,560,535,534',
'533,926,536,436,228,540,558,435,230,229,226,227,930,433,544,543,547',
'546,934,-562,-562,-562,-562,-562,-562,-562,-562,-562,-562,-562,-562',
'-562,-562,937,684,-562,-562,-562,-285,939,-562,870,870,-562,944,-285',
'-562,-562,945,-562,389,-562,870,-562,-285,-562,-562,-562,-562,-562,-562',
'-562,870,-562,-562,-562,688,923,535,534,533,950,536,952,870,231,870',
'712,-562,-562,-562,-562,-278,-562,711,870,-562,956,923,-278,-278,-278',
'384,713,-278,-278,-278,538,-278,535,534,533,368,536,540,365,341,228',
'-278,-278,-278,230,229,226,227,547,546,211,-278,-278,306,-278,-278,-278',
'-278,-278,688,305,535,534,533,666,536,250,103,540,721,688,206,535,534',
'533,201,536,544,543,547,546,923,-278,-278,-278,-278,-278,-278,-278,-278',
'-278,-278,-278,-278,-278,-278,980,684,-278,-278,-278,981,982,-278,984',
'870,-278,870,684,-278,-278,870,-278,-558,-278,-557,-278,468,-278,-278',
'-278,-278,-278,-278,-278,468,-278,688,-278,535,534,533,-285,536,110',
'111,112,113,114,-285,712,-278,-278,-278,-278,736,-278,943,-285,-278',
'281,69,70,71,12,57,713,825,826,63,64,827,101,102,67,540,65,66,68,32',
'33,72,73,-264,730,211,547,546,31,30,29,95,94,96,97,729,846,22,535,534',
'533,754,536,11,47,481,13,99,98,100,89,56,91,90,92,700,93,101,102,483',
'87,88,557,44,45,43,693,688,660,535,534,533,688,536,535,534,533,-284',
'536,211,-493,691,690,-494,-284,42,261,-493,35,-558,-494,58,59,-284,682',
'60,-493,37,211,-494,688,46,535,534,533,684,536,261,660,23,540,681,678',
'231,85,79,81,82,83,84,231,547,546,80,86,281,69,70,71,12,57,676,62,777',
'63,64,483,670,540,67,762,65,66,68,32,33,72,73,211,547,546,667,666,31',
'30,29,95,94,96,97,660,846,22,535,534,533,512,536,11,47,796,13,99,98',
'100,89,56,91,90,92,-284,93,101,102,211,87,88,-284,44,45,43,948,-558',
'211,777,-277,-284,688,949,535,534,533,-277,536,806,-285,649,947,211',
'-85,42,-277,-285,35,211,211,58,59,211,200,60,-285,37,231,231,231,46',
'538,,535,534,533,,536,23,540,,,,85,79,81,82,83,84,,547,546,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,540,65,66,68,32,33,72,73,,544,543,547',
'546,31,30,29,95,94,96,97,,,22,110,111,112,113,114,11,47,,13,99,98,100',
'89,56,91,90,92,-284,93,101,102,,87,88,-284,44,45,43,,-558,,,,-284,688',
',535,534,533,,536,110,111,112,113,114,,42,,,35,,,58,59,,,60,,37,,,,46',
'763,,535,534,533,,536,23,540,,,,85,79,81,82,83,84,,547,546,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,540,65,66,68,32,33,72,73,,544,543,547',
'546,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,763,,535,534,533,,536,23,,,,,85,79,81,82,83,84,,,,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,540,65,66,68,32,33,72,73,,544,543,547',
'546,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,538,,535,534,533,,536,23,,,,,85,79,81,82,83,84,,,,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,540,65,66,68,32,33,72,73,,544,543,547',
'546,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,538,,535,534,533,,536,23,,,,,85,79,81,82,83,84,,,,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,540,65,66,68,32,33,72,73,,544,543,547',
'546,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,538,,535,534,533,,536,23,,,,,85,79,81,82,83,84,,,,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,540,65,66,68,32,33,72,73,,544,543,547',
'546,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58',
'59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233,,,,85,79,81,82',
'83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,,,243',
'244,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227',
'238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
'231,-580,-580,-580,-580,237,239,,,-580,-580,,,,,,245,246,,42,,,35,,',
'58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85',
'79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-580,-580,-580,-580',
'237,239,,,-580,-580,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234',
'46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86',
'281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,-580,-580,-580,-580,237,239,,,-580,-580,,,',
',,245,246,,42,,,283,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238',
'236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
'-580,-580,-580,-580,237,239,,,-580,-580,,,,,,245,246,,42,,,35,,,58,59',
',,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81',
'82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,231,-580,-580,-580,-580,237,239',
',,-580,-580,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,8,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,10,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,231,235,240,241,242,237,239,247,,243,244,,,,,,245,246,,42',
',,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233',
',,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245',
'246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233',
',,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245',
'246,,42,,,283,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23',
'233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13',
'99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,',
',,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,',
',232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11',
'47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-580',
'-580,-580,-580,237,239,,,-580,-580,,,,,,245,246,,42,,,35,,,58,59,,,60',
',37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83',
'84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248',
'243,244,,-580,-580,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230',
'229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69',
'70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,231,235,240,241,242,237,239,247,248,243,244,,-580,-580',
',,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238',
'236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
',,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
',,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
',,,,,,,,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,,46,230,229,226',
'227,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11',
'47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,',
',,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,283,,,58',
'59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70',
'71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,',
'80,86,8,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37',
',,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,',
',47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,',
'57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,394,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,211,69,70,71,,57,,62,,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,733,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,643,,,,46,,,,,,',
',221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65',
'66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,',
',80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294',
'295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,',
'57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46',
',,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,',
',67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,',
',,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
'275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,211,69',
'70,71,,57,,62,,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,643,,271',
',46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,',
',,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,271,,46,,,,,,,,221,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,',
'35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,378,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,,,46,,',
',,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296',
',,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,',
',,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271',
',46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,',
',,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,',
',,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,-414,85',
'79,81,82,83,84,-414,-414,-414,80,86,-414,-414,-414,,-414,,,62,,,,,,-414',
'-414,-414,,,,,,,,,-414,-414,,-414,-414,-414,-414,-414,,,,,,,,,,,,,,',
',,,,,,,,,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414',
'-414,-414,,,-414,-414,-414,,,-414,,261,-414,,,-414,-414,,-414,,-414',
',-414,,-414,-414,-414,-414,-414,-414,-414,,-414,-414,-414,,,,,,,,,,',
',-292,-414,-414,,-414,,-414,-292,-292,-292,,,-292,-292,-292,538,-292',
'535,534,533,,536,,,,,-292,-292,,,,,,,,,-292,-292,,-292,-292,-292,-292',
'-292,,,,,,,,,,540,527,,,,,,,,544,543,547,546,,-292,-292,-292,-292,-292',
'-292,-292,-292,-292,-292,-292,-292,-292,-292,,,-292,-292,-292,,,-292',
',264,-292,,,-292,-292,,-292,,-292,,-292,,-292,-292,-292,-292,-292,-292',
'-292,,-292,,-292,,,,,,,,,,,,,-292,-292,,-292,,-292,69,70,71,,57,,,,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,',
',47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46',
',,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,',
',67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,',
',296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,',
',,,,,,,,,292,,,288,,,58,59,,,60,,287,,,,,,,,,,,,,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,222,,,58,59,,,60',
',,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,304,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,643,,271,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,',
'67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32',
'33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,616,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243',
'244,,224,225,,,245,246,,216,,,222,,,58,59,,,60,,,228,,234,46,230,229',
'226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,107,249,69',
'70,71,106,57,62,,,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,',
'87,88,,,,302,,,,,,,,,,,,,,,,,,,,335,,,35,,,58,59,,,60,,37,,,,,,,,,,',
',,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,378,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,394,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,',
',47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,',
',,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,913,,,222,,,58,59,,',
'60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,12,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,',
',,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,903,,,222,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,616,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,',
'302,,231,235,240,241,242,237,239,247,248,243,244,,224,225,,,245,246',
'292,,,222,,,58,59,,,60,,,,228,,234,,230,229,226,227,238,236,232,,233',
',,85,79,81,82,83,84,,,,80,86,,,249,494,-240,,,62,69,70,71,12,57,,,,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11',
'47,10,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,',
'57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65',
'66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292',
',,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,512,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,',
',,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47',
',,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,',
',,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296',
',,99,98,100,563,56,91,90,564,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,',
',,,,,,565,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294',
'295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,563,56,91,90,564,,93',
'101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,565,,,222,,,58,59,,,60,,,,',
',,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,',
'67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273',
',271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,538,,535,534,533,46,536,,,,,',
',221,,,,-579,85,79,81,82,83,84,-579,-579,-579,80,86,-579,-579,-579,',
'-579,,,62,,540,721,,,-579,-579,-579,,,544,543,547,546,,,-579,-579,,-579',
'-579,-579,-579,-579,,,,,,,,,,,,,,,,,,,,,,,,-579,-579,-579,-579,-579',
'-579,-579,-579,-579,-579,-579,-579,-579,-579,,,-579,-579,-579,,,-579',
',261,-579,,,-579,-579,,-579,,-579,,-579,,-579,-579,-579,-579,-579,-579',
'-579,,-579,-579,-579,,,,,,,,,,,,,-579,-579,,-579,,-579,69,70,71,,57',
',,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,',
',,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,394,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,643,,,,46',
',,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,',
',67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,',
'99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,',
',,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,-579,85',
'79,81,82,83,84,-579,-579,-579,80,86,-579,-579,-579,,-579,,,62,,,,,,',
'-579,,,,,,,,,,-579,-579,,-579,-579,-579,-579,-579,,,,,,,,,,,,,-579,',
',,,,,-579,-579,-579,,,-579,-579,-579,,-579,,,,,,-579,,,,-579,,,-579',
',,,,261,-579,-579,-579,,-579,-579,-579,-579,-579,,,,,,,,,,,,,,-579,',
',,,,,,,,,,,-579,,,,,-579,,,-579,,,,,,,-579,,,,,261,-579,,,,,,,,,,,,',
',,,,,,,,,-579,,,,,,69,70,71,,57,,,-579,63,64,,,-579,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,600,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242,237',
'239,247,248,243,244,,224,225,,,245,246,,216,,,222,,,58,59,,,60,,,228',
',234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80',
'86,,249,,,,,,62,166,177,167,190,163,183,173,172,193,194,188,171,170',
'165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179,189',
'174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,,,119,,,,,',
',,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141',
',,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,',
'155,85,,,,,,,,,,86,166,177,167,190,163,183,173,172,193,194,188,171,170',
'165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179,189',
'174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,,,119,,,,,',
',,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141',
',,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,',
'155,85,,,,,,,,,,86,166,177,167,190,163,183,173,172,193,194,188,171,170',
'165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179,189',
'174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,117,,119,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
',,155,85,,,,,,,,,,86,166,177,167,190,163,183,173,172,193,194,188,171',
'170,165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179',
'189,174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,,,119,',
',,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
',,155,85,,,,,,,,,,86,166,177,167,190,163,183,173,172,193,194,188,171',
'170,165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187,186,179',
'189,174,162,181,180,,,,,,161,168,159,160,156,157,158,118,120,,,119,',
',,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
',,155,166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195',
'196,175,164,178,182,184,176,169,,,,185,192,187,350,349,351,348,162,181',
'180,,,,,,161,168,159,160,345,346,347,343,120,91,90,344,,93,,,,,,,151',
'152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,357',
',,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,,155,166',
'177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175',
'164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,',
',,,,161,168,159,160,156,157,158,118,120,375,374,119,,376,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,',
',,,145,144,,129,150,147,146,142,143,137,135,127,149,128,975,414,155',
',976,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154',
'140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127',
'149,128,465,407,155,,466,,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,970,414,155,,969,,,,,,,,,151,152,,148,130,131',
'132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144',
',129,150,147,146,142,143,137,135,127,149,128,465,407,155,,466,,,,,,',
',,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141',
',,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,621',
'414,155,,622,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134',
',,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143',
'137,135,127,149,128,621,414,155,,622,,,,,,,,,151,152,,148,130,131,132',
'139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129',
'150,147,146,142,143,137,135,127,149,128,410,414,155,,409,,,,,,,,,151',
'152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261',
',,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,403,407',
'155,,404,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153',
'154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135',
'127,149,128,619,407,155,,620,,,,,,,,,151,152,,148,130,131,132,139,136',
'138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147',
'146,142,143,137,135,127,149,128,810,414,155,,811,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,',
',145,144,,129,150,147,146,142,143,137,135,127,149,128,653,407,155,,654',
',,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,465,407,155,,466,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,705,414,155,,706,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,973,407,155,,974,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,656,414,155,,657,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,619,407,155,,620,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,703,407,155,,704,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,,,155,231,235,240,241,242,237,239,247,248,243,244,,224,225,,,245',
'246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235',
'240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,',
',,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237',
'239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230',
'229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243',
'244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238',
'236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249',
'245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231',
'235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,',
',,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242',
'237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234',
',230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248',
'243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227',
'238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225',
',249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233',
'231,235,240,241,242,237,239,247,248,243,244,,224,225,211,249,245,246',
',,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240',
'241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,',
'228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239',
'247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229',
'226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244',
',224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236',
'232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245',
'246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,,,,,,,',
',,,,,,,,249' ]
        racc_action_table = arr = ::Array.new(23604, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'621,549,549,549,549,549,549,621,621,621,549,549,621,621,621,549,621',
'549,549,549,549,549,549,549,441,621,621,621,621,549,549,549,549,549',
'549,549,621,621,549,621,621,621,621,621,549,549,857,549,549,549,549',
'549,549,549,549,549,569,549,549,549,988,549,549,326,549,549,549,621',
'621,621,621,621,621,621,621,621,621,621,621,621,621,61,429,621,621,621',
'549,621,621,549,526,621,549,549,621,621,549,621,549,621,369,621,549',
'621,621,621,621,621,621,621,549,621,621,621,333,549,549,549,549,549',
'549,808,809,561,549,549,621,621,621,621,410,621,325,549,621,621,297',
'410,410,410,553,620,704,410,410,706,410,336,554,703,928,77,928,332,347',
'410,807,22,974,77,857,347,569,369,753,857,410,410,61,410,410,410,410',
'410,988,717,419,326,411,988,717,569,326,705,619,878,569,973,975,620',
'427,427,402,22,724,724,526,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,706,753,410,410,410,565,410,346,333,565,410,809,297,410',
'346,808,809,561,410,214,410,619,410,410,410,410,410,410,410,553,410',
'410,410,401,553,325,704,554,705,706,325,336,554,703,92,410,410,332,410',
'732,410,92,92,92,410,975,92,92,92,807,92,974,807,398,807,463,974,214',
'92,427,92,92,92,724,473,653,472,705,664,664,92,92,215,92,92,92,92,92',
'878,654,973,975,41,878,395,973,975,28,874,463,874,874,874,648,874,392',
'217,737,473,648,472,92,92,92,92,92,92,92,92,92,92,92,92,92,92,635,344',
'92,92,92,215,92,92,344,41,92,810,588,92,92,41,92,653,92,433,92,390,92',
'92,92,92,92,92,92,217,92,654,92,371,635,368,687,28,687,687,687,365,687',
'664,772,92,92,92,92,409,92,874,653,92,92,653,409,409,409,28,755,653',
'409,409,810,409,654,433,756,654,439,810,343,588,588,654,810,656,117',
'343,810,757,588,117,117,409,409,759,409,409,409,409,409,18,371,371,371',
'772,810,20,20,760,439,306,772,348,439,439,564,366,722,763,348,772,687',
'722,409,409,409,409,409,409,409,409,409,409,409,409,409,409,656,772',
'409,409,409,18,409,656,563,337,409,18,656,409,363,306,656,363,409,771',
'409,306,409,409,409,409,409,409,409,361,409,564,409,317,656,359,317',
'335,564,775,366,366,366,564,622,409,409,564,409,331,409,622,622,622',
'409,778,622,622,622,601,622,563,40,524,817,564,524,351,563,817,622,622',
'622,563,351,363,363,563,718,718,622,622,350,622,622,622,622,622,404',
'350,361,361,361,293,779,563,359,359,359,349,293,601,669,887,40,669,349',
'601,887,293,40,622,622,622,622,622,622,622,622,622,622,622,622,622,622',
'783,17,622,622,622,404,622,622,17,784,622,404,27,622,622,785,622,17',
'622,27,622,786,622,622,622,622,622,622,622,787,622,628,622,628,628,628',
'540,628,540,540,540,318,540,790,318,622,622,622,622,89,622,403,345,622',
'622,278,89,89,89,345,278,89,89,89,952,89,952,952,952,628,952,692,692',
'89,540,89,89,89,628,628,628,628,791,540,793,89,89,48,89,89,89,89,89',
'403,48,329,5,795,353,403,329,5,952,48,796,353,796,796,796,330,796,628',
'797,952,952,800,89,89,89,89,89,89,89,89,89,89,89,89,89,89,803,213,89',
'89,89,319,89,89,213,311,89,308,796,89,89,13,89,213,89,813,89,796,89',
'89,89,89,89,89,89,307,89,676,89,676,676,676,289,676,488,488,488,488',
'488,289,290,89,89,89,89,415,89,290,289,89,89,303,415,415,415,818,290',
'415,415,415,939,415,939,939,939,676,939,324,324,819,415,415,415,415',
'676,676,676,676,315,315,820,415,415,291,415,415,415,415,415,956,291',
'956,956,956,829,956,302,302,939,291,684,830,684,684,684,301,684,958',
'958,939,939,296,415,415,415,415,415,415,415,415,415,415,415,415,415',
'415,295,956,415,415,415,1,440,415,43,43,415,292,684,415,415,286,415',
'843,415,844,415,684,415,415,415,415,415,415,415,285,415,415,415,937',
'849,937,937,937,440,937,284,851,440,440,309,415,415,415,415,414,415',
'309,852,415,282,275,414,414,414,272,309,414,414,414,934,414,934,934',
'934,458,934,937,269,268,414,414,414,414,257,254,876,223,937,937,880',
'414,414,334,414,414,414,414,414,921,334,921,921,921,881,921,219,458',
'934,334,218,458,458,458,458,886,216,934,934,934,934,894,414,414,414',
'414,414,414,414,414,414,414,414,414,414,414,895,921,414,414,414,499',
'896,414,897,899,414,903,499,414,414,905,414,197,414,990,414,499,414',
'414,414,414,414,414,414,977,414,414,414,984,978,984,984,984,913,984',
'916,917,459,918,567,414,414,414,414,56,414,567,919,414,920,922,56,56',
'56,115,567,56,56,56,892,56,892,892,892,84,892,984,83,69,459,56,56,56',
'459,459,459,459,984,984,47,56,56,42,56,56,56,56,56,923,39,923,923,923',
'946,923,25,3,892,892,798,19,798,798,798,16,798,892,892,892,892,957,56',
'56,56,56,56,56,56,56,56,56,56,56,56,56,962,923,56,56,56,963,964,56,965',
'966,56,967,798,56,56,968,56,969,56,970,56,613,56,56,56,56,56,56,56,607',
'56,870,56,870,870,870,709,870,647,647,647,647,647,709,902,56,56,56,56',
'602,56,902,709,56,719,719,719,719,719,719,902,725,725,719,719,725,725',
'725,719,870,719,719,719,719,719,719,719,598,594,623,870,870,719,719',
'719,719,719,719,719,592,762,719,762,762,762,625,762,719,719,640,719',
'719,719,719,719,719,719,719,719,556,719,719,719,642,719,719,555,719',
'719,719,550,875,650,875,875,875,868,875,868,868,868,657,868,652,910',
'548,545,911,657,719,655,910,719,657,911,719,719,657,538,719,910,719',
'972,911,866,719,866,866,866,875,866,658,659,719,868,531,530,662,719',
'719,719,719,719,719,663,868,868,719,719,804,804,804,804,804,804,529',
'719,665,804,804,525,522,866,804,675,804,804,804,804,804,804,804,515',
'866,866,514,513,804,804,804,804,804,804,804,504,901,804,901,901,901',
'500,901,804,804,686,804,804,804,804,804,804,804,804,804,811,804,804',
'804,495,804,804,811,804,804,804,912,811,689,694,914,811,841,912,841',
'841,841,914,841,699,950,493,912,702,490,804,914,950,804,489,475,804',
'804,474,15,804,950,804,444,443,442,804,863,,863,863,863,,863,804,841',
',,,804,804,804,804,804,804,,841,841,804,804,552,552,552,552,552,552',
',804,,552,552,,,,552,863,552,552,552,552,552,552,552,,863,863,863,863',
'552,552,552,552,552,552,552,,,552,280,280,280,280,280,552,552,,552,552',
'552,552,552,552,552,552,552,976,552,552,552,,552,552,976,552,552,552',
',976,,,,976,681,,681,681,681,,681,9,9,9,9,9,,552,,,552,,,552,552,,,552',
',552,,,,552,838,,838,838,838,,838,552,681,,,,552,552,552,552,552,552',
',681,681,552,552,909,909,909,909,909,909,,552,,909,909,,,,909,838,909',
'909,909,909,909,909,909,,838,838,838,838,909,909,909,909,909,909,909',
',,909,,,,,,909,909,,909,909,909,909,909,909,909,909,909,,909,909,909',
',909,909,,909,909,909,,,,,,,,,,,,,,,,,,,,909,,,909,,,909,909,,,909,',
'909,,,,909,836,,836,836,836,,836,909,,,,,909,909,909,909,909,909,,,',
'909,909,199,199,199,199,199,199,,909,,199,199,,,,199,836,199,199,199',
'199,199,199,199,,836,836,836,836,199,199,199,199,199,199,199,,,199,',
',,,,199,199,,199,199,199,199,199,199,199,199,199,,199,199,199,,199,199',
',199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,,199,,199,,,,199',
'721,,721,721,721,,721,199,,,,,199,199,199,199,199,199,,,,199,199,720',
'720,720,720,720,720,,199,,720,720,,,,720,721,720,720,720,720,720,720',
'720,,721,721,721,721,720,720,720,720,720,720,720,,,720,,,,,,720,720',
',720,720,720,720,720,720,720,720,720,,720,720,720,,720,720,,720,720',
'720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,720,,,720,,720,,,,720,678,,678',
'678,678,,678,720,,,,,720,720,720,720,720,720,,,,720,720,765,765,765',
'765,765,765,,720,,765,765,,,,765,678,765,765,765,765,765,765,765,,678',
'678,678,678,765,765,765,765,765,765,765,,,765,,,,,,765,765,,765,765',
'765,765,765,765,765,765,765,,765,765,765,,765,765,,765,765,765,,,,,',
',,,,,,,,,,,,,,765,,,765,,,765,765,,,765,,765,,,,765,527,,527,527,527',
',527,765,,,,,765,765,765,765,765,765,,,,765,765,805,805,805,805,805',
'805,,765,,805,805,,,,805,527,805,805,805,805,805,805,805,,527,527,527',
'527,805,805,805,805,805,805,805,,,805,,,,,,805,805,,805,805,805,805',
'805,805,805,805,805,,805,805,805,,805,805,,805,805,805,452,,,,,,,,,',
',,,,,,452,452,,805,,,805,,,805,805,,,805,,805,452,,452,805,452,452,452',
'452,,,452,805,452,,,,805,805,805,805,805,805,,,,805,805,314,314,314',
'314,314,314,,805,,314,314,,,,314,,314,314,314,314,314,314,314,,,,,,314',
'314,314,314,314,314,314,,,314,,,,,,314,314,,314,314,314,314,314,314',
'314,314,314,,314,314,314,,314,314,,314,314,314,460,460,460,460,460,460',
'460,,,460,460,,,,,,460,460,,314,,,314,,,314,314,,,314,,314,460,,460',
'314,460,460,460,460,460,460,460,314,460,,,,314,314,314,314,314,314,',
',,314,314,674,674,674,674,674,674,,314,,674,674,,,,674,,674,674,674',
'674,674,674,674,,,,,,674,674,674,674,674,674,674,,,674,,,,,,674,674',
',674,674,674,674,674,674,674,674,674,,674,674,674,,674,674,,674,674',
'674,457,457,457,457,457,457,457,,,457,457,,,,,,457,457,,674,,,674,,',
'674,674,,,674,,674,457,,457,674,457,457,457,457,457,457,457,674,457',
',,,674,674,674,674,674,674,,,,674,674,767,767,767,767,767,767,,674,',
'767,767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767,767,767',
'767,767,,,767,,,,,,767,767,,767,767,767,767,767,767,767,767,767,,767',
'767,767,,767,767,,767,767,767,456,456,456,456,456,456,456,,,456,456',
',,,,,456,456,,767,,,767,,,767,767,,,767,,767,456,,456,767,456,456,456',
'456,456,456,456,767,456,,,,767,767,767,767,767,767,,,,767,767,35,35',
'35,35,35,35,,767,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35',
'35,35,35,,,35,,,,,,35,35,,35,35,35,35,35,35,35,35,35,,35,35,35,,35,35',
',35,35,35,455,455,455,455,455,455,455,,,455,455,,,,,,455,455,,35,,,35',
',,35,35,,,35,,35,455,,455,35,455,455,455,455,455,455,455,35,455,,,,35',
'35,35,35,35,35,,,,35,35,673,673,673,673,673,673,,35,,673,673,,,,673',
',673,673,673,673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673',
',,,,,673,673,,673,673,673,673,673,673,673,673,673,,673,673,673,,673',
'673,,673,673,673,454,454,454,454,454,454,454,,,454,454,,,,,,454,454',
',673,,,673,,,673,673,,,673,,673,454,,454,673,454,454,454,454,454,454',
'454,673,454,,,,673,673,673,673,673,673,,,,673,673,726,726,726,726,726',
'726,,673,,726,726,,,,726,,726,726,726,726,726,726,726,,,,,,726,726,726',
'726,726,726,726,,,726,,,,,,726,726,,726,726,726,726,726,726,726,726',
'726,,726,726,726,,726,726,,726,726,726,453,453,453,453,453,453,453,',
',453,453,,,,,,453,453,,726,,,726,,,726,726,,,726,,726,453,,453,726,453',
'453,453,453,453,453,453,726,453,,,,726,726,726,726,726,726,,,,726,726',
'2,2,2,2,2,2,,726,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,',
',,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,461,461,461,461,461,461',
'461,461,,461,461,,,,,,461,461,,2,,,2,,,2,2,,,2,,2,461,,461,2,461,461',
'461,461,461,461,461,2,461,,,,2,2,2,2,2,2,,,,2,2,850,850,850,850,850',
'850,,2,,850,850,,,,850,,850,850,850,850,850,850,850,,,,,,850,850,850',
'850,850,850,850,,,850,,,,,,850,850,,850,850,850,850,850,850,850,850',
'850,,850,850,850,,850,850,,850,850,850,451,,,,,,,,,,,,,,,,451,451,,850',
',,850,,,850,850,,,850,,850,451,,451,850,451,451,451,451,,,451,850,451',
',,,850,850,850,850,850,850,,,,850,850,283,283,283,283,283,283,,850,',
'283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283',
'283,283,,,283,,,,,,283,283,,283,283,283,283,283,283,283,283,283,,283',
'283,283,,283,283,,283,283,283,450,,,,,,,,,,,,,,,,450,450,,283,,,283',
',,283,283,,,283,,283,450,,450,283,450,450,450,450,,,450,283,450,,,,283',
'283,283,283,283,283,,,,283,283,933,933,933,933,933,933,,283,,933,933',
',,,933,,933,933,933,933,933,933,933,,,,,,933,933,933,933,933,933,933',
',,933,,,,,,933,933,,933,933,933,933,933,933,933,933,933,,933,933,933',
',933,933,,933,933,933,449,,,,,,,,,,,,,,,,449,449,,933,,,933,,,933,933',
',,933,,933,449,,449,933,449,449,449,449,,,449,933,449,,,,933,933,933',
'933,933,933,,,,933,933,854,854,854,854,854,854,,933,,854,854,,,,854',
',854,854,854,854,854,854,854,,,,,,854,854,854,854,854,854,854,,,854',
',,,,,854,854,,854,854,854,854,854,854,854,854,854,,854,854,854,,854',
'854,,854,854,854,448,448,448,448,448,448,448,,,448,448,,,,,,448,448',
',854,,,854,,,854,854,,,854,,854,448,,448,854,448,448,448,448,448,448',
'448,854,448,,,,854,854,854,854,854,854,,,,854,854,814,814,814,814,814',
'814,,854,,814,814,,,,814,,814,814,814,814,814,814,814,,,,,,814,814,814',
'814,814,814,814,,,814,,,,,,814,814,,814,814,814,814,814,814,814,814',
'814,,814,814,814,,814,814,,814,814,814,438,438,438,438,438,438,438,438',
'438,438,438,,438,438,,,438,438,,814,,,814,,,814,814,,,814,,814,438,',
'438,814,438,438,438,438,438,438,438,814,438,,,,814,814,814,814,814,814',
',,,814,814,768,768,768,768,768,768,,814,,768,768,,,,768,,768,768,768',
'768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768,,,,,,768,768',
',768,768,768,768,768,768,768,768,768,,768,768,768,,768,768,,768,768',
'768,437,437,437,437,437,437,437,437,437,437,437,,437,437,,,437,437,',
'768,,,768,,,768,768,,,768,,768,437,,437,768,437,437,437,437,437,437',
'437,768,437,,,,768,768,768,768,768,768,,,,768,768,883,883,883,883,883',
'883,,768,,883,883,,,,883,,883,883,883,883,883,883,883,,,,,,883,883,883',
'883,883,883,883,,,883,,,,,,883,883,,883,883,883,883,883,883,883,883',
'883,,883,883,883,,883,883,,883,883,883,445,,,,,,,,,,,,,,,,445,445,,883',
',,883,,,883,883,,,883,,883,445,,445,883,445,445,445,445,,,,883,,,,,883',
'883,883,883,883,883,,,,883,883,932,932,932,932,932,932,,883,,932,932',
',,,932,,932,932,932,932,932,932,932,,,,,,932,932,932,932,932,932,932',
',,932,,,,,,932,932,,932,932,932,932,932,932,932,932,932,,932,932,932',
',932,932,,932,932,932,446,,,,,,,,,,,,,,,,446,446,,932,,,932,,,932,932',
',,932,,932,446,,446,932,446,446,446,446,,,,932,,,,,932,932,932,932,932',
'932,,,,932,932,929,929,929,929,929,929,,932,,929,929,,,,929,,929,929',
'929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,929',
'929,,929,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,929',
'929,929,447,,,,,,,,,,,,,,,,447,447,,929,,,929,,,929,929,,,929,,929,447',
',,929,447,447,447,447,,,,929,,,,,929,929,929,929,929,929,,,,929,929',
'222,222,222,222,222,222,,929,,222,222,,,,222,,222,222,222,222,222,222',
'222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,222,222,,222,222,222',
'222,222,222,222,222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,',
',,,,,,,,,,222,,,222,,,222,222,,,222,,222,,,,222,,,,,,,,222,,,,,222,222',
'222,222,222,222,,,,222,222,288,288,288,288,288,288,,222,,288,288,,,',
'288,,288,288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,',
'288,,,,,,288,288,,288,288,288,288,288,288,288,288,288,,288,288,288,',
'288,288,,288,288,288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,288',
',,,288,,,,,,,,288,,,,,288,288,288,288,288,288,,,,288,288,924,924,924',
'924,924,924,,288,,924,924,,,,924,,924,924,924,924,924,924,924,,,,,,924',
'924,924,924,924,924,924,,,924,,,,,,924,924,,924,924,924,924,924,924',
'924,924,924,,924,924,924,,924,924,,924,924,924,,,,,,,,,,,,,,,,,,,,924',
',,924,,,924,924,,,924,,924,,,,924,,,,,,,,924,,,,,924,924,924,924,924',
'924,,,,924,924,777,777,777,777,777,777,,924,,777,777,,,,777,,777,777',
'777,777,777,777,777,,,,,,777,777,777,777,777,777,777,,,777,,,,,,777',
'777,,777,777,777,777,777,777,777,777,777,,777,777,777,,777,777,,777',
'777,777,,,,,,,,,,,,,,,,,,,,777,,,777,,,777,777,,,777,,777,,,,777,,,',
',,,,777,,,,,777,777,777,777,777,777,,,,777,777,384,384,384,384,384,384',
',777,,384,384,,,,384,,384,384,384,384,384,384,384,,,,,,384,384,384,384',
'384,384,384,,,384,,,,,,384,384,384,384,384,384,384,384,384,384,384,384',
',384,384,384,,384,384,,384,384,384,,,,,,,,,,,,,,,,,,,,384,,,384,,,384',
'384,,,384,,384,,,,384,,,,,,,,384,,,,,384,384,384,384,384,384,,,,384',
'384,202,202,202,,202,,,384,202,202,,,,202,,202,202,202,202,202,202,202',
',,,,,202,202,202,202,202,202,202,,,202,,,,,,,202,,,202,202,202,202,202',
'202,202,202,202,202,202,202,,202,202,,202,202,202,,,,,,,,,,,,,,,,,,',
',202,,,202,,,202,202,,,202,,202,,202,,202,,,,,,,,202,,,,,202,202,202',
'202,202,202,,,,202,202,205,205,205,,205,,,202,205,205,,,,205,,205,205',
'205,205,205,205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,,,205',
',,205,205,205,205,205,205,205,205,,205,205,205,,205,205,,205,205,205',
',,,,,,,,,,,,,,,,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,',
',205,205,205,205,205,205,,,,205,205,206,206,206,,206,,,205,206,206,',
',,206,,206,206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206',
',,206,,,,,,,206,,,206,206,206,206,206,206,206,206,,206,206,206,,206',
'206,,206,206,206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,206,',
',,206,,,,,,,,206,,,,,206,206,206,206,206,206,,,,206,206,207,207,207',
',207,,,206,207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207',
'207,207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,207',
',207,207,207,,207,207,,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207',
'207,,,207,,,,,,207,,,,,,,,207,,,,,207,207,207,207,207,207,,,,207,207',
'208,208,208,,208,,,207,208,208,,,,208,,208,208,208,208,208,208,208,',
',,,,208,208,208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208',
'208,208,208,,208,208,208,,208,208,,208,208,208,,,,,,,,,,,,,,,,,,,,208',
',,208,,,208,208,,,208,,,,,,208,,,,,,,,208,,,,,208,208,208,208,208,208',
',,,208,208,209,209,209,,209,,,208,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,,209,209,209,,,,,,,,,,,,,',
',,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209',
'209,209,209,,,,209,209,210,210,210,,210,,,209,210,210,,,,210,,210,210',
'210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210',
',,210,210,210,210,210,210,210,210,,210,210,210,,210,210,,210,210,210',
',,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,,,,,210,,,,,,,,210,,,',
',210,210,210,210,210,210,,,,210,210,210,606,606,606,,606,,210,,606,606',
',,,606,,606,606,606,606,606,606,606,,,,,,606,606,606,606,606,606,606',
',,606,,,,,,,606,,,606,606,606,606,606,606,606,606,,606,606,606,,606',
'606,,606,606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606,606,,,606,,,,,,606',
',,,,,,,606,,,,,606,606,606,606,606,606,,,,606,606,570,570,570,,570,',
',606,570,570,,,,570,,570,570,570,570,570,570,570,,,,,,570,570,570,570',
'570,570,570,,,570,,,,,,,570,,,570,570,570,570,570,570,570,570,,570,570',
'570,,570,570,,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570',
',,,,,570,,,,,,,,570,,,,,570,570,570,570,570,570,,,,570,570,599,599,599',
',599,,,570,599,599,,,,599,,599,599,599,599,599,599,599,,,,,,599,599',
'599,599,599,599,599,,,599,,,,,,,599,,,599,599,599,599,599,599,599,599',
',599,599,599,,599,599,,599,599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599',
'599,,,599,,599,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,,,,599',
'599,882,882,882,,882,,,599,882,882,,,,882,,882,882,882,882,882,882,882',
',,,,,882,882,882,882,882,882,882,,,882,,,,,,,882,,,882,882,882,882,882',
'882,882,882,,882,882,882,,882,882,,882,882,882,,,,,,,,,,,,,,,,,,,,882',
',,882,,,882,882,,,882,,882,,,,882,,,,,,,,882,,,,,882,882,882,882,882',
'882,,,,882,882,221,221,221,,221,,,882,221,221,,,,221,,221,221,221,221',
'221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221',
'221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,',
',,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221',
'221,221,221,221,,,,221,221,224,224,224,,224,,,221,224,224,,,,224,,224',
'224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,',
',224,,,224,224,224,224,224,224,224,224,,224,224,224,,224,224,,224,224',
'224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,224',
',,,,224,224,224,224,224,224,,,,224,224,225,225,225,,225,,,224,225,225',
',,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225',
',,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225,225,,225',
'225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225',
',,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,226,226,226,,226,',
',225,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226',
'226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226',
'226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226',
',,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,227,227,227',
',227,,,226,227,227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227',
'227,227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227',
',227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227',
'227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227',
'228,228,228,,228,,,227,228,228,,,,228,,228,228,228,228,228,228,228,',
',,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228',
'228,228,228,,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228',
',,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228',
',,,228,228,229,229,229,,229,,,228,229,229,,,,229,,229,229,229,229,229',
'229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229',
'229,229,229,229,229,,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,',
',,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229',
'229,229,229,,,,229,229,230,230,230,,230,,,229,230,230,,,,230,,230,230',
'230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230',
',,230,230,230,230,230,230,230,230,,230,230,230,,230,230,,230,230,230',
',,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,',
',230,230,230,230,230,230,,,,230,230,231,231,231,,231,,,230,231,231,',
',,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231',
',,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,,231',
'231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231',
',,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,232,232,232,,232,',
',231,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232',
'232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232',
'232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232',
',,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,233,233,233',
',233,,,232,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233',
'233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233',
',233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233',
'233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233',
'234,234,234,,234,,,233,234,234,,,,234,,234,234,234,234,234,234,234,',
',,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234',
'234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234',
',,,234,234,235,235,235,,235,,,234,235,235,,,,235,,235,235,235,235,235',
'235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235',
'235,235,235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,',
',,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235',
'235,235,235,,,,235,235,236,236,236,,236,,,235,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236',
',,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236',
',,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,',
',236,236,236,236,236,236,,,,236,236,237,237,237,,237,,,236,237,237,',
',,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237',
',,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,,237',
'237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237',
',,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,238,238,238,,238,',
',237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238',
'238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238',
'238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238',
',,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,239,239,239',
',239,,,238,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239',
'239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239',
',239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239',
'239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239',
'240,240,240,,240,,,239,240,240,,,,240,,240,240,240,240,240,240,240,',
',,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240',
'240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240',
',,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240',
',,,240,240,241,241,241,,241,,,240,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,',
',,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241',
'241,241,241,,,,241,241,242,242,242,,242,,,241,242,242,,,,242,,242,242',
'242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242',
',,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242,242',
',,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,',
',242,242,242,242,242,242,,,,242,242,243,243,243,,243,,,242,243,243,',
',,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243',
',,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243,,243',
'243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243',
',,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,244,244,244,,244,',
',243,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244',
'244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244',
'244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244',
',,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,245,245,245',
',245,,,244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245',
',245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245',
'245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245',
'246,246,246,,246,,,245,246,246,,,,246,,246,246,246,246,246,246,246,',
',,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246',
'246,246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246',
',,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246',
',,,246,246,247,247,247,,247,,,246,247,247,,,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,',
',,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247',
'247,247,247,,,,247,247,248,248,248,,248,,,247,248,248,,,,248,,248,248',
'248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248',
',,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248,248',
',,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,',
',248,248,248,248,248,248,,,,248,248,249,249,249,,249,,,248,249,249,',
',,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249',
',,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249',
'249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249',
',,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,255,255,255,,255,',
',249,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255',
'255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,255,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,255,,255,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255',
'261,261,261,,261,,,255,261,261,,,,261,,261,261,261,261,261,261,261,',
',,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,261,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,',
',261,,,261,,,261,261,,,261,,261,,261,,261,,,,,,,,261,,,,,261,261,261',
'261,261,261,,,,261,261,264,264,264,,264,,,261,264,264,,,,264,,264,264',
'264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264',
',,264,264,264,264,264,264,264,264,264,264,264,264,,264,264,,264,264',
'264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,264,,264,,264,,,,',
',,,264,,,,,264,264,264,264,264,264,,,,264,264,264,603,603,603,,603,',
'264,,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603,603,603,603',
'603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603,603,603,603,603',
'603,603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603',
',,603,,603,,603,,603,,,,,,,,603,,,,,603,603,603,603,603,603,,,,603,603',
'481,481,481,,481,,,603,481,481,,,,481,,481,481,481,481,481,481,481,',
',,,,481,481,481,481,481,481,481,,,481,,,,,,,481,,,481,481,481,481,481',
'481,481,481,481,481,481,481,,481,481,,481,481,481,,,,,,,,,,,,,,,,,,',
',481,,,481,,,481,481,,,481,,,,481,,481,,,,,,,,481,,,,,481,481,481,481',
'481,481,,,,481,481,483,483,483,,483,,,481,483,483,,,,483,,483,483,483',
'483,483,483,483,,,,,,483,483,483,483,483,483,483,,,483,,,,,,,483,,,483',
'483,483,483,483,483,483,483,,483,483,483,,483,483,,483,483,483,,,,,',
',,,,,,,,,,,,,,483,,,483,,,483,483,,,483,,,,,,483,,,,,,,,483,,,,,483',
'483,483,483,483,483,,,,483,483,485,485,485,,485,,,483,485,485,,,,485',
',485,485,485,485,485,485,485,,,,,,485,485,485,485,485,485,485,,,485',
',,,,,,485,,,485,485,485,485,485,485,485,485,,485,485,485,,485,485,,485',
'485,485,,,,,,,,,,,,,,,,,,,,485,,,485,,,485,485,,,485,,,,,,485,,,,,,',
',485,,,,,485,485,485,485,485,485,,,,485,485,487,487,487,487,487,,,485',
'487,487,,,,487,,487,487,487,487,487,487,487,,,,,,487,487,487,487,487',
'487,487,,,487,,,,,,487,487,,487,487,487,487,487,487,487,487,487,,487',
'487,487,,487,487,,487,487,487,,,,,,,,,,,,,,,,,,,,487,,,487,,,487,487',
',,487,,487,,,,487,,,,,,,,487,,,,,487,487,487,487,487,487,,,,487,487',
'701,701,701,,701,487,,487,701,701,,,,701,,701,701,701,701,701,701,701',
',,,,,701,701,701,701,701,701,701,,,701,,,,,,,701,,,701,701,701,701,701',
'701,701,701,,701,701,701,,701,701,,701,701,701,,,,,,,,,,,,,,,,,,,,701',
',,701,,,701,701,,,701,,701,,,,701,,,,,,,,701,,,,,701,701,701,701,701',
'701,,,,701,701,494,494,494,,494,,,701,494,494,,,,494,,494,494,494,494',
'494,494,494,,,,,,494,494,494,494,494,494,494,,,494,,,,,,,494,,,494,494',
'494,494,494,494,494,494,,494,494,494,,494,494,,,,494,,,,,,,,,,,,,,,',
',,,,494,,,494,,,494,494,,,494,,,,,,,,,,,,,,,,,,,494,494,494,494,494',
'494,,,,494,494,496,496,496,,496,,,494,496,496,,,,496,,496,496,496,496',
'496,496,496,,,,,,496,496,496,496,496,496,496,,,496,,,,,,,496,,,496,496',
'496,496,496,496,496,496,496,496,496,496,,496,496,,496,496,496,,,,,,',
',,,,,,,,,,,,,496,,,496,,,496,496,,,496,,496,,496,,496,,,,,,,,496,,,',
',496,496,496,496,496,496,,,,496,496,503,503,503,,503,,,496,503,503,',
',,503,,503,503,503,503,503,503,503,,,,,,503,503,503,503,503,503,503',
',,503,,,,,,,503,,,503,503,503,503,503,503,503,503,,503,503,503,,503',
'503,,,,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503,,,,,,,,,,,,',
',,,,,,503,503,503,503,503,503,,,,503,503,23,23,23,,23,,,503,23,23,,',
',23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,',
'23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,',
',,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23',
'23,947,947,947,,947,,,23,947,947,,,,947,,947,947,947,947,947,947,947',
',,,,,947,947,947,947,947,947,947,,,947,,,,,,,947,,,947,947,947,947,947',
'947,947,947,947,947,947,947,,947,947,,947,947,947,,,,,,,,,,,,,,,,,,',
',947,,,947,,,947,947,,,947,,947,,947,,947,,,,,,,,947,,,,29,947,947,947',
'947,947,947,29,29,29,947,947,29,29,29,,29,,,947,,,,,,29,29,29,,,,,,',
',,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,,,,,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,,,29,29,29,,,29,,29,29,,,29,29,,29,,29,,29,,29',
'29,29,29,29,29,29,,29,29,29,,,,,,,,,,,,30,29,29,,29,,29,30,30,30,,,30',
'30,30,323,30,323,323,323,,323,,,,,30,30,,,,,,,,,30,30,,30,30,30,30,30',
',,,,,,,,,323,323,,,,,,,,323,323,323,323,,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,,30,30,30',
'30,30,30,30,,30,,30,,,,,,,,,,,,,30,30,,30,,30,31,31,31,,31,,,,31,31',
',,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31',
',,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31,,,,,,,,,,,,,',
',,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,,,,,,31,,,,,31,31,31,31,31',
'31,,,,31,31,32,32,32,,32,,,31,32,32,,,,32,,32,32,32,32,32,32,32,,,,',
',32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32',
'32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,',
'32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,33,33,33,,33,,,32,33',
'33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,',
'33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,',
',,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33',
'33,33,,,,33,33,36,36,36,,36,,,33,36,36,,,,36,,36,36,36,36,36,36,36,',
',,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36,36,36,36,36,36,,36',
'36,36,,36,36,,,,36,,,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,,,,,',
',,,,,,,,,,,36,36,36,36,36,36,,,,36,36,37,37,37,,37,,,36,37,37,,,,37',
',37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37',
'37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37',
',,37,37,,,37,,,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,478,478,478',
'37,478,,,37,478,478,,,,478,,478,478,478,478,478,478,478,,,,,,478,478',
'478,478,478,478,478,,,478,,,,,,,478,,,478,478,478,478,478,478,478,478',
'478,478,478,478,,478,478,,478,478,478,,,,,,,,,,,,,,,,,,,,478,,,478,',
',478,478,,,478,,478,,478,,478,,,,,,,,478,,,,,478,478,478,478,478,478',
',,,478,478,604,604,604,,604,,,478,604,604,,,,604,,604,604,604,604,604',
'604,604,,,,,,604,604,604,604,604,604,604,,,604,,,,,,,604,,,604,604,604',
'604,604,604,604,604,604,604,604,604,,604,604,,604,604,604,,,,,,,,,,',
',,,,,,,,,604,,,604,,,604,604,,,604,,,,604,,604,,,,,,,,604,,,,,604,604',
'604,604,604,604,,,,604,604,44,44,44,,44,,,604,44,44,,,,44,,44,44,44',
'44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44',
'44,44,44,,44,44,44,,44,44,,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44',
'44,,,44,,,,,,44,,,,,,,,44,,,,,44,44,44,44,44,44,,,,44,44,45,45,45,,45',
',,44,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45',
',,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,',
',,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45',
'45,45,,,,45,45,46,46,46,,46,,,45,46,46,,,,46,,46,46,46,46,46,46,46,',
',,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46',
'46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,',
'46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,605,605,605,,605,,,46,605',
'605,,,,605,,605,605,605,605,605,605,605,,,,,,605,605,605,605,605,605',
'605,,,605,,,,,,,605,,,605,605,605,605,605,605,605,605,,605,605,605,',
'605,605,,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,,',
',,,605,,,,,,,,605,,,,,605,605,605,605,605,605,,,,605,605,58,58,58,,58',
',,605,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,',
'58,,,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58,,58,58,58,,,',
',,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,,,,,58,58,58',
'58,58,58,,,,58,58,59,59,59,,59,,,58,59,59,,,,59,,59,59,59,59,59,59,59',
',,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59',
'59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59',
',,,59,,,,,,,,59,,,,,59,59,59,59,59,59,,,,59,59,63,63,63,,63,,,59,63',
'63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,',
'63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,',
',,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63',
',,,63,63,64,64,64,,64,,,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64',
'64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64',
',64,64,,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,',
',,,,64,,,,,64,64,64,64,64,64,,,,64,64,67,67,67,,67,,,64,67,67,,,,67',
',67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,624,,67,,,67',
'67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,624,624,624,624,624',
'624,624,624,624,624,624,,624,624,,,624,624,,67,,,67,,,67,67,,,67,,,624',
',624,67,624,624,624,624,624,624,624,67,624,,,,67,67,67,67,67,67,,,,67',
'67,67,624,68,68,68,67,68,67,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,',
',68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68',
'68,,68,68,,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,',
',,,,,,,,68,68,68,68,68,68,,,,68,68,105,105,105,105,105,,,68,105,105',
',,,105,,105,105,105,105,105,105,105,,,,,,105,105,105,105,105,105,105',
',,105,,,,,,105,105,105,105,105,105,105,105,105,105,105,105,,105,105',
'105,,105,105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,,105',
',105,,,,105,,,,,,,,105,,,,,105,105,105,105,105,105,,,,105,105,110,110',
'110,,110,105,,105,110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110',
'110,110,110,110,110,110,,,110,,,,,,,110,,,110,110,110,110,110,110,110',
'110,,110,110,110,,110,110,,110,110,110,,,,,,,,,,,,,,,,,,,,110,,,110',
',,110,110,,,110,,,,,,110,,,,,,,,110,,,,,110,110,110,110,110,110,,,,110',
'110,111,111,111,,111,,,110,111,111,,,,111,,111,111,111,111,111,111,111',
',,,,,111,111,111,111,111,111,111,,,111,,,,,,,111,,,111,111,111,111,111',
'111,111,111,,111,111,111,,111,111,,111,111,111,,,,,,,,,,,,,,,,,,,,111',
',,111,,,111,111,,,111,,,,,,111,,,,,,,,111,,,,,111,111,111,111,111,111',
',,,111,111,112,112,112,,112,,,111,112,112,,,,112,,112,112,112,112,112',
'112,112,,,,,,112,112,112,112,112,112,112,,,112,,,,,,,112,,,112,112,112',
'112,112,112,112,112,,112,112,112,,112,112,,112,112,112,,,,,,,,,,,,,',
',,,,,,112,,,112,,,112,112,,,112,,,,,,112,,,,,,,,112,,,,,112,112,112',
'112,112,112,,,,112,112,113,113,113,,113,,,112,113,113,,,,113,,113,113',
'113,113,113,113,113,,,,,,113,113,113,113,113,113,113,,,113,,,,,,,113',
',,113,113,113,113,113,113,113,113,,113,113,113,,113,113,,113,113,113',
',,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,,,,,113,,,,,,,,113,,,',
',113,113,113,113,113,113,,,,113,113,114,114,114,114,114,,,113,114,114',
',,,114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114',
',,114,,,,,,114,114,,114,114,114,114,114,114,114,114,114,,114,114,114',
',114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,',
'114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114,,,,114,114,576,576',
'576,,576,,,114,576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576',
'576,576,576,576,576,576,,,576,,,,,,,576,,,576,576,576,576,576,576,576',
'576,,576,576,576,,576,576,,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576',
',,576,576,,,576,,,,,,576,,,,,,,,576,,,,,576,576,576,576,576,576,,,,576',
'576,200,200,200,,200,,,576,200,200,,,,200,,200,200,200,200,200,200,200',
',,,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200,200,200,200',
'200,200,200,,200,200,200,,200,200,,200,200,200,,,,,,,,,,,,,,,,,,,,200',
',,200,,,200,200,,,200,,200,,,,200,,,,,,,,200,,,,,200,200,200,200,200',
'200,,,,200,200,201,201,201,,201,,,200,201,201,,,,201,,201,201,201,201',
'201,201,201,,,,,,201,201,201,201,201,201,201,,,201,,,,,,,201,,,201,201',
'201,201,201,201,201,201,,201,201,201,,201,201,,201,201,201,,,,,,,,,',
',,,,,,,,,,201,,,201,,,201,201,,,201,,,,,,201,,,,,,,,201,,,,,201,201',
'201,201,201,201,,,,201,201,611,611,611,,611,,,201,611,611,,,,611,,611',
'611,611,611,611,611,611,,,,,,611,611,611,611,611,611,611,,,611,,,,,',
',611,,,611,611,611,611,611,611,611,611,,611,611,611,,611,611,,611,611',
'611,,,,,,,,,,,,,,,,,,,,611,,,611,,,611,611,,,611,,,,,,611,,,,,,,,611',
',,,,611,611,611,611,611,611,,,,611,611,612,612,612,,612,,,611,612,612',
',,,612,,612,612,612,612,612,612,612,,,,,,612,612,612,612,612,612,612',
',,612,,,,,,,612,,,612,612,612,612,612,612,612,612,,612,612,612,,612',
'612,,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,,612,612,,,612,,,,,,612',
',,,,,,,612,,,,,612,612,612,612,612,612,,,,612,612,271,271,271,,271,',
',612,271,271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271,271',
'271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271,,271,271',
'271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271',
',,,,,271,,,,,,,,271,,,,,271,271,271,271,271,271,,,,271,271,616,616,616',
',616,,,271,616,616,,,,616,,616,616,616,616,616,616,616,,,,,,616,616',
'616,616,616,616,616,,,616,,,,,,,616,,,616,616,616,616,616,616,616,616',
',616,616,616,,616,616,,616,616,616,,,,,,,,,,,,,,,,,,,,616,,,616,,,616',
'616,,,616,,,,,,616,,,,,,,,616,,,,,616,616,616,616,616,616,,,,616,616',
'273,273,273,,273,,,616,273,273,,,,273,,273,273,273,273,273,273,273,',
',,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273',
'273,273,273,,273,273,273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273',
',,273,,,273,273,,,273,,,,,,273,,,,,,,,273,,,,,273,273,273,273,273,273',
',,,273,273,615,615,615,,615,,,273,615,615,,,,615,,615,615,615,615,615',
'615,615,,,,,,615,615,615,615,615,615,615,,,615,,,,,,,615,,,615,615,615',
'615,615,615,615,615,,615,615,615,,615,615,,615,615,615,,,,,,,,,,,,,',
',,,,,,615,,,615,,,615,615,,,615,,,,,,615,,,,,,,,615,,,,,615,615,615',
'615,615,615,,,,615,615,858,858,858,,858,,,615,858,858,,,,858,,858,858',
'858,858,858,858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,,858',
',,858,858,858,858,858,858,858,858,,858,858,858,,858,858,,,,858,,,,,',
',,,,,,,,,,,,,,858,,,858,,,858,858,,,858,,,,,,,,,,,,,,,,,,,858,858,858',
'858,858,858,,,,858,858,281,281,281,281,281,,,858,281,281,,,,281,,281',
'281,281,281,281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,',
'281,281,,281,281,281,281,281,281,281,281,281,,281,281,281,,281,281,',
'281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,281,,,,281',
',,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,848,848,848,,848,',
',281,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848,848',
'848,848,848,,,848,,,,,,,848,,,848,848,848,848,848,848,848,848,,848,848',
'848,,848,848,,,,848,,,,,,,,,,,,,,,,,,,,848,,,848,,,848,848,,,848,,,',
',,,,,,,,,,,,,,,848,848,848,848,848,848,,,,848,848,287,287,287,,287,',
',848,287,287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287,287,287',
'287,287,287,,,287,,,,,,422,287,,,287,287,287,287,287,287,287,287,,287',
'287,287,,287,287,,,,287,,422,422,422,422,422,422,422,422,422,422,422',
',422,422,,,422,422,287,,,287,,,287,287,,,287,,,,422,,422,,422,422,422',
'422,422,422,422,,422,,,287,287,287,287,287,287,,,,287,287,,,422,287',
'422,,,287,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,',
'8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,',
',8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,600,600,600',
',600,,,8,600,600,,,,600,,600,600,600,600,600,600,600,,,,,,600,600,600',
'600,600,600,600,,,600,,,,,,,600,,,600,600,600,600,600,600,600,600,,600',
'600,600,,600,600,,600,600,600,,,,,,,,,,,,,,,,,,,,600,,,600,,,600,600',
',,600,,,,,,600,,,,,,,,600,,,,,600,600,600,600,600,600,,,,600,600,834',
'834,834,,834,,,600,834,834,,,,834,,834,834,834,834,834,834,834,,,,,',
'834,834,834,834,834,834,834,,,834,,,,,,,834,,,834,834,834,834,834,834',
'834,834,,834,834,834,,834,834,,834,834,834,,,,,,,,,,,,,,,,,,,,834,,',
'834,,,834,834,,,834,,,,,,834,,,,,,,,834,,,,,834,834,834,834,834,834',
',,,834,834,833,833,833,,833,,,834,833,833,,,,833,,833,833,833,833,833',
'833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,,,833,,,833,833,833',
'833,833,833,833,833,833,833,833,833,,833,833,,833,833,833,,,,,,,,,,',
',,,,,,,,,833,,,833,,,833,833,,,833,,,,833,,833,,,,,,,,833,,,,,833,833',
'833,833,833,833,,,,833,833,815,815,815,,815,,,833,815,815,,,,815,,815',
'815,815,815,815,815,815,,,,,,815,815,815,815,815,815,815,,,815,,,,,',
',815,,,815,815,815,815,815,815,815,815,,815,815,815,,815,815,,815,815',
'815,,,,,,,,,,,,,,,,,,,,815,,,815,,,815,815,,,815,,,,,,815,,,,,,,,815',
',,,,815,815,815,815,815,815,,,,815,815,304,304,304,,304,,,815,304,304',
',,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304',
',,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,,304',
'304,,,,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,,,,,,,',
',,,,,,304,304,304,304,304,304,,,,304,304,313,313,313,,313,,,304,313',
'313,,,,313,,313,313,313,313,313,313,313,,,,,,313,313,313,313,313,313',
'313,,,313,,,,,,,313,,,313,313,313,313,313,313,313,313,,313,313,313,',
'313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,313,,313,313,,,313',
',,,,,313,,,,,,,,313,,,,,313,313,313,313,313,313,,,,313,313,320,320,320',
',320,,,313,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320',
'320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320',
'320,320,320,320,,320,320,,320,320,320,,,,,,,,,,,,,,,,,,,,320,,,320,',
',320,320,,,320,,,,,,320,,,,,,,,320,,,,,320,320,320,320,320,320,,,,320',
'320,802,802,802,,802,,,320,802,802,,,,802,,802,802,802,802,802,802,802',
',,,,,802,802,802,802,802,802,802,,,802,,,,,,,802,,,802,802,802,802,802',
'802,802,802,,802,802,802,,802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802',
',,802,,,802,802,,,802,,,,,,802,,,,,,,,802,,,,,802,802,802,802,802,802',
',,,802,802,327,327,327,,327,,,802,327,327,,,,327,,327,327,327,327,327',
'327,327,,,,,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327',
'327,327,327,327,327,,327,327,327,,327,327,,327,327,327,,,,,,,,,,,,,',
',,,,,,327,,,327,,,327,327,,,327,,,,,,327,,,,,,,,327,,,,,327,327,327',
'327,327,327,,,,327,327,328,328,328,,328,,,327,328,328,,,,328,,328,328',
'328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,,,328',
',,328,328,328,328,328,328,328,328,,328,328,328,,328,328,,328,328,328',
',,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328,,,,,,,,328,,,',
',328,328,328,328,328,328,,,,328,328,340,340,340,,340,,,328,340,340,',
',,340,,340,340,340,340,340,340,340,,,,,,340,340,340,340,340,340,340',
',,340,,,,,,,340,,,340,340,340,340,340,340,340,340,,340,340,340,,340',
'340,,,,340,,,,,,,,,,,,,,,,,,,,340,,,340,,,340,340,,,340,,,,,,,,,,,,',
',,,,,,340,340,340,340,340,340,,,,340,340,342,342,342,,342,,,340,342',
'342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342,342,342,342',
'342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342,342,342,',
'342,342,,,,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,,,',
',,,,,,,,,,342,342,342,342,342,342,,,,342,342,754,754,754,,754,,,342',
'754,754,,,,754,,754,754,754,754,754,754,754,,,,,,754,754,754,754,754',
'754,754,,,754,,,,,,,754,,,754,754,754,754,754,754,754,754,,754,754,754',
',754,754,,754,754,754,,,,,,,,,,,,,,,,,,,,754,,,754,,,754,754,,,754,',
',,,,754,,,,,,,,754,,,,,754,754,754,754,754,754,,,,754,754,752,752,752',
',752,,,754,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752',
'752,752,752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752',
',752,752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752',
'752,,,752,,,,,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752',
'751,751,751,,751,,,752,751,751,,,,751,,751,751,751,751,751,751,751,',
',,,,751,751,751,751,751,751,751,,,751,,,,,,,751,,,751,751,751,751,751',
'751,751,751,,751,751,751,,751,751,,751,751,751,,,,,,,,,,,,,,,,,,,,751',
',,751,,,751,751,,,751,,,,,,751,,,,,,,,751,,,,,751,751,751,751,751,751',
',,,751,751,750,750,750,,750,,,751,750,750,,,,750,,750,750,750,750,750',
'750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,,,750,,,750,750,750',
'750,750,750,750,750,,750,750,750,,750,750,,750,750,750,,,,,,,,,,,,,',
',,,,,,750,,,750,,,750,750,,,750,,,,,,750,,,,,,,,750,,,,,750,750,750',
'750,750,750,,,,750,750,749,749,749,,749,,,750,749,749,,,,749,,749,749',
'749,749,749,749,749,,,,,,749,749,749,749,749,749,749,,,749,,,,,,,749',
',,749,749,749,749,749,749,749,749,,749,749,749,,749,749,,749,749,749',
',,,,,,,,,,,,,,,,,,,749,,,749,,,749,749,,,749,,,,,,749,,,,,,,,749,,,',
',749,749,749,749,749,749,,,,749,749,735,735,735,,735,,,749,735,735,',
',,735,,735,735,735,735,735,735,735,,,,,,735,735,735,735,735,735,735',
',,735,,,,,,,735,,,735,735,735,735,735,735,735,735,,735,735,735,,735',
'735,,735,735,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735,735,,,735,,,,,,735',
',,,,,,,735,,,,,735,735,735,735,735,735,,,,735,735,394,394,394,,394,',
',735,394,394,,,,394,,394,394,394,394,394,394,394,,,,,,394,394,394,394',
'394,394,394,,,394,,,,,,,394,,,394,394,394,394,394,394,394,394,,394,394',
'394,,394,394,,394,394,394,,,,,,,,,,,,,,,,,,,,394,,,394,,,394,394,,,394',
',,,,,394,,,,,,,,394,,,,,394,394,394,394,394,394,,,,394,394,733,733,733',
',733,,,394,733,733,,,,733,,733,733,733,733,733,733,733,,,,,,733,733',
'733,733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733,733,733,733',
',733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733',
'733,,,733,,,,,,733,,,,,,,,733,,,,,733,733,733,733,733,733,,,,733,733',
'558,558,558,,558,,,733,558,558,,,,558,,558,558,558,558,558,558,558,',
',,,,558,558,558,558,558,558,558,,,558,,,,,,,558,,,558,558,558,558,558',
'558,558,558,558,558,558,558,,558,558,,558,558,558,,,,,,,,,,,,,,,,,,',
',558,,,558,,,558,558,,,558,,558,,558,,558,,,,,,,,558,,,,,558,558,558',
'558,558,558,,,,558,558,643,643,643,,643,,,558,643,643,,,,643,,643,643',
'643,643,643,643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,,643',
',,643,643,643,643,643,643,643,643,,643,643,643,,643,643,,643,643,643',
',,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,572,,572,572,572,643,572',
',,,,,,643,,,,405,643,643,643,643,643,643,405,405,405,643,643,405,405',
'405,,405,,,643,,572,572,,,405,405,405,,,572,572,572,572,,,405,405,,405',
'405,405,405,405,,,,,,,,,,,,,,,,,,,,,,,,405,405,405,405,405,405,405,405',
'405,405,405,405,405,405,,,405,405,405,,,405,,405,405,,,405,405,,405',
',405,,405,,405,405,405,405,405,405,405,,405,405,405,,,,,,,,,,,,,405',
'405,,405,,405,432,432,432,,432,,,,432,432,,,,432,,432,432,432,432,432',
'432,432,,,,,,432,432,432,432,432,432,432,,,432,,,,,,,432,,,432,432,432',
'432,432,432,432,432,432,432,432,432,,432,432,,432,432,432,,,,,,,,,,',
',,,,,,,,,432,,,432,,,432,432,,,432,,432,,432,,432,,,,,,,,432,,,,,432',
'432,432,432,432,432,,,,432,432,434,434,434,,434,,,432,434,434,,,,434',
',434,434,434,434,434,434,434,,,,,,434,434,434,434,434,434,434,,,434',
',,,,,,434,,,434,434,434,434,434,434,434,434,,434,434,434,,434,434,,434',
'434,434,,,,,,,,,,,,,,,,,,,,434,,,434,,,434,434,,,434,,,,,,434,,,,,,',
',434,,,,,434,434,434,434,434,434,,,,434,434,435,435,435,,435,,,434,435',
'435,,,,435,,435,435,435,435,435,435,435,,,,,,435,435,435,435,435,435',
'435,,,435,,,,,,,435,,,435,435,435,435,435,435,435,435,,435,435,435,',
'435,435,,435,435,435,,,,,,,,,,,,,,,,,,,,435,,,435,,,435,435,,,435,,',
',,,435,,,,,,,,435,,,,,435,435,435,435,435,435,,,,435,435,436,436,436',
',436,,,435,436,436,,,,436,,436,436,436,436,436,436,436,,,,,,436,436',
'436,436,436,436,436,,,436,,,,,,,436,,,436,436,436,436,436,436,436,436',
',436,436,436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436',
'436,,,436,,,,,,436,,,,,,,,436,,,,,436,436,436,436,436,436,,,,436,436',
'649,649,649,,649,,,436,649,649,,,,649,,649,649,649,649,649,649,649,',
',,,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649',
'649,649,649,,649,649,649,,649,649,,,,649,,,,,,,,,,,,,,,,,,,,649,,,649',
',,649,649,,,649,,,,,,,,,,,,,,,,,,,649,649,649,649,649,649,,,,649,649',
'713,713,713,,713,,,649,713,713,,,,713,,713,713,713,713,713,713,713,',
',,,,713,713,713,713,713,713,713,,,713,,,,,,,713,,,713,713,713,713,713',
'713,713,713,713,713,713,713,,713,713,,713,713,713,,,,,,,,,,,,,,,,,,',
',713,,,713,,,713,713,,,713,,713,,713,,713,,,,,,,,713,,,,,713,713,713',
'713,713,713,,,,713,713,660,660,660,,660,,,713,660,660,,,,660,,660,660',
'660,660,660,660,660,,,,,,660,660,660,660,660,660,660,,,660,,,,,,,660',
',,660,660,660,660,660,660,660,660,,660,660,660,,660,660,,,,660,,,,,',
',,,,,,,,,,,,,,660,,,660,,,660,660,,,660,,,,,,,,,,,,,,,,,,,660,660,660',
'660,660,660,,,,660,660,666,666,666,,666,,,660,666,666,,,,666,,666,666',
'666,666,666,666,666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,,666',
',,666,666,666,666,666,666,666,666,,666,666,666,,666,666,,666,666,666',
',,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,666,,,,666,,,,,,,,666',
',,,,666,666,666,666,666,666,,,,666,666,520,520,520,,520,,,666,520,520',
',,,520,,520,520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520',
',,520,,,,,,,520,,,520,520,520,520,520,520,520,520,520,520,520,520,,520',
'520,,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,,,520',
',,,,,,,520,,,,,520,520,520,520,520,520,,,,520,520,517,517,517,,517,',
',520,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517,517',
'517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,517,517',
'517,517,,517,517,,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517',
',,517,,517,,,,517,,,,,,,,517,,,,,517,517,517,517,517,517,,,,517,517',
'512,512,512,,512,,,517,512,512,,,,512,,512,512,512,512,512,512,512,',
',,,,512,512,512,512,512,512,512,,,512,,,,,,,512,,,512,512,512,512,512',
'512,512,512,,512,512,512,,512,512,,512,512,512,,,,,,,,,,,,,,,,,,,,512',
',,512,,,512,512,,,512,,,,,,512,,,,,,,,512,,,,,512,512,512,512,512,512',
',,,512,512,508,508,508,,508,,,512,508,508,,,,508,,508,508,508,508,508',
'508,508,,,,,,508,508,508,508,508,508,508,,,508,,,,,,,508,,,508,508,508',
'508,508,508,508,508,,508,508,508,,508,508,,508,508,508,,,,,,,,,,,,,',
',,,,,,508,,,508,,,508,508,,,508,,,,,,508,,,,,,,,508,,,,,508,508,508',
'508,508,508,,,,508,508,507,507,507,,507,,,508,507,507,,,,507,,507,507',
'507,507,507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,,,507',
',,507,507,507,507,507,507,507,507,,507,507,507,,507,507,,507,507,507',
',,,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507,,,,,,507,,,,,,,,507,,,',
'464,507,507,507,507,507,507,464,464,464,507,507,464,464,464,,464,,,507',
',,,,,,464,,,,,,,,,,464,464,,464,464,464,464,464,,,,,,,,,,,,,467,,,,',
',,467,467,467,,,467,467,467,,467,,,,,,464,,,,467,,,464,,,,,464,464,467',
'467,,467,467,467,467,467,,,,,,,,,,,,,,464,,,,,,,,,,,,,464,,,,,464,,',
'467,,,,,,,467,,,,,467,467,,,,,,,,,,,,,,,,,,,,,,467,,,,,,506,506,506',
',506,,,467,506,506,,,467,506,,506,506,506,506,506,506,506,,,,,,506,506',
'506,506,506,506,506,,,506,,,,,,,506,,,506,506,506,506,506,506,506,506',
',506,506,506,,506,506,,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506',
'506,,,506,,,,,,506,,,,,,,,506,,,,,506,506,506,506,506,506,,,,506,506',
'682,682,682,,682,,,506,682,682,,,,682,,682,682,682,682,682,682,682,',
',,,,682,682,682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682',
'682,682,682,,682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682',
',,682,,,682,682,,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682',
',,,682,682,707,707,707,,707,,,682,707,707,,,,707,,707,707,707,707,707',
'707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,397,,707,,,707,707',
'707,707,707,707,707,707,,707,707,707,,707,707,,707,707,707,397,397,397',
'397,397,397,397,397,397,397,397,,397,397,,,397,397,,707,,,707,,,707',
'707,,,707,,,397,,397,707,397,397,397,397,397,397,397,707,397,,,,707',
'707,707,707,707,707,,,,707,707,,397,,,,,,707,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12',
'12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12',
'12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12',
'12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,596,596,596,596,596,596,596',
'596,596,596,596,596,596,596,596,596,596,596,596,596,596,596,596,596',
',,,596,596,596,596,596,596,596,596,596,596,,,,,,596,596,596,596,596',
'596,596,596,596,,,596,,,,,,,,,596,596,,596,596,596,596,596,596,596,',
',596,596,,,,596,596,596,596,,,,,,,,,,,,,,596,596,,596,596,596,596,596',
'596,596,596,596,596,596,,,596,596,,,,,,,,,,596,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11',
'11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11',
',11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,385,385,385,385,385',
'385,385,385,385,385,385,385,385,385,385,385,385,385,385,385,385,385',
'385,385,,,,385,385,385,385,385,385,385,385,385,385,,,,,,385,385,385',
'385,385,385,385,385,385,,,385,,,,,,,,,385,385,,385,385,385,385,385,385',
'385,,,385,385,,,,385,385,385,385,,,,,,,,,,,,,,385,385,,385,385,385,385',
'385,385,385,385,385,385,385,,,385,385,,,,,,,,,,385,723,723,723,723,723',
'723,723,723,723,723,723,723,723,723,723,723,723,723,723,723,723,723',
'723,723,,,,723,723,723,723,723,723,723,723,723,723,,,,,,723,723,723',
'723,723,723,723,723,723,,,723,,,,,,,,,723,723,,723,723,723,723,723,723',
'723,,,723,723,,,,723,723,723,723,,,,,,,,,,,,,,723,723,,723,723,723,723',
'723,723,723,723,723,723,723,,,723,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71',
',,,,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,,,71,71,,71,71,71,71',
'71,71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71',
'71,71,71,71,71,71,,,71,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85',
'85,85,85,85,85,85,85,85,85,,,,85,85,85,85,85,85,85,85,85,85,,,,,,85',
'85,85,85,85,85,85,85,85,85,85,85,,85,,,,,,,85,85,,85,85,85,85,85,85',
'85,,,85,85,,,,85,85,85,85,,,,,,,,,,,,,,85,85,,85,85,85,85,85,85,85,85',
'85,85,85,949,949,85,,949,,,,,,,,,949,949,,949,949,949,949,949,949,949',
',,949,949,,,,949,949,949,949,,,,,,949,,,,,,,,949,949,,949,949,949,949',
'949,949,949,949,949,949,949,253,253,949,,253,,,,,,,,,253,253,,253,253',
'253,253,253,253,253,,,253,253,,,,253,253,253,253,,,,,,,,,,,,,,253,253',
',253,253,253,253,253,253,253,253,253,253,253,943,943,253,,943,,,,,,',
',,943,943,,943,943,943,943,943,943,943,,,943,943,,,,943,943,943,943',
',,,,,943,,,,,,,,943,943,,943,943,943,943,943,943,943,943,943,943,943',
'252,252,943,,252,,,,,,,,,252,252,,252,252,252,252,252,252,252,,,252',
'252,,,,252,252,252,252,,,,,,,,,,,,,,252,252,,252,252,252,252,252,252',
'252,252,252,252,252,431,431,252,,431,,,,,,,,,431,431,,431,431,431,431',
'431,431,431,,,431,431,,,,431,431,431,431,,,,,,431,,,,,,,,431,431,,431',
'431,431,431,431,431,431,431,431,431,431,510,510,431,,510,,,,,,,,,510',
'510,,510,510,510,510,510,510,510,,,510,510,,,,510,510,510,510,,,,,,510',
',,,,,,,510,510,,510,510,510,510,510,510,510,510,510,510,510,204,204',
'510,,204,,,,,,,,,204,204,,204,204,204,204,204,204,204,,,204,204,,,,204',
'204,204,204,,,,,,204,,,,,,,,204,204,,204,204,204,204,204,204,204,204',
'204,204,204,203,203,204,,203,,,,,,,,,203,203,,203,203,203,203,203,203',
'203,,,203,203,,,,203,203,203,203,,,,,,203,,,,,,,,203,203,,203,203,203',
'203,203,203,203,203,203,203,203,509,509,203,,509,,,,,,,,,509,509,,509',
'509,509,509,509,509,509,,,509,509,,,,509,509,509,509,,,,,,509,,,,,,',
',509,509,,509,509,509,509,509,509,509,509,509,509,509,711,711,509,,711',
',,,,,,,,711,711,,711,711,711,711,711,711,711,,,711,711,,,,711,711,711',
'711,,,,,,711,,,,,,,,711,711,,711,711,711,711,711,711,711,711,711,711',
'711,497,497,711,,497,,,,,,,,,497,497,,497,497,497,497,497,497,497,,',
'497,497,,,,497,497,497,497,,,,,,497,,,,,,,,497,497,,497,497,497,497',
'497,497,497,497,497,497,497,712,712,497,,712,,,,,,,,,712,712,,712,712',
'712,712,712,712,712,,,712,712,,,,712,712,712,712,,,,,,712,,,,,,,,712',
'712,,712,712,712,712,712,712,712,712,712,712,712,560,560,712,,560,,',
',,,,,,560,560,,560,560,560,560,560,560,560,,,560,560,,,,560,560,560',
'560,,,,,,560,,,,,,,,560,560,,560,560,560,560,560,560,560,560,560,560',
'560,948,948,560,,948,,,,,,,,,948,948,,948,948,948,948,948,948,948,,',
'948,948,,,,948,948,948,948,,,,,,948,,,,,,,,948,948,,948,948,948,948',
'948,948,948,948,948,948,948,498,498,948,,498,,,,,,,,,498,498,,498,498',
'498,498,498,498,498,,,498,498,,,,498,498,498,498,,,,,,498,,,,,,,,498',
'498,,498,498,498,498,498,498,498,498,498,498,498,430,430,498,,430,,',
',,,,,,430,430,,430,430,430,430,430,430,430,,,430,430,,,,430,430,430',
'430,,,,,,430,,,,,,,,430,430,,430,430,430,430,430,430,430,430,430,430',
'430,559,559,430,,559,,,,,,,,,559,559,,559,559,559,559,559,559,559,,',
'559,559,,,,559,559,559,559,,,,,,559,,,,,,,,559,559,,559,559,559,559',
'559,559,559,559,559,559,559,,,559,734,734,734,734,734,734,734,734,734',
'734,734,,734,734,,,734,734,,,,,,,,,,,,,,,734,,734,,734,734,734,734,734',
'734,734,,734,744,744,744,744,744,744,744,744,744,744,744,,744,744,,734',
'744,744,,,,,,,,,,,,,,,744,,744,,744,744,744,744,744,744,744,,744,835',
'835,835,835,835,835,835,835,835,835,835,,835,835,,744,835,835,,,,,,',
',,,,,,,,835,,835,,835,835,835,835,835,835,835,,835,24,24,24,24,24,24',
'24,24,24,24,24,,24,24,,835,24,24,,,,,,,,,,,,,,,24,,24,,24,24,24,24,24',
'24,24,,24,746,746,746,746,746,746,746,746,746,746,746,,746,746,,24,746',
'746,,,,,,,,,,,,,,,746,,746,,746,746,746,746,746,746,746,,746,832,832',
'832,832,832,832,832,832,832,832,832,,832,832,,746,832,832,,,,,,,,,,',
',,,,832,,832,,832,832,832,832,832,832,832,,832,748,748,748,748,748,748',
'748,748,748,748,748,,748,748,,832,748,748,,,,,,,,,,,,,,,748,,748,,748',
'748,748,748,748,748,748,,748,511,511,511,511,511,511,511,511,511,511',
'511,,511,511,,748,511,511,,,,,,,,,,,,,,,511,,511,,511,511,511,511,511',
'511,511,,511,462,462,462,462,462,462,462,462,462,462,462,,462,462,,511',
'462,462,,,,,,,,,,,,,,,462,,462,,462,462,462,462,462,462,462,,462,417',
'417,417,417,417,417,417,417,417,417,417,,417,417,462,462,417,417,,,',
',,,,,,,,,,,417,,417,,417,417,417,417,417,417,417,,417,266,266,266,266',
'266,266,266,266,266,266,266,,266,266,,417,266,266,,,,,,,,,,,,,,,266',
',266,,266,266,266,266,266,266,266,,266,741,741,741,741,741,741,741,741',
'741,741,741,,741,741,,266,741,741,,,,,,,,,,,,,,,741,,741,,741,741,741',
'741,741,741,741,,741,739,739,739,739,739,739,739,739,739,739,739,,739',
'739,,741,739,739,,,,,,,,,,,,,,,739,,739,,739,739,739,739,739,739,739',
',739,661,661,661,661,661,661,661,661,661,661,661,,661,661,,739,661,661',
',,,,,,,,,,,,,,661,,661,,661,661,661,661,661,661,661,,661,,,,,,,,,,,',
',,,,661' ]
        racc_action_check = arr = ::Array.new(23604, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   856,  2914,  1082,   nil,   561,   nil,   nil, 15957,  1455,
   nil, 21332, 21084,   624,   nil,  1249,  1003,   514,   342,   951,
   399,   nil,    67, 10990, 23026,  1054,   nil,   525,   283, 11228,
 11353, 11483, 11607, 11731,   nil,  2539, 11855, 11979,   nil,   946,
   441,   216,  1013,   798, 12351, 12475, 12599,   939,   600,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1030,   nil, 12847, 12971,
   nil,    56,   nil, 13095, 13219,   nil,   nil, 13343, 13469,   971,
   nil, 21693,   nil,   nil,   nil,   nil,   nil,    35,   nil,   nil,
   nil,   nil,   nil,   923,   920, 21806,   nil,   nil,   nil,   640,
   nil,   nil,   255,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil, 13593,   nil,   nil,   nil,   nil,
 13717, 13841, 13965, 14089, 14213,   928,   nil,   361,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   869,   nil,  1664,
 14461, 14585,  4788, 22294, 22233,  4912,  5036,  5160,  5284,  5408,
  5532,   nil,   nil,   644,   143,   206,   906,   230,   820,   864,
   nil,  6153,  4164,   842,  6277,  6401,  6525,  6649,  6773,  6897,
  7021,  7145,  7269,  7393,  7517,  7641,  7765,  7889,  8013,  8137,
  8261,  8385,  8509,  8633,  8757,  8881,  9005,  9129,  9253,  9377,
   nil,   nil, 22050, 21928,   833,  9501,   nil,   839,   nil,   nil,
   nil,  9625,   nil,   nil,  9749,   nil, 23341,   nil,   795,   794,
   nil, 14957,   822, 15205,   nil,   780,   nil,   nil,   520,   nil,
  1414, 15577,   770,  3164,   765,   789,   737, 15825,  4289,   679,
   687,   730,   807,   481,   nil,   761,   710,   111,   nil,   nil,
   nil,   740,   760,   647, 16577,   nil,   352,   683,   665,   817,
   nil,   663,   nil, 16701,  2164,   767,   nil,   373,   506,   631,
 16825,   nil,   nil, 11317,   756,   120,    51, 17073, 17197,   560,
   684,   384,   129,    90,   860,   448,   123,   451,   nil,   nil,
 17321,   nil, 17445,   330,   259,   565,   140,    76,   363,   487,
   470,   455,   nil,   611,   nil,   nil,   nil,   nil,   nil,   441,
   nil,   435,   nil,   420,   nil,   254,   385,   nil,   248,    40,
   nil,   309,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  4664, 21456,   nil,   nil,   nil,   nil,
   244,   nil,   187,   nil, 18313,   176,   nil, 20952,   148,   nil,
   nil,   115,    63,   555,   467, 18799,   nil,   nil,   nil,   385,
   130,    88,   nil,   nil,   900,   770,   nil, 23296,   nil,    41,
   nil,   nil, 15826,   nil,   nil,   nil,   nil,   154,   nil,    -9,
 22782, 22111, 18929,   268, 19053, 19177, 19301,  3664,  3539,   339,
   790,   -43,  1323,  1322,  1321,  3789,  3914,  4039,  3414,  3289,
  3164,  3039,  2039,  2789,  2664,  2539,  2414,  2289,   853,   956,
  2164,  2914, 23251,   201, 20531,   nil,   nil, 20587,   nil,   nil,
   nil,   nil,   212,   210,  1257,  1254,   nil,   nil, 12103,   nil,
   nil,  9998,   nil, 10122,   nil, 10246,   nil, 10370,   720,  1253,
  1245,   nil,   nil,  1242, 10618,  1223, 10742, 22477, 22721,   908,
  1241,   nil,   nil, 10866,  1196,   nil, 20704, 20417, 20293, 22355,
 22172, 23206, 20169,  1310,  1307,  1187,   nil, 20045,   nil,   nil,
 19921,   nil,  1189,   nil,   403,  1213,    62,  1966,   nil,  1167,
  1148,  1147,   nil,   nil,   nil,   nil,   nil,   nil,  1124,   nil,
   576,   nil,   nil,   nil,   nil,  1196,   nil,   nil,  1195,     0,
  1219,   nil,  1414,   114,   122,  1211,  1211,   nil, 18561, 22843,
 22599,    99,   nil,   449,   419,   165,   nil,   947,   nil,    55,
  5781,   nil, 18731,   nil,   nil,   nil, 14337,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   288,   nil,
   nil,   nil,  1070,   nil,  1076,   nil, 21208,   nil,  1059,  5905,
 16081,   438,  1065,  9874, 12227, 12723,  5657,  1043,   nil,   nil,
   nil, 14709, 14833,  1035,   nil, 15329, 15081,   nil,   nil,    97,
    54,     0,   510,  1064, 13343,  1078,   nil,   nil,   571,   nil,
   nil,   nil,   nil,   nil,   nil,   261,   nil,   nil,   nil,   nil,
  1081,   nil,  1136, 18685,   nil,   nil,   nil,  1110,   185, 19425,
  1104,   nil,  1118,   262,   276,  1161,   388,  1164,  1182,  1144,
 19673, 23476,  1211,  1218,   253,  1284, 19797,   nil,   nil,   442,
   nil,   nil,   nil,  2664,  2289,  1174,   701,   nil,  1841,   nil,
   nil,  1436, 20828,   nil,   774,   nil,  1206,   321,   nil,  1232,
   nil,   nil,   649,   nil,  1345,   nil,   nil,   nil,   nil,  1360,
   nil, 10494,  1247,   125,   118,   159,   121, 20952,   nil,  1069,
   nil, 22416, 22538, 19549,   nil,   nil,   nil,    49,   508,  1164,
  1789,  1716,   320, 21580,   158,  1119,  2789,   nil,   nil,   nil,
   nil,   nil,   131, 18437, 22891, 18189,   nil,   189,   nil, 23431,
   nil, 23386,   nil,   nil, 22936,   nil, 23071,   nil, 23161, 18065,
 17941, 17817, 17693,    77, 17569,   267,   275,   288,   nil,   314,
   306,   nil,  1150,   312,   nil,  1914,   nil,  2414,  3664,   nil,
   nil,   356,   355,   nil,   nil,   497,   nil,  4539,   392,   472,
   nil,   nil,   nil,   478,   591,   480,   483,   491,   nil,   nil,
   505,   544,   nil,   546,   nil,   562,   644,   574,  1034,   nil,
   697,   nil, 16949,   712,  1289,  2039,   nil,   144,    97,    96,
   322,  1267,   nil,   614,  3539, 16453,   nil,   404,   771,   785,
   679,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   706,
   697,   nil, 23116, 16329, 16205, 22981,  1591,   nil,  1466,   nil,
   nil,  1311,   nil,   759,   741,   nil,   nil,   nil, 15701,   876,
  3039,   779,   894,   nil,  3414,   nil,   nil,    34, 15453,   nil,
   nil,   nil,   nil,  1341,   nil,   nil,  1214,   nil,  1186,   nil,
  1091,   nil,   nil,   nil,   258,  1181,   802,   nil,   173,   nil,
   926,   940,  6029,  3789,   nil,   nil,   951,   443,   nil,   nil,
   nil,   nil,   994,   nil,   837,   852,   858,   860,   nil,   861,
   nil,  1275,  1077,   937,   nil,   883,   nil,   nil,   nil,  1539,
  1167,  1170,  1278,   964,  1282,   nil,   892,   893,   895,   904,
   906,   893,   907,  1023,  4414,   nil,   nil,   nil,   136,  4039,
   nil,   nil,  3914,  3289,   864,   nil,   nil,   833,   nil,   734,
   nil,   nil,   nil, 21989,   nil,   nil,  1072, 11114, 22660, 21867,
  1292,   nil,   604,   nil,   nil,   nil,   763,   967,   819,   nil,
   nil,   nil,  1102,  1107,  1108,   990,   991,   993,   997,  1038,
  1040,   nil,  1137,   175,   146,   176,  1392,   881,   886,   nil,
   nil,   nil,   nil,   nil,   963,   nil,   nil,   nil,    48,   nil,
   871,   nil ]

racc_action_default = [
    -1,  -580,  -579,  -580,    -2,  -566,    -4,    -5,  -580,    -8,
    -9,  -580,  -580,  -580,   -29,  -580,  -580,  -580,  -277,  -580,
   -41,   -44,  -568,  -580,   -49,   -51,   -52,   -53,  -258,  -258,
  -258,  -289,  -328,  -329,   -70,  -579,   -74,   -82,   -84,  -580,
  -493,  -494,  -580,  -580,  -580,  -580,  -580,  -568,  -239,  -270,
  -271,  -272,  -273,  -274,  -275,  -276,  -556,  -279,  -580,  -579,
  -287,  -297,  -394,  -580,  -580,  -302,  -305,  -566,  -580,  -313,
  -320,  -580,  -330,  -331,  -435,  -436,  -437,  -438,  -439,  -579,
  -442,  -579,  -579,  -579,  -579,  -579,  -471,  -477,  -478,  -554,
  -482,  -483,  -555,  -485,  -486,  -487,  -488,  -489,  -490,  -491,
  -492,  -497,  -498,   992,    -3,  -567,  -575,  -576,  -577,    -7,
  -580,  -580,  -580,  -580,  -580,  -580,   -17,  -580,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -122,  -579,
  -580,  -580,  -579,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
  -568,  -569,   -48,  -580,  -493,  -494,  -580,  -277,  -580,  -580,
  -231,  -580,  -579,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
  -400,  -403,  -580,  -580,   -59,  -580,  -296,  -580,  -416,  -419,
   -65,  -579,  -413,   -66,  -568,   -67,  -240,  -253,  -579,  -579,
  -257,  -580,  -263,  -580,  -550,  -568,   -68,   -69,  -566,   -13,
   -14,  -580,   -72,  -579,  -568,  -580,   -75,   -78,  -579,   -90,
   -91,  -580,  -580,   -98,  -289,  -292,  -568,  -406,  -328,  -329,
  -332,  -414,  -580,   -80,  -580,   -86,  -285,  -479,  -480,  -580,
  -216,  -217,  -232,  -580,  -579,  -281,  -241,  -572,  -572,  -580,
  -579,  -298,  -299,  -519,   -50,  -580,  -580,  -580,  -580,  -566,
  -580,  -567,  -493,  -494,  -580,  -580,  -277,  -580,  -353,  -354,
  -580,  -316,  -580,  -113,  -114,  -154,  -155,  -156,  -172,  -177,
  -184,  -187,  -323,  -580,  -493,  -494,  -545,  -546,  -440,  -580,
  -455,  -580,  -457,  -580,  -459,  -580,  -580,  -447,  -580,  -580,
  -453,  -580,  -470,  -472,  -473,  -474,  -475,    -6,  -578,   -23,
   -24,   -25,   -26,   -27,  -579,  -580,   -19,   -20,   -21,  -123,
  -580,   -30,   -39,   -40,  -580,  -580,   -31,  -197,  -568,  -248,
  -249,  -579,  -579,  -557,  -558,  -258,  -411,  -559,  -560,  -558,
  -557,  -258,  -410,  -412,  -559,  -560,   -37,  -205,   -38,  -580,
   -42,   -43,  -195,  -263,   -45,   -46,   -47,  -568,  -295,  -580,
  -580,  -580,  -579,  -285,  -580,  -580,  -580,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -213,  -218,  -219,  -220,  -221,  -222,
  -223,  -224,  -225,  -226,  -227,  -228,  -229,  -230,  -233,  -234,
  -235,  -236,  -568,  -579,  -258,  -557,  -558,  -258,   -56,   -60,
  -259,  -407,  -579,  -579,  -568,  -568,  -291,  -254,  -580,  -262,
  -255,  -580,  -260,  -580,  -264,  -580,   -12,  -567,   -16,  -568,
   -71,  -283,   -87,   -76,  -580,  -568,  -579,  -580,  -580,   -97,
  -580,  -479,  -480,  -580,   -83,   -88,  -580,  -580,  -580,  -580,
  -580,  -237,  -580,  -427,  -580,  -568,  -242,  -574,  -573,  -244,
  -574,  -286,  -580,  -548,  -572,  -580,  -580,  -519,  -397,  -544,
  -544,  -544,  -518,  -520,  -521,  -522,  -523,  -524,  -525,  -526,
  -580,  -528,  -534,  -536,  -537,  -539,  -540,  -541,  -580,  -579,
  -344,  -345,  -579,  -580,  -580,  -580,  -580,  -422,  -579,  -580,
  -580,  -285,  -310,  -108,  -109,  -580,  -111,  -580,  -277,  -580,
  -580,  -321,  -519,  -325,  -564,  -565,  -580,  -441,  -456,  -461,
  -462,  -464,  -443,  -458,  -444,  -460,  -445,  -446,  -580,  -449,
  -451,  -452,  -580,  -476,  -580,   -18,  -580,   -28,  -269,  -580,
  -580,  -415,  -580,  -250,  -252,  -580,  -580,   -61,  -246,  -247,
  -408,  -580,  -580,   -63,  -409,  -580,  -580,  -294,  -570,  -557,
  -558,  -557,  -558,  -568,  -195,  -580,  -383,  -384,  -579,  -386,
  -401,   -54,  -404,   -55,  -405,  -579,  -417,  -420,  -245,  -290,
  -579,  -261,  -265,  -580,  -551,  -552,  -553,   -15,   -73,  -580,
   -79,   -85,  -568,  -557,  -558,  -579,   -94,   -96,  -580,   -81,
  -580,  -204,  -214,  -215,  -568,  -579,  -579,  -280,  -282,  -572,
  -288,  -549,  -395,  -579,  -579,  -579,  -580,  -511,  -580,  -514,
  -516,  -580,  -580,  -355,  -580,  -357,  -359,  -366,  -525,  -568,
  -538,  -542,  -579,  -346,  -579,  -303,  -347,  -348,  -306,  -580,
  -309,  -580,  -568,  -557,  -558,  -561,  -284,  -580,  -108,  -109,
  -110,  -580,  -580,  -579,  -314,  -499,  -500,  -580,  -317,  -579,
  -579,  -519,  -580,  -580,  -568,  -580,  -579,  -448,  -450,  -454,
   -10,  -124,  -267,  -580,  -198,  -580,  -571,  -579,   -33,  -200,
   -34,  -201,   -62,   -35,  -203,   -36,  -202,   -64,  -196,  -580,
  -580,  -580,  -580,  -415,  -580,  -544,  -544,  -544,  -382,  -580,
  -579,  -388,  -580,  -525,  -532,  -579,   -57,  -579,  -579,  -256,
  -266,   -77,   -92,   -89,  -293,  -579,  -351,  -579,  -428,  -579,
  -429,  -430,  -243,  -580,  -580,  -568,  -544,  -544,  -529,  -543,
  -544,  -544,  -535,  -544,  -530,  -568,  -580,  -364,  -580,  -527,
  -580,  -349,  -580,  -580,  -579,  -579,  -308,  -580,  -415,  -580,
  -108,  -109,  -112,  -568,  -579,  -580,  -502,  -580,  -580,  -580,
  -568,  -504,  -326,  -547,  -463,  -466,  -467,  -468,  -469,  -580,
  -268,   -32,  -199,  -251,  -580,  -238,  -373,  -375,  -580,  -378,
  -380,  -580,  -385,  -580,  -389,  -390,  -392,  -393,  -580,  -580,
  -579,  -580,  -580,   -11,  -579,  -434,  -352,  -580,  -580,  -432,
  -398,  -399,  -396,  -580,  -507,  -509,  -580,  -512,  -580,  -515,
  -580,  -517,  -356,  -358,  -362,  -580,  -367,  -300,  -580,  -301,
  -580,  -580,  -580,  -579,  -311,  -415,  -580,  -580,  -318,  -322,
  -324,  -503,  -519,  -465,  -544,  -544,  -544,  -544,  -533,  -544,
  -387,  -580,  -531,  -580,  -402,  -580,  -418,  -421,  -433,  -579,
   -99,  -100,  -580,  -580,  -107,  -431,  -544,  -544,  -544,  -544,
  -360,  -580,  -365,  -580,  -579,  -304,  -307,  -265,  -579,  -579,
  -315,  -501,  -579,  -579,  -580,  -370,  -372,  -580,  -376,  -580,
  -379,  -381,  -391,  -580,  -285,   -58,  -427,  -579,  -580,  -580,
  -106,  -505,  -580,  -508,  -510,  -513,  -580,  -363,  -579,  -423,
  -424,  -425,  -580,  -580,  -580,  -544,  -544,  -544,  -544,  -284,
  -561,  -426,  -568,  -557,  -558,  -561,  -105,  -544,  -361,  -350,
  -312,  -319,  -327,  -368,  -580,  -371,  -374,  -377,  -415,  -506,
  -544,  -369 ]

clist = [
'6,209,212,514,549,552,665,480,352,421,286,4,121,121,126,126,528,398',
'504,267,267,267,373,532,124,124,313,268,268,268,556,116,198,28,393,641',
'469,800,641,28,418,405,411,284,9,601,720,108,104,644,9,105,325,326,28',
'317,329,316,847,695,698,792,28,28,28,428,28,845,254,260,263,756,121',
'516,519,775,474,360,282,362,364,367,370,362,303,689,121,898,644,28,464',
'467,876,358,28,28,788,262,28,379,380,381,382,569,803,571,300,300,873',
'108,330,710,759,2,578,265,276,277,585,476,115,589,269,269,269,630,109',
'361,853,632,197,371,634,339,636,637,28,385,300,490,480,28,28,28,28,28',
'635,9,850,596,318,319,356,522,321,322,383,337,315,785,641,641,714,324',
'324,353,573,324,314,922,515,16,644,320,327,804,328,16,805,391,396,707',
'929,898,416,420,340,814,570,817,267,932,342,719,572,723,395,847,892',
'760,399,844,395,526,16,415,942,672,650,323,324,324,324,324,757,957,251',
'659,463,765,675,472,767,377,473,768,959,532,701,795,28,28,28,28,779',
'873,28,28,28,28,28,28,857,267,843,1,792,623,359,267,978,268,267,28,485',
'699,788,812,363,399,268,366,787,588,790,369,479,479,405,411,753,406',
'532,824,16,500,725,726,505,894,671,372,617,16,815,786,28,576,,,788,489',
'28,,,28,495,766,,772,,,,979,,,,424,425,426,427,652,28,,28,884,553,554',
'523,28,108,486,,488,487,471,282,,758,638,639,282,,,493,655,,,960,470',
',,,728,648,28,269,655,475,808,651,,,,,269,,300,28,28,,,285,771,,,933',
',16,262,668,108,555,702,300,,,602,769,,,,6,,,,121,,126,742,641,16,,594',
',747,,655,124,479,479,644,,608,,595,,,818,819,300,524,300,,820,28,,',
'421,,267,532,895,,896,782,9,324,324,,399,,415,,,,,,,971,,625,,,,607',
',,,916,16,613,16,,,,,16,,,885,626,608,28,,608,,,505,,626,626,,609,,769',
',505,,614,,,,16,267,,883,,,,,,,,399,,,683,406,415,780,,,886,631,,,633',
',,,415,,,,,,,28,774,965,,,,,,390,28,813,647,,,609,,,609,909,,,,,,,28',
'799,,267,,,285,655,,,16,,,399,924,,,,415,,,300,406,,,,640,,,,300,,,',
'406,,823,28,,,28,738,740,,,,28,743,745,532,,420,696,696,121,,126,,28',
'602,,,,,28,669,124,285,715,664,,,285,731,,,988,,963,964,505,,,761,406',
'961,,,602,,626,773,,28,28,479,,862,683,28,28,797,,28,,,,872,,,608,,',
'16,,,,822,,395,776,781,,,,,,718,,,761,,891,724,,,,,602,,,,,,,,,776,',
'776,,737,,809,807,,,,267,,,28,28,,,,,,399,415,,831,,,,16,300,,16,,609',
'121,,614,,,,300,,,,,479,,,28,,,,,,28,,,,,,28,28,,683,,683,,28,761,816',
',,972,,821,,28,,,,,,,855,,,,859,,,406,,,,,,655,,17,,,878,602,,17,,28',
',28,28,,,,,887,,,324,28,213,,,,,,,,213,213,213,,17,291,291,,,,,,,,920',
'683,28,,28,28,,,,,,16,16,213,28,28,,,213,213,696,,213,334,,,,,888,,',
',,,,,,,,,,,,,,692,,683,694,683,28,,,,28,18,,16,16,,17,18,,,16,213,213',
'213,213,17,,324,,,,,,755,,,,,683,28,324,,,300,18,293,293,,,,,776,,300',
'931,,,,,16,267,16,16,,,28,,,,415,399,16,,,,415,602,336,,,28,776,,791',
',28,793,,28,28,,,,,,,,,16,16,,,,28,,,,,16,,17,213,213,213,18,,213,213',
'213,213,213,213,,18,,783,784,,,,,,,17,,,,,,392,,406,,,16,423,,,16,,',
',,,,,,,,,,,19,,,,213,,19,,,,213,,,213,,16,829,,,,,,,,,,,,,,17,,17,19',
',,291,17,,,,16,,,,,18,,482,,484,,,291,,849,16,851,852,,,16,,17,16,16',
'338,856,,18,,,,,,,213,213,,,,897,,,899,,,,,567,,567,,,880,881,,525,',
',,,,19,,,917,,,918,,919,19,,,,,,,,,,,,,,,,18,,18,,,17,293,18,,,,,905',
',,,908,,,,,,,293,,,,,,,,,,18,,,,,,,,,,598,,928,,,,966,,,967,213,968',
',,,,568,,568,,,,,,977,,19,,946,,,,,419,,,,,,,,,,958,,,,,962,19,,,,,',
',990,,,,18,,,,,17,,,,,,,291,,213,,,,,,,291,,,642,,,525,,645,213,646',
',,,,,,,,,,,,,,,,19,,19,,,,,19,,,,,,,,642,,,525,17,,,17,,,41,,,213,,',
'41,,19,,,,,,,213,,,,,,213,,,,,,,,,18,,,41,290,290,,293,,,,,,,,,293,',
',,213,213,,,,,213,213,,,213,,,,40,,333,,,355,40,,732,,,,642,525,19,',
',,,,,,,,,,,,18,,291,18,,40,289,289,,,,41,,291,,,,,,,41,,,,770,,17,17',
',,,,,,,,,,332,,,354,,,,,,778,,,,,,,,,,,,,213,,,794,,,213,,,,,,17,17',
',40,,,,17,,,423,,40,,,,213,19,,,,,,,,,,,293,,,,,41,,,,,,293,,,830,,',
',17,,17,17,,,18,18,,,41,,17,,,,,,,,,,,,,,,,,,,,,19,,,19,213,,17,17,',
',,677,679,680,,,17,213,40,18,18,,,,,828,18,,,,,,,,,,41,,41,,,40,290',
'41,,,,,,,902,,17,,,,17,,,290,912,,,525,,18,419,18,18,41,,,,,,,,18,,',
',,,,,17,,,,,,,,,,355,,355,,,40,,40,,18,18,289,40,,,,17,927,,18,,,,,',
',,,289,19,19,17,,,,,17,,40,17,17,,,,41,,,,,,,,,568,213,18,,,,18,,,,914',
'354,,354,,,,,,,,,19,19,,,,,,19,,,,,,18,,,,,,,,,,,,,,,,,,,,40,,,,,,18',
',,,,,,19,,19,19,,,,,18,,,,19,18,,,18,18,,,,837,839,840,,,41,,,,,,,290',
',,,,,19,19,,290,,,,,,,19,,,864,865,,,867,869,,871,,,,,,,,,,,,,,,,,,',
',,,,,,,19,,,41,19,40,41,,915,,,,289,,,,,,,,,289,,,,,,,,,,,,19,,,,,,',
',,,,,,,,,,,,,,,,,,,19,,,,,,,,40,,,40,,,,19,935,936,938,940,19,941,,19',
'19,,,,,,,,,,,,,,951,953,954,955,,,290,,,,,,,,,,,290,,,,,,,,,,,,,41,41',
',,,,,,,,,,,,,,,,,983,985,986,987,,,,,,,,,989,,,,,,,,,289,,,,991,,41',
'41,,,,289,,41,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,41,41,,',
',,,,,,41,,,,,,40,40,,,,,,40,,,,,,,,,,220,,,,41,41,,,266,266,266,,,,41',
',,,,,,310,311,312,,,,,,40,,40,40,,,,266,,,,,40,,,,,,,355,,41,,,,41,',
',,911,,,,,,,,,,40,40,,,,,,,,,40,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,41,',
',354,,40,,,,40,,,,910,,41,,,,,41,,,41,41,,,,,,,,,,,,,,40,,,,,,,,,,,',
',,,,,,,,,,,,,,40,,,,266,397,266,,,417,422,,,,,40,,,,,40,,,40,40,220',
',,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453',
'454,455,456,457,458,459,460,461,462,,,,,,266,,,,,,266,,,266,,,,,,,266',
',266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,511,,,,,,,266,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,417,624,397,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,266,,,266,,266,,266,,,,,,,,,,,266,,,,,,,,',
',661,662,663,,,,,,,,,266,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,734,,,266,266,739,741',
',,,,744,746,,,624,748,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,',
',,,,,,266,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,266,,',
',,,,,,,,,,,,,,,,,266,,832,,,,,,,,,,,,,,739,741,746,744,,835,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,266,832,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266' ]
        racc_goto_table = arr = ::Array.new(3064, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,22,10,85,85,13,71,57,20,50,2,58,58,62,62,143,25,52,35,35,35,57',
'134,61,61,33,66,66,66,88,17,17,44,29,72,40,86,72,44,29,38,38,47,9,26',
'92,91,5,179,9,8,19,19,44,66,19,6,139,87,87,174,44,44,44,48,44,138,39',
'39,39,131,58,67,67,14,25,6,46,6,6,6,6,6,51,127,58,175,179,44,38,38,128',
'159,44,44,173,69,44,19,19,19,19,56,14,56,64,64,125,91,5,55,136,3,165',
'45,45,45,165,48,11,165,68,68,68,41,7,161,15,70,18,161,70,21,41,41,44',
'32,64,48,71,44,44,44,44,44,42,9,43,63,68,65,80,81,82,84,9,89,31,136',
'72,72,90,31,31,93,94,31,95,128,96,23,179,97,98,99,100,23,101,22,22,102',
'103,175,22,22,104,105,106,107,35,108,109,110,111,112,66,139,113,129',
'6,137,66,140,23,58,138,141,52,142,31,31,31,31,132,128,144,52,145,146',
'143,149,150,7,151,152,153,134,154,127,44,44,44,44,155,125,44,44,44,44',
'44,44,156,35,136,1,174,25,160,35,128,66,35,44,33,88,173,55,162,6,66',
'163,132,164,132,166,6,6,38,38,26,69,134,167,23,33,168,169,50,131,67',
'170,48,23,171,172,44,178,,,173,47,44,,,44,47,41,,26,,,,86,,,,31,31,31',
'31,25,44,,44,87,19,19,6,44,91,5,,9,8,69,46,,134,48,48,46,,,51,38,,,14',
'45,,,,165,48,44,68,38,45,26,48,,,,,68,,64,44,44,,,12,52,,,92,,23,69',
'48,91,5,25,64,,,33,71,,,,6,,,,58,,62,40,72,23,,2,,40,,38,61,6,6,179',
',6,,17,,,10,10,64,68,64,,143,44,,,20,,35,134,132,,132,67,9,31,31,,6',
',58,,,,,,,13,,33,,,,39,,,,132,23,39,23,,,,,23,,,26,6,6,44,,6,,,50,,6',
'6,,69,,71,,50,,69,,,,23,35,,85,,,,,,,,6,,,126,69,58,29,,,10,39,,,39',
',,,58,,,,,,,44,48,132,,,,,,12,44,25,9,,,69,,,69,85,,,,,,,44,48,,35,',
',12,38,,,23,,,6,85,,,,58,,,64,69,,,,68,,,,64,,,,69,,48,44,,,44,22,22',
',,,44,22,22,134,,22,91,91,58,,62,,44,33,,,,,44,68,61,12,91,31,,,12,17',
',,26,,10,10,50,,,6,69,88,,,33,,6,50,,44,44,6,,48,126,44,44,126,,44,',
',,48,,,6,,,23,,,,57,,66,6,6,,,,,,31,,,6,,48,31,,,,,33,,,,,,,,,6,,6,',
'68,,19,66,,,,35,,,44,44,,,,,,6,58,,22,,,,23,64,,23,,69,58,,69,,,,64',
',,,,6,,,44,,,,,,44,,,,,,44,44,,126,,126,,44,6,91,,,25,,91,,44,,,,,,',
'6,,,,6,,,69,,,,,,38,,24,,,19,33,,24,,44,,44,44,,,,,19,,,31,44,24,,,',
',,,,24,24,24,,24,24,24,,,,,,,,126,126,44,,44,44,,,,,,23,23,24,44,44',
',,24,24,91,,24,24,,,,,91,,,,,,,,,,,,,,,,,12,,126,12,126,44,,,,44,27',
',23,23,,24,27,,,23,24,24,24,24,24,,31,,,,,,130,,,,,126,44,31,,,64,27',
'27,27,,,,,6,,64,91,,,,,23,35,23,23,,,44,,,,58,6,23,,,,58,33,27,,,44',
'6,,130,,44,130,,44,44,,,,,,,,,23,23,,,,44,,,,,23,,24,24,24,24,27,,24',
'24,24,24,24,24,,27,,12,12,,,,,,,24,,,,,,30,,69,,,23,30,,,23,,,,,,,,',
',,,,,28,,,,24,,28,,,,24,,,24,,23,12,,,,,,,,,,,,,,24,,24,28,,,24,24,',
',,23,,,,,27,,30,,30,,,24,,12,23,12,12,,,23,,24,23,23,28,12,,27,,,,,',
',24,24,,,,130,,,130,,,,,24,,24,,,12,12,,30,,,,,,28,,,130,,,130,,130',
'28,,,,,,,,,,,,,,,,27,,27,,,24,27,27,,,,,12,,,,12,,,,,,,27,,,,,,,,,,27',
',,,,,,,,,30,,12,,,,130,,,130,24,130,,,,,27,,27,,,,,,130,,28,,12,,,,',
'28,,,,,,,,,,12,,,,,12,28,,,,,,,130,,,,27,,,,,24,,,,,,,24,,24,,,,,,,24',
',,30,,,30,,30,24,30,,,,,,,,,,,,,,,,,28,,28,,,,,28,,,,,,,,30,,,30,24',
',,24,,,54,,,24,,,54,,28,,,,,,,24,,,,,,24,,,,,,,,,27,,,54,54,54,,27,',
',,,,,,,27,,,,24,24,,,,,24,24,,,24,,,,53,,54,,,54,53,,30,,,,30,30,28',
',,,,,,,,,,,,,27,,24,27,,53,53,53,,,,54,,24,,,,,,,54,,,,30,,24,24,,,',
',,,,,,,53,,,53,,,,,,30,,,,,,,,,,,,,24,,,30,,,24,,,,,,24,24,,53,,,,24',
',,30,,53,,,,24,28,,,,,,,,,,,27,,,,,54,,,,,,27,,,30,,,,24,,24,24,,,27',
'27,,,54,,24,,,,,,,,,,,,,,,,,,,,,28,,,28,24,,24,24,,,,133,133,133,,,24',
'24,53,27,27,,,,,27,27,,,,,,,,,,54,,54,,,53,54,54,,,,,,,24,,24,,,,24',
',,54,24,,,30,,27,28,27,27,54,,,,,,,,27,,,,,,,,24,,,,,,,,,,54,,54,,,53',
',53,,27,27,53,53,,,,24,30,,27,,,,,,,,,53,28,28,24,,,,,24,,53,24,24,',
',,54,,,,,,,,,27,24,27,,,,27,,,,27,53,,53,,,,,,,,,28,28,,,,,,28,,,,,',
'27,,,,,,,,,,,,,,,,,,,,53,,,,,,27,,,,,,,28,,28,28,,,,,27,,,,28,27,,,27',
'27,,,,133,133,133,,,54,,,,,,,54,,,,,,28,28,,54,,,,,,,28,,,133,133,,',
'133,133,,133,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,54,28,53,54,,28,,,,53,,,',
',,,,,53,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,53,,,53,,,',
'28,133,133,133,133,28,133,,28,28,,,,,,,,,,,,,,133,133,133,133,,,54,',
',,,,,,,,,54,,,,,,,,,,,,,54,54,,,,,,,,,,,,,,,,,,133,133,133,133,,,,,',
',,,133,,,,,,,,,53,,,,133,,54,54,,,,53,,54,,,,,,,,,,,53,53,,,,,,,,,,',
',,,,,,,,,,,,,,,,54,,54,54,,,,,,,,,54,,,,,,53,53,,,,,,53,,,,,,,,,,34',
',,,54,54,,,34,34,34,,,,54,,,,,,,34,34,34,,,,,,53,,53,53,,,,34,,,,,53',
',,,,,,54,,54,,,,54,,,,54,,,,,,,,,,53,53,,,,,,,,,53,,,,,54,,,,,,,,,,',
',,,,,,,,,,,,,,,54,,,53,,53,,,,53,,,,53,,54,,,,,54,,,54,54,,,,,,,,,,',
',,,53,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,34,34,34,,,34,34,,,,,53,,,,,53',
',,53,53,34,,,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,,,,,,34,,,,,,34,,,34,,,,,,,34,,34,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,34,,34,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',34,,,34,,34,,34,,,,,,,,,,,34,,,,,,,,,,34,34,34,,,,,,,,,34,,,34,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,34,34,,,34,34,34,34,,,,,34,34,,,34,34,,,,,,,,,,,,,,,,,,,,,,',
',,,,34,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,',
'34,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,,,,,,,,34,34,34,34',
',34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3064, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   245,     9,   113,   nil,    43,    -2,   118,    46,    42,
  -311,   110,   327,  -507,  -590,  -647,   nil,    20,   118,   -11,
  -197,    65,   -21,   169,   786,  -185,  -353,   884,  1035,  -166,
   814,   100,    21,   -21,  2116,   -12,   nil,   nil,  -162,    40,
  -218,  -338,  -322,  -618,    31,    84,    43,     8,  -145,   nil,
   -26,    47,  -286,  1403,  1339,  -454,  -237,   -63,     1,   nil,
   nil,    13,     3,  -240,    70,    92,    -4,  -244,    91,    68,
  -335,  -262,  -443,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    81,  -167,    93,   nil,    93,  -321,  -655,  -494,  -300,    89,
  -407,    42,  -526,    94,  -187,   111,  -145,   113,   109,  -520,
   110,  -520,  -381,  -702,   117,  -527,  -153,  -529,  -697,   122,
  -378,  -158,  -378,  -624,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  -688,   -43,  -455,  -706,  -429,
   280,  -557,  -414,  1066,  -300,   nil,  -516,  -561,  -695,  -704,
  -120,  -319,   147,  -307,   191,   -32,  -411,   nil,   nil,   -37,
  -414,   -35,  -412,  -702,  -329,  -432,  -537,   nil,   nil,    16,
   169,    46,   176,   178,  -103,  -245,   181,  -452,  -304,  -304,
   196,  -432,  -391,  -580,  -617,  -751,   nil,   nil,   -70,  -432 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   279,     7,   331,   280,
   nil,   nil,   513,   nil,   801,   nil,   278,   nil,   nil,   nil,
    14,    15,    21,   219,   309,   nil,   nil,   217,   218,   nil,
   272,    20,   nil,   429,    24,    25,    26,    27,   658,   nil,
   nil,   nil,   nil,   nil,   297,   400,    34,   nil,   nil,    36,
    39,    38,   nil,   214,   215,   566,   nil,   123,   408,   122,
   125,    75,    76,   nil,    48,   nil,   401,   nil,   402,   413,
   610,   477,   270,   255,    49,    50,    51,    52,    53,    54,
    55,   nil,   256,    61,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   550,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   685,   539,   nil,   686,   nil,
   529,   nil,   531,   nil,   789,   627,   nil,   nil,   nil,   537,
   nil,   nil,   nil,   722,   nil,   nil,   nil,   412,   257,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,    77,    78,
   nil,   nil,   nil,   nil,   nil,   583,   nil,   nil,   nil,   nil,
   nil,   nil,   530,   541,   542,   764,   545,   548,   nil,   274 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 140, :_reduce_1,
  2, 138, :_reduce_2,
  2, 139, :_reduce_3,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_6,
  2, 141, :_reduce_none,
  1, 144, :_reduce_none,
  0, 148, :_reduce_9,
  5, 144, :_reduce_10,
  4, 147, :_reduce_11,
  2, 149, :_reduce_12,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_15,
  2, 153, :_reduce_16,
  0, 169, :_reduce_17,
  4, 146, :_reduce_18,
  3, 146, :_reduce_19,
  3, 146, :_reduce_20,
  3, 146, :_reduce_21,
  2, 146, :_reduce_22,
  3, 146, :_reduce_23,
  3, 146, :_reduce_24,
  3, 146, :_reduce_25,
  3, 146, :_reduce_26,
  3, 146, :_reduce_27,
  4, 146, :_reduce_28,
  1, 146, :_reduce_none,
  3, 146, :_reduce_30,
  3, 146, :_reduce_31,
  6, 146, :_reduce_32,
  5, 146, :_reduce_33,
  5, 146, :_reduce_34,
  5, 146, :_reduce_35,
  5, 146, :_reduce_36,
  3, 146, :_reduce_37,
  3, 146, :_reduce_38,
  3, 146, :_reduce_39,
  3, 146, :_reduce_40,
  1, 146, :_reduce_none,
  3, 157, :_reduce_42,
  3, 157, :_reduce_43,
  1, 168, :_reduce_none,
  3, 168, :_reduce_45,
  3, 168, :_reduce_46,
  3, 168, :_reduce_47,
  2, 168, :_reduce_48,
  1, 168, :_reduce_none,
  1, 156, :_reduce_50,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 173, :_reduce_none,
  4, 173, :_reduce_54,
  4, 173, :_reduce_55,
  0, 179, :_reduce_56,
  0, 180, :_reduce_57,
  6, 177, :_reduce_58,
  2, 172, :_reduce_59,
  3, 172, :_reduce_60,
  4, 172, :_reduce_61,
  5, 172, :_reduce_62,
  4, 172, :_reduce_63,
  5, 172, :_reduce_64,
  2, 172, :_reduce_65,
  2, 172, :_reduce_66,
  2, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 158, :_reduce_none,
  3, 158, :_reduce_71,
  1, 184, :_reduce_none,
  3, 184, :_reduce_73,
  1, 183, :_reduce_74,
  2, 183, :_reduce_75,
  3, 183, :_reduce_76,
  5, 183, :_reduce_77,
  2, 183, :_reduce_78,
  4, 183, :_reduce_79,
  2, 183, :_reduce_80,
  4, 183, :_reduce_81,
  1, 183, :_reduce_82,
  3, 183, :_reduce_83,
  1, 187, :_reduce_none,
  3, 187, :_reduce_85,
  2, 186, :_reduce_86,
  3, 186, :_reduce_87,
  1, 189, :_reduce_88,
  3, 189, :_reduce_89,
  1, 188, :_reduce_90,
  1, 188, :_reduce_91,
  4, 188, :_reduce_92,
  3, 188, :_reduce_93,
  3, 188, :_reduce_94,
  3, 188, :_reduce_95,
  3, 188, :_reduce_96,
  2, 188, :_reduce_97,
  1, 188, :_reduce_98,
  1, 165, :_reduce_99,
  1, 165, :_reduce_100,
  4, 165, :_reduce_101,
  3, 165, :_reduce_102,
  3, 165, :_reduce_103,
  3, 165, :_reduce_104,
  3, 165, :_reduce_105,
  2, 165, :_reduce_106,
  1, 165, :_reduce_107,
  1, 192, :_reduce_108,
  1, 192, :_reduce_none,
  2, 193, :_reduce_110,
  1, 193, :_reduce_111,
  3, 193, :_reduce_112,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_116,
  1, 194, :_reduce_117,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 154, :_reduce_120,
  1, 154, :_reduce_none,
  1, 155, :_reduce_122,
  0, 200, :_reduce_123,
  4, 155, :_reduce_124,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  3, 171, :_reduce_195,
  5, 171, :_reduce_196,
  3, 171, :_reduce_197,
  5, 171, :_reduce_198,
  6, 171, :_reduce_199,
  5, 171, :_reduce_200,
  5, 171, :_reduce_201,
  5, 171, :_reduce_202,
  5, 171, :_reduce_203,
  4, 171, :_reduce_204,
  3, 171, :_reduce_205,
  3, 171, :_reduce_206,
  3, 171, :_reduce_207,
  3, 171, :_reduce_208,
  3, 171, :_reduce_209,
  3, 171, :_reduce_210,
  3, 171, :_reduce_211,
  3, 171, :_reduce_212,
  3, 171, :_reduce_213,
  4, 171, :_reduce_214,
  4, 171, :_reduce_215,
  2, 171, :_reduce_216,
  2, 171, :_reduce_217,
  3, 171, :_reduce_218,
  3, 171, :_reduce_219,
  3, 171, :_reduce_220,
  3, 171, :_reduce_221,
  3, 171, :_reduce_222,
  3, 171, :_reduce_223,
  3, 171, :_reduce_224,
  3, 171, :_reduce_225,
  3, 171, :_reduce_226,
  3, 171, :_reduce_227,
  3, 171, :_reduce_228,
  3, 171, :_reduce_229,
  3, 171, :_reduce_230,
  2, 171, :_reduce_231,
  2, 171, :_reduce_232,
  3, 171, :_reduce_233,
  3, 171, :_reduce_234,
  3, 171, :_reduce_235,
  3, 171, :_reduce_236,
  3, 171, :_reduce_237,
  6, 171, :_reduce_238,
  1, 171, :_reduce_none,
  1, 167, :_reduce_240,
  1, 202, :_reduce_none,
  2, 202, :_reduce_242,
  4, 202, :_reduce_243,
  2, 202, :_reduce_244,
  3, 206, :_reduce_245,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_248,
  1, 162, :_reduce_249,
  2, 162, :_reduce_250,
  4, 162, :_reduce_251,
  2, 162, :_reduce_252,
  1, 182, :_reduce_253,
  2, 182, :_reduce_254,
  2, 182, :_reduce_255,
  4, 182, :_reduce_256,
  1, 182, :_reduce_none,
  0, 210, :_reduce_258,
  2, 176, :_reduce_259,
  2, 209, :_reduce_260,
  2, 208, :_reduce_261,
  1, 208, :_reduce_none,
  1, 203, :_reduce_263,
  2, 203, :_reduce_264,
  3, 203, :_reduce_265,
  4, 203, :_reduce_266,
  3, 166, :_reduce_267,
  4, 166, :_reduce_268,
  2, 166, :_reduce_269,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_278,
  0, 232, :_reduce_279,
  4, 201, :_reduce_280,
  0, 233, :_reduce_281,
  4, 201, :_reduce_282,
  3, 201, :_reduce_283,
  3, 201, :_reduce_284,
  2, 201, :_reduce_285,
  3, 201, :_reduce_286,
  0, 234, :_reduce_287,
  4, 201, :_reduce_288,
  1, 201, :_reduce_289,
  4, 201, :_reduce_290,
  3, 201, :_reduce_291,
  1, 201, :_reduce_292,
  5, 201, :_reduce_293,
  4, 201, :_reduce_294,
  3, 201, :_reduce_295,
  2, 201, :_reduce_296,
  1, 201, :_reduce_none,
  2, 201, :_reduce_298,
  2, 201, :_reduce_299,
  6, 201, :_reduce_300,
  6, 201, :_reduce_301,
  0, 235, :_reduce_302,
  0, 236, :_reduce_303,
  7, 201, :_reduce_304,
  0, 237, :_reduce_305,
  0, 238, :_reduce_306,
  7, 201, :_reduce_307,
  5, 201, :_reduce_308,
  4, 201, :_reduce_309,
  0, 239, :_reduce_310,
  0, 240, :_reduce_311,
  9, 201, :_reduce_312,
  0, 241, :_reduce_313,
  0, 242, :_reduce_314,
  7, 201, :_reduce_315,
  0, 243, :_reduce_316,
  0, 244, :_reduce_317,
  0, 245, :_reduce_318,
  9, 201, :_reduce_319,
  0, 246, :_reduce_320,
  0, 247, :_reduce_321,
  6, 201, :_reduce_322,
  0, 248, :_reduce_323,
  6, 201, :_reduce_324,
  0, 249, :_reduce_325,
  0, 250, :_reduce_326,
  9, 201, :_reduce_327,
  1, 201, :_reduce_328,
  1, 201, :_reduce_329,
  1, 201, :_reduce_330,
  1, 201, :_reduce_331,
  1, 161, :_reduce_332,
  1, 251, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  2, 222, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 223, :_reduce_none,
  5, 223, :_reduce_350,
  1, 151, :_reduce_none,
  2, 151, :_reduce_352,
  1, 226, :_reduce_none,
  1, 226, :_reduce_354,
  1, 262, :_reduce_none,
  3, 262, :_reduce_356,
  1, 265, :_reduce_357,
  3, 265, :_reduce_358,
  1, 264, :_reduce_359,
  4, 264, :_reduce_360,
  6, 264, :_reduce_361,
  3, 264, :_reduce_362,
  5, 264, :_reduce_363,
  2, 264, :_reduce_364,
  4, 264, :_reduce_365,
  1, 264, :_reduce_366,
  3, 264, :_reduce_367,
  6, 266, :_reduce_368,
  8, 266, :_reduce_369,
  4, 266, :_reduce_370,
  6, 266, :_reduce_371,
  4, 266, :_reduce_372,
  2, 266, :_reduce_373,
  6, 266, :_reduce_374,
  2, 266, :_reduce_375,
  4, 266, :_reduce_376,
  6, 266, :_reduce_377,
  2, 266, :_reduce_378,
  4, 266, :_reduce_379,
  2, 266, :_reduce_380,
  4, 266, :_reduce_381,
  1, 266, :_reduce_382,
  1, 178, :_reduce_383,
  1, 178, :_reduce_none,
  3, 272, :_reduce_385,
  1, 272, :_reduce_386,
  4, 272, :_reduce_387,
  1, 273, :_reduce_none,
  2, 273, :_reduce_389,
  1, 274, :_reduce_390,
  3, 274, :_reduce_391,
  1, 275, :_reduce_392,
  1, 275, :_reduce_none,
  0, 279, :_reduce_394,
  3, 221, :_reduce_395,
  4, 277, :_reduce_396,
  1, 277, :_reduce_397,
  3, 278, :_reduce_398,
  3, 278, :_reduce_399,
  0, 282, :_reduce_400,
  0, 283, :_reduce_401,
  6, 281, :_reduce_402,
  2, 174, :_reduce_403,
  4, 174, :_reduce_404,
  4, 174, :_reduce_405,
  0, 285, :_reduce_406,
  3, 220, :_reduce_407,
  4, 220, :_reduce_408,
  4, 220, :_reduce_409,
  3, 220, :_reduce_410,
  3, 220, :_reduce_411,
  3, 220, :_reduce_412,
  2, 220, :_reduce_413,
  1, 220, :_reduce_414,
  4, 220, :_reduce_415,
  0, 286, :_reduce_416,
  0, 287, :_reduce_417,
  6, 219, :_reduce_418,
  0, 288, :_reduce_419,
  0, 289, :_reduce_420,
  6, 219, :_reduce_421,
  0, 291, :_reduce_422,
  6, 225, :_reduce_423,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  6, 150, :_reduce_426,
  0, 150, :_reduce_427,
  1, 292, :_reduce_428,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  2, 293, :_reduce_431,
  1, 293, :_reduce_none,
  2, 152, :_reduce_433,
  1, 152, :_reduce_none,
  1, 211, :_reduce_435,
  1, 211, :_reduce_436,
  1, 211, :_reduce_none,
  1, 212, :_reduce_438,
  1, 295, :_reduce_none,
  2, 295, :_reduce_440,
  3, 296, :_reduce_441,
  1, 296, :_reduce_442,
  3, 213, :_reduce_443,
  3, 214, :_reduce_444,
  3, 215, :_reduce_445,
  3, 215, :_reduce_446,
  1, 300, :_reduce_447,
  3, 300, :_reduce_448,
  1, 301, :_reduce_none,
  2, 301, :_reduce_450,
  3, 216, :_reduce_451,
  3, 216, :_reduce_452,
  1, 303, :_reduce_453,
  3, 303, :_reduce_454,
  1, 297, :_reduce_455,
  2, 297, :_reduce_456,
  1, 298, :_reduce_457,
  2, 298, :_reduce_458,
  1, 299, :_reduce_459,
  2, 299, :_reduce_460,
  1, 302, :_reduce_461,
  0, 305, :_reduce_462,
  3, 302, :_reduce_463,
  0, 306, :_reduce_464,
  4, 302, :_reduce_465,
  1, 304, :_reduce_466,
  1, 304, :_reduce_467,
  1, 304, :_reduce_468,
  1, 304, :_reduce_none,
  2, 198, :_reduce_470,
  1, 198, :_reduce_471,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  3, 199, :_reduce_476,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  2, 294, :_reduce_479,
  2, 294, :_reduce_480,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 191, :_reduce_486,
  1, 191, :_reduce_487,
  1, 191, :_reduce_488,
  1, 191, :_reduce_489,
  1, 191, :_reduce_490,
  1, 191, :_reduce_491,
  1, 191, :_reduce_492,
  1, 217, :_reduce_493,
  1, 217, :_reduce_494,
  1, 160, :_reduce_495,
  1, 160, :_reduce_496,
  1, 164, :_reduce_497,
  1, 164, :_reduce_498,
  1, 227, :_reduce_499,
  0, 308, :_reduce_500,
  4, 227, :_reduce_501,
  2, 227, :_reduce_502,
  3, 229, :_reduce_503,
  2, 229, :_reduce_504,
  6, 280, :_reduce_505,
  8, 280, :_reduce_506,
  4, 280, :_reduce_507,
  6, 280, :_reduce_508,
  4, 280, :_reduce_509,
  6, 280, :_reduce_510,
  2, 280, :_reduce_511,
  4, 280, :_reduce_512,
  6, 280, :_reduce_513,
  2, 280, :_reduce_514,
  4, 280, :_reduce_515,
  2, 280, :_reduce_516,
  4, 280, :_reduce_517,
  1, 280, :_reduce_518,
  0, 280, :_reduce_519,
  1, 276, :_reduce_520,
  1, 276, :_reduce_521,
  1, 276, :_reduce_522,
  1, 276, :_reduce_523,
  1, 263, :_reduce_none,
  1, 263, :_reduce_525,
  1, 310, :_reduce_none,
  3, 310, :_reduce_527,
  1, 267, :_reduce_528,
  3, 267, :_reduce_529,
  3, 311, :_reduce_530,
  3, 312, :_reduce_531,
  1, 268, :_reduce_532,
  3, 268, :_reduce_533,
  1, 309, :_reduce_534,
  3, 309, :_reduce_535,
  1, 313, :_reduce_none,
  1, 313, :_reduce_none,
  2, 269, :_reduce_538,
  1, 269, :_reduce_539,
  1, 314, :_reduce_none,
  1, 314, :_reduce_none,
  2, 271, :_reduce_542,
  2, 270, :_reduce_543,
  0, 270, :_reduce_544,
  1, 230, :_reduce_none,
  0, 315, :_reduce_546,
  4, 230, :_reduce_547,
  1, 218, :_reduce_548,
  2, 218, :_reduce_549,
  1, 205, :_reduce_none,
  3, 205, :_reduce_551,
  3, 316, :_reduce_552,
  3, 316, :_reduce_553,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 185, :_reduce_none,
  2, 163, :_reduce_none,
  0, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 228, :_reduce_575,
  1, 228, :_reduce_none,
  1, 145, :_reduce_none,
  2, 145, :_reduce_578,
  0, 143, :_reduce_579 ]

racc_reduce_n = 580

racc_shift_n = 992

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAST_TOKEN => 132,
  :tLAMBDA => 133,
  :tLAMBEG => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tLAMBDA",
  "tLAMBEG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "f_args",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), 0, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_57(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary = list_append val[0], s(:splat, val[2])
                      ary.concat val[4].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      ary = s(:array, s(:splat))
                      ary.concat val[2].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = :expr_end
                      result = sym
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_230(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0] << s(:hash, *val[2].sexp_body) # TODO: self.args
                    
    result
end

def _reduce_252(val, _values, result)
                      result = s(:hash, *val[0].values)
                    
    result
end

def _reduce_253(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_259(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_280(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_281(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_282(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_295(val, _values, result)
                      raise "no3\non#{val.inspect}"
                    
    result
end

def _reduce_296(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call nil, oper.to_sym
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 297 omitted

def _reduce_298(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_299(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_302(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_303(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_309(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_313(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_314(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_321(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_324(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_326(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_329(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_359(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_360(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_361(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_362(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_364(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_365(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_366(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_367(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_368(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_369(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_370(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_371(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
 result = 0 
    result
end

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      # TODO: dyna_push ? hrm
                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_395(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_399(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_400(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_401(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_402(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_403(val, _values, result)
                      # TODO:
                      # if (nd_type($1) == NODE_YIELD) {
                      #     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_405(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_411(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_414(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_416(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_418(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_419(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_420(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_421(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_422(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 424 omitted

# reduce 425 omitted

def _reduce_426(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_428(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 429 omitted

# reduce 430 omitted

def _reduce_431(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 434 omitted

def _reduce_435(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_436(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

# reduce 439 omitted

def _reduce_440(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_445(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_448(val, _values, result)
                      result = val[0] << new_word_list_entry(val)
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << new_qword_list_entry(val)
                    
    result
end

def _reduce_455(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_456(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_458(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_460(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_462(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_463(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_465(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_466(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_467(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_468(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 472 omitted

# reduce 473 omitted

# reduce 474 omitted

# reduce 475 omitted

def _reduce_476(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 477 omitted

# reduce 478 omitted

def _reduce_479(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_480(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

def _reduce_486(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_487(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_488(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_489(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_491(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_492(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_493(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_494(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_497(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_498(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_502(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_506(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_507(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_508(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_509(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_510(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_511(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_512(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_513(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_514(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_515(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_516(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_517(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_518(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_519(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_520(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_521(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_522(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 524 omitted

def _reduce_525(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 526 omitted

def _reduce_527(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_528(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_529(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_530(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_531(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_535(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 536 omitted

# reduce 537 omitted

def _reduce_538(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_539(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 540 omitted

# reduce 541 omitted

def _reduce_542(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = nil
                    
    result
end

# reduce 545 omitted

def _reduce_546(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_548(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_549(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_552(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_553(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      result = s(:array, s(:lit, label.to_sym), val.last)
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

# reduce 556 omitted

# reduce 557 omitted

# reduce 558 omitted

# reduce 559 omitted

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

def _reduce_575(val, _values, result)
 yyerrok 
    result
end

# reduce 576 omitted

# reduce 577 omitted

def _reduce_578(val, _values, result)
 yyerrok 
    result
end

def _reduce_579(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby19Parser
